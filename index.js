// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  Module['setWindowTitle'] = function(title) { document.title = title };
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
Module['print'] = typeof console !== 'undefined' ? console.log : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;


function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var functionPointers = new Array(0);

function addFunction(func) {
  for (var i = 0; i < functionPointers.length; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return 1 + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-1] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    return Module['dynCall_' + sig].call(null, ptr);
  }
}



var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  assert(__cxa_demangle_func);
  try {
    var s =
      func.substr(1);
    var len = lengthBytesUTF8(s)+1;
    var buf = _malloc(len);
    stringToUTF8(s, buf, len);
    var status = _malloc(4);
    var ret = __cxa_demangle_func(buf, 0, 0, status);
    if (HEAP32[((status)>>2)] === 0 && ret) {
      return Pointer_stringify(ret);
    }
    // otherwise, libcxxabi failed
  } catch(e) {
    // ignore problems here
  } finally {
    if (buf) _free(buf);
    if (status) _free(status);
    if (ret) _free(ret);
  }
  // failure when using libcxxabi, don't demangle
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;



function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 6064;
/* global initializers */  __ATINIT__.push();


memoryInitializer = "data:application/octet-stream;base64,RAIAAJUMAABsAgAA9QwAACAAAAAAAAAAbAIAAKIMAAAwAAAAAAAAAEQCAADDDAAAbAIAANAMAAAQAAAAAAAAAEwAAAAFAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAgAAAKwXAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAD//////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAABAAAAABAAAAAgAAAAMAAAAEAAAABAAAAAEAAAABAAAAAQAAAAAAAAA4AAAAAQAAAAUAAAADAAAABAAAAAQAAAACAAAAAgAAAAIAAABUISIZDQECAxFLHAwQBAsdEh4naG5vcHFiIAUGDxMUFRoIFgcoJBcYCQoOGx8lI4OCfSYqKzw9Pj9DR0pNWFlaW1xdXl9gYWNkZWZnaWprbHJzdHl6e3wASWxsZWdhbCBieXRlIHNlcXVlbmNlAERvbWFpbiBlcnJvcgBSZXN1bHQgbm90IHJlcHJlc2VudGFibGUATm90IGEgdHR5AFBlcm1pc3Npb24gZGVuaWVkAE9wZXJhdGlvbiBub3QgcGVybWl0dGVkAE5vIHN1Y2ggZmlsZSBvciBkaXJlY3RvcnkATm8gc3VjaCBwcm9jZXNzAEZpbGUgZXhpc3RzAFZhbHVlIHRvbyBsYXJnZSBmb3IgZGF0YSB0eXBlAE5vIHNwYWNlIGxlZnQgb24gZGV2aWNlAE91dCBvZiBtZW1vcnkAUmVzb3VyY2UgYnVzeQBJbnRlcnJ1cHRlZCBzeXN0ZW0gY2FsbABSZXNvdXJjZSB0ZW1wb3JhcmlseSB1bmF2YWlsYWJsZQBJbnZhbGlkIHNlZWsAQ3Jvc3MtZGV2aWNlIGxpbmsAUmVhZC1vbmx5IGZpbGUgc3lzdGVtAERpcmVjdG9yeSBub3QgZW1wdHkAQ29ubmVjdGlvbiByZXNldCBieSBwZWVyAE9wZXJhdGlvbiB0aW1lZCBvdXQAQ29ubmVjdGlvbiByZWZ1c2VkAEhvc3QgaXMgZG93bgBIb3N0IGlzIHVucmVhY2hhYmxlAEFkZHJlc3MgaW4gdXNlAEJyb2tlbiBwaXBlAEkvTyBlcnJvcgBObyBzdWNoIGRldmljZSBvciBhZGRyZXNzAEJsb2NrIGRldmljZSByZXF1aXJlZABObyBzdWNoIGRldmljZQBOb3QgYSBkaXJlY3RvcnkASXMgYSBkaXJlY3RvcnkAVGV4dCBmaWxlIGJ1c3kARXhlYyBmb3JtYXQgZXJyb3IASW52YWxpZCBhcmd1bWVudABBcmd1bWVudCBsaXN0IHRvbyBsb25nAFN5bWJvbGljIGxpbmsgbG9vcABGaWxlbmFtZSB0b28gbG9uZwBUb28gbWFueSBvcGVuIGZpbGVzIGluIHN5c3RlbQBObyBmaWxlIGRlc2NyaXB0b3JzIGF2YWlsYWJsZQBCYWQgZmlsZSBkZXNjcmlwdG9yAE5vIGNoaWxkIHByb2Nlc3MAQmFkIGFkZHJlc3MARmlsZSB0b28gbGFyZ2UAVG9vIG1hbnkgbGlua3MATm8gbG9ja3MgYXZhaWxhYmxlAFJlc291cmNlIGRlYWRsb2NrIHdvdWxkIG9jY3VyAFN0YXRlIG5vdCByZWNvdmVyYWJsZQBQcmV2aW91cyBvd25lciBkaWVkAE9wZXJhdGlvbiBjYW5jZWxlZABGdW5jdGlvbiBub3QgaW1wbGVtZW50ZWQATm8gbWVzc2FnZSBvZiBkZXNpcmVkIHR5cGUASWRlbnRpZmllciByZW1vdmVkAERldmljZSBub3QgYSBzdHJlYW0ATm8gZGF0YSBhdmFpbGFibGUARGV2aWNlIHRpbWVvdXQAT3V0IG9mIHN0cmVhbXMgcmVzb3VyY2VzAExpbmsgaGFzIGJlZW4gc2V2ZXJlZABQcm90b2NvbCBlcnJvcgBCYWQgbWVzc2FnZQBGaWxlIGRlc2NyaXB0b3IgaW4gYmFkIHN0YXRlAE5vdCBhIHNvY2tldABEZXN0aW5hdGlvbiBhZGRyZXNzIHJlcXVpcmVkAE1lc3NhZ2UgdG9vIGxhcmdlAFByb3RvY29sIHdyb25nIHR5cGUgZm9yIHNvY2tldABQcm90b2NvbCBub3QgYXZhaWxhYmxlAFByb3RvY29sIG5vdCBzdXBwb3J0ZWQAU29ja2V0IHR5cGUgbm90IHN1cHBvcnRlZABOb3Qgc3VwcG9ydGVkAFByb3RvY29sIGZhbWlseSBub3Qgc3VwcG9ydGVkAEFkZHJlc3MgZmFtaWx5IG5vdCBzdXBwb3J0ZWQgYnkgcHJvdG9jb2wAQWRkcmVzcyBub3QgYXZhaWxhYmxlAE5ldHdvcmsgaXMgZG93bgBOZXR3b3JrIHVucmVhY2hhYmxlAENvbm5lY3Rpb24gcmVzZXQgYnkgbmV0d29yawBDb25uZWN0aW9uIGFib3J0ZWQATm8gYnVmZmVyIHNwYWNlIGF2YWlsYWJsZQBTb2NrZXQgaXMgY29ubmVjdGVkAFNvY2tldCBub3QgY29ubmVjdGVkAENhbm5vdCBzZW5kIGFmdGVyIHNvY2tldCBzaHV0ZG93bgBPcGVyYXRpb24gYWxyZWFkeSBpbiBwcm9ncmVzcwBPcGVyYXRpb24gaW4gcHJvZ3Jlc3MAU3RhbGUgZmlsZSBoYW5kbGUAUmVtb3RlIEkvTyBlcnJvcgBRdW90YSBleGNlZWRlZABObyBtZWRpdW0gZm91bmQAV3JvbmcgbWVkaXVtIHR5cGUATm8gZXJyb3IgaW5mb3JtYXRpb24AABEACgAREREAAAAABQAAAAAAAAkAAAAACwAAAAAAAAAAEQAPChEREQMKBwABEwkLCwAACQYLAAALAAYRAAAAERERAAAAAAAAAAAAAAAAAAAAAAsAAAAAAAAAABEACgoREREACgAAAgAJCwAAAAkACwAACwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAwAAAAACQwAAAAAAAwAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADgAAAAAAAAAAAAAADQAAAAQNAAAAAAkOAAAAAAAOAAAOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAA8AAAAADwAAAAAJEAAAAAAAEAAAEAAAEgAAABISEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASAAAAEhISAAAAAAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwAAAAAAAAAAAAAACgAAAAAKAAAAAAkLAAAAAAALAAALAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAADAAAAAAJDAAAAAAADAAADAAALSsgICAwWDB4AChudWxsKQAtMFgrMFggMFgtMHgrMHggMHgAaW5mAElORgBuYW4ATkFOADAxMjM0NTY3ODlBQkNERUZ0ZXJtaW5hdGluZyB3aXRoICVzIGV4Y2VwdGlvbiBvZiB0eXBlICVzOiAlcwB0ZXJtaW5hdGluZyB3aXRoICVzIGV4Y2VwdGlvbiBvZiB0eXBlICVzAHRlcm1pbmF0aW5nIHdpdGggJXMgZm9yZWlnbiBleGNlcHRpb24AdGVybWluYXRpbmcAdW5jYXVnaHQAU3Q5ZXhjZXB0aW9uAE4xMF9fY3h4YWJpdjExNl9fc2hpbV90eXBlX2luZm9FAFN0OXR5cGVfaW5mbwBOMTBfX2N4eGFiaXYxMjBfX3NpX2NsYXNzX3R5cGVfaW5mb0UATjEwX19jeHhhYml2MTE3X19jbGFzc190eXBlX2luZm9FAHB0aHJlYWRfb25jZSBmYWlsdXJlIGluIF9fY3hhX2dldF9nbG9iYWxzX2Zhc3QoKQBjYW5ub3QgY3JlYXRlIHB0aHJlYWQga2V5IGZvciBfX2N4YV9nZXRfZ2xvYmFscygpAGNhbm5vdCB6ZXJvIG91dCB0aHJlYWQgdmFsdWUgZm9yIF9fY3hhX2dldF9nbG9iYWxzKCkAdGVybWluYXRlX2hhbmRsZXIgdW5leHBlY3RlZGx5IHJldHVybmVkACBjb25zdAAgdm9sYXRpbGUAIHJlc3RyaWN0ACBjb21wbGV4ACBpbWFnaW5hcnkAIFsAICgAKQAoACYmAG9iamNfb2JqZWN0PAAqACYAb2JqY3Byb3RvACAAPAA+ACB2ZWN0b3JbAF0AcGl4ZWwgdmVjdG9yWwAmPQA9ACwAfgA6OgBkZWxldGVbXSAAZGVsZXRlIAAvAC89AF4AXj0APT0APj0AKVsAPD0APDwAPDw9AC0ALT0AKj0ALS0AKS0tACE9ACEAfHwAfAB8PQAtPioAKwArPQArKwApKysAKSA/ICgAKSA6ICgAJQAlPQA+PgA+Pj0AdGhyb3cAdGhyb3cgAHR5cGVpZCgAc2l6ZW9mLi4uKAAsIABzaXplb2YgKABzdGF0aWNfY2FzdDwAPigAcmVpbnRlcnByZXRfY2FzdDwALT4Abm9leGNlcHQgKABbXSAAKSAALgAuKgBzdGQ6OgBvcGVyYXRvciYmAG9wZXJhdG9yJgBvcGVyYXRvciY9AG9wZXJhdG9yPQBvcGVyYXRvcigpAG9wZXJhdG9yLABvcGVyYXRvcn4Ab3BlcmF0b3IgAG9wZXJhdG9yIGRlbGV0ZVtdAG9wZXJhdG9yKgBvcGVyYXRvci8Ab3BlcmF0b3IvPQBvcGVyYXRvcl4Ab3BlcmF0b3JePQBvcGVyYXRvcj09AG9wZXJhdG9yPj0Ab3BlcmF0b3I+AG9wZXJhdG9yW10Ab3BlcmF0b3I8PQBvcGVyYXRvciIiIABvcGVyYXRvcjw8AG9wZXJhdG9yPDw9AG9wZXJhdG9yPABvcGVyYXRvci0Ab3BlcmF0b3ItPQBvcGVyYXRvcio9AG9wZXJhdG9yLS0Ab3BlcmF0b3IgbmV3W10Ab3BlcmF0b3IhPQBvcGVyYXRvciEAb3BlcmF0b3IgbmV3AG9wZXJhdG9yfHwAb3BlcmF0b3J8AG9wZXJhdG9yfD0Ab3BlcmF0b3ItPioAb3BlcmF0b3IrAG9wZXJhdG9yKz0Ab3BlcmF0b3IrKwBvcGVyYXRvci0+AG9wZXJhdG9yPwBvcGVyYXRvciUAb3BlcmF0b3IlPQBvcGVyYXRvcj4+AG9wZXJhdG9yPj49AG9wZXJhdG9yIGRlbGV0ZQAndW5uYW1lZAAnbGFtYmRhJygAc3RkOjpzdHJpbmcAc3RkOjpiYXNpY19zdHJpbmc8Y2hhciwgc3RkOjpjaGFyX3RyYWl0czxjaGFyPiwgc3RkOjphbGxvY2F0b3I8Y2hhcj4gPgBiYXNpY19zdHJpbmcAc3RkOjppc3RyZWFtAHN0ZDo6YmFzaWNfaXN0cmVhbTxjaGFyLCBzdGQ6OmNoYXJfdHJhaXRzPGNoYXI+ID4AYmFzaWNfaXN0cmVhbQBzdGQ6Om9zdHJlYW0Ac3RkOjpiYXNpY19vc3RyZWFtPGNoYXIsIHN0ZDo6Y2hhcl90cmFpdHM8Y2hhcj4gPgBiYXNpY19vc3RyZWFtAHN0ZDo6aW9zdHJlYW0Ac3RkOjpiYXNpY19pb3N0cmVhbTxjaGFyLCBzdGQ6OmNoYXJfdHJhaXRzPGNoYXI+ID4AYmFzaWNfaW9zdHJlYW0AZHluYW1pY19jYXN0PAApKABjb25zdF9jYXN0PABhbGlnbm9mICgAZnAAd2NoYXJfdABmYWxzZQB0cnVlAGNoYXIAc2lnbmVkIGNoYXIAdW5zaWduZWQgY2hhcgBzaG9ydAB1bnNpZ25lZCBzaG9ydAB1AGwAdWwAbGwAdWxsAF9faW50MTI4AHVuc2lnbmVkIF9faW50MTI4ACVMYUwAJWEAJWFmAGRlY2x0eXBlKABzdGQ6OmFsbG9jYXRvcgBzdGQ6OmJhc2ljX3N0cmluZwA6OnN0cmluZyBsaXRlcmFsAHN0ZABfR0xPQkFMX19OAChhbm9ueW1vdXMgbmFtZXNwYWNlKQAgPgBUXwBpZAA6OioAICYAICYmACBbXQB2b2lkAGJvb2wAaW50AHVuc2lnbmVkIGludABsb25nAHVuc2lnbmVkIGxvbmcAbG9uZyBsb25nAGZsb2F0AGxvbmcgZG91YmxlAF9fZmxvYXQxMjgALi4uAGRlY2ltYWw2NABkZWNpbWFsMTI4AGRlY2ltYWwzMgBkZWNpbWFsMTYAY2hhcjMyX3QAY2hhcjE2X3QAYXV0bwBzdGQ6Om51bGxwdHJfdABkb3VibGUAdW5zaWduZWQgbG9uZyBsb25nAF9ibG9ja19pbnZva2UAaW52b2NhdGlvbiBmdW5jdGlvbiBmb3IgYmxvY2sgaW4gAHZ0YWJsZSBmb3IgAFZUVCBmb3IgAHR5cGVpbmZvIGZvciAAdHlwZWluZm8gbmFtZSBmb3IgAGNvdmFyaWFudCByZXR1cm4gdGh1bmsgdG8gAGNvbnN0cnVjdGlvbiB2dGFibGUgZm9yIAAtaW4tAHZpcnR1YWwgdGh1bmsgdG8gAG5vbi12aXJ0dWFsIHRodW5rIHRvIABndWFyZCB2YXJpYWJsZSBmb3IgAHJlZmVyZW5jZSB0ZW1wb3JhcnkgZm9yIA==";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___gxx_personality_v0() {
    }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var CVMFS={ops_table:null,data_url:null,catalog:null,default_mountpoint:"/cvmfs",relativePath:function (path) {
          var rel = path.replace(CVMFS.default_mountpoint, '');
          return rel;
        },md5HexToPair:function (md5hex) {
          var bytes = new Array(16);
  
          var i = md5hex.length - 2;
          while (i >= 0) {
              bytes[15 - i/2] = md5hex.substr(i, 2);
              i -= 2;
          }
          
          return {
            low: "0x" + bytes.slice(0, bytes.length/2).join(''),
            high: "0x" + bytes.slice(bytes.length/2).join('')
          };
        },md5PairFromPath:function (path) {
          const md5Hex = window.md5(path);
          return CVMFS.md5HexToPair(md5Hex);
        },httpGet:function (url) {
          const request = new XMLHttpRequest();
  
          request.open('GET', url, false);
          request.overrideMimeType("text/plain; charset=x-user-defined");
          request.send(null);
  
          if (request.status === 200) {
            return request.responseText;
          }
  
          return null;
        },mount:function (mount) {
          CVMFS.base_url = mount.opts.base_url;
          const manifest_url = mount.opts.base_url + "/.cvmfspublished";
  
          const resp1 = CVMFS.httpGet(manifest_url);
          if (resp1 !== null) {
            const lines = resp1.split("\n");
            const catalog_hash = lines.filter(function (line) {
              return line.charAt(0) === 'C';
            })[0].substr(1);
  
            if (catalog_hash !== null) {
              CVMFS.data_url = mount.opts.base_url + "/data/";
  
              const catalog_url = CVMFS.data_url + catalog_hash.substr(0, 2) + "/" + catalog_hash.substr(2) + "C";
              const resp2 = CVMFS.httpGet(catalog_url);
  
              if (resp2 !== null) {
                const decompressed = pako.inflate(resp2);
                CVMFS.catalog = new window.SQL.Database(decompressed);
                return CVMFS.createNode(null, '/', 16384 | 511, 0);
              }
            }
          }
          return null;
        },createNode:function (parent, name, mode, dev) {
          if (!CVMFS.ops_table) {
            CVMFS.ops_table = {
              dir: {
                node: {
                  getattr: CVMFS.node_ops.getattr,
                  lookup: CVMFS.node_ops.lookup,
                  readdir: CVMFS.node_ops.readdir,
                  symlink: CVMFS.node_ops.symlink
                },
                stream: {}
              },
              file: {
                node: {
                  getattr: CVMFS.node_ops.getattr,
                },
                stream: {
                  read: CVMFS.stream_ops.read,
                }
              },
              link: {
                node: {
                  getattr: CVMFS.node_ops.getattr,
                  readlink: CVMFS.node_ops.readlink
                },
                stream: {}
              }
            };
          }
  
          var node = FS.createNode(parent, name, mode, dev);
  
          if (FS.isDir(node.mode)) {
            node.node_ops = CVMFS.ops_table.dir.node;
            node.stream_ops = CVMFS.ops_table.dir.stream;
            node.contents = {};
          } else if (FS.isFile(node.mode)) {
            node.node_ops = CVMFS.ops_table.file.node;
            node.stream_ops = CVMFS.ops_table.file.stream;
            node.usedBytes = 0;
            node.contents = null; 
          }
  
          node.timestamp = Date.now();
  
          if (parent) {
            parent.contents[name] = node;
          }
  
          return node;
        },flagsIsDir:function (flags) { return flags === 1; },flagsIsRegFile:function (flags) { return flags === 4; },node_ops:{lookup:function (parent, name) {
            const path = CVMFS.relativePath(PATH.join(FS.getPath(parent), name));
            const pair = CVMFS.md5PairFromPath(path);
  
            const query = "SELECT flags FROM catalog WHERE md5path_1 = " + pair.high + " AND md5path_2 = " + pair.low;
            const result = CVMFS.catalog.exec(query);
            if (result[0] === undefined) {
              throw FS.genericErrors[ERRNO_CODES.ENOENT];
            }
            const flags = result[0].values[0][0];
  
            var mode = 511;
            if (CVMFS.flagsIsDir(flags)) {
              mode |= 16384;
            } else if (CVMFS.flagsIsRegFile(flags)) {
              mode |= 32768;
            } else {
              throw FS.genericErrors[ERRNO_CODES.ENOENT];
            }
  
            return CVMFS.createNode(parent, name, mode, 0);
          },readdir:function (node) {
            var entries = ['.', '..'];
            
            const path = CVMFS.relativePath(FS.getPath(node));
            const pair = CVMFS.md5PairFromPath(path);
  
            const query = "SELECT name, flags FROM catalog WHERE parent_1 = " + pair.high + " AND parent_2 = " + pair.low;
            const result = CVMFS.catalog.exec(query);
            if (result[0] !== undefined) {
              for (const entry of result[0].values) {
                const flags = entry[1];
                if (CVMFS.flagsIsDir(flags) || CVMFS.flagsIsRegFile(flags)) {
                  entries.push(entry[0]);
                }
              }
            }
  
            return entries;
          }},stream_ops:{read:function (stream, buffer, offset, length, position) {
            const path = CVMFS.relativePath(stream.path);
            const pair = CVMFS.md5PairFromPath(path);
            
            const query = "SELECT hex(hash) FROM catalog WHERE md5path_1 = " + pair.high + " AND md5path_2 = " + pair.low;
            const result = CVMFS.catalog.exec(query);
  
            const file_hash = result[0].values[0][0].toLowerCase();
            const file_url = CVMFS.data_url + file_hash.substr(0, 2) + "/" + file_hash.substr(2);
  
            const resp = CVMFS.httpGet(file_url);
            if (resp !== null) {
              const contents = pako.inflate(resp);
  
              if (position >= contents.length) return 0;
              const size = Math.min(contents.length - position, length);
              buffer.set(contents.subarray(position, position + size), offset);
  
              return size;
            }
  
            return 0;
          }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        const cvmfs_mountdir = CVMFS.default_mountpoint.substr(1);
        if (parts.length > 0 && parts[0].localeCompare(cvmfs_mountdir) === 0) {
          var cvmfs_node = FS.lookupNodeInCache(FS.root, cvmfs_mountdir);
          if (cvmfs_node === null) {
            cvmfs_node = FS.mkdir2(FS.root, cvmfs_mountdir);
          }
          if (!FS.isMountpoint(cvmfs_node) && FS.isDir(cvmfs_node.mode)) {
            FS.mount2(CVMFS, {base_url: "http://hepvm.cern.ch/cvmfs/cernvm-devel.cern.ch"},
              "/" + cvmfs_mountdir, cvmfs_node, false);
          }
        }
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },hashGetNode:function (parent, name) {
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        return null;
      },lookupNodeInCache:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        return FS.hashGetNode(parent, name);
      },lookupNode:function (parent, name) {
        var node = FS.lookupNodeInCache(parent, name);
        if (node === null) {
          // if we failed to find it in the cache, call into the VFS
          return FS.lookup(parent, name);
        }
        return node;  
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          const lookup = FS.lookupPath(mountpoint, { follow_mount: false });
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
        return FS.mount2(type, opts, mountpoint, node, root);
      },mount2:function (type, opts, mountpoint, node, root) {
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return FS.mknod2(parent, name, mode, dev);
      },mknod2:function (parent, name, mode, dev) {
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },modeForMkdir:function (mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return mode;
      },mkdir:function (path, mode) {
        return FS.mknod(path, FS.modeForMkdir(mode), 0);
      },mkdir2:function (parent, name, mode) {
        return FS.mknod2(parent, name, FS.modeForMkdir(mode), 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
  
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

   

  function _abort() {
      Module['abort']();
    }

   

   



   

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

   


FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

var ASSERTIONS = false;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}



function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "invoke_ii": invoke_ii, "invoke_iiii": invoke_iiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___gxx_personality_v0": ___gxx_personality_v0, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall6": ___syscall6, "_abort": _abort, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var invoke_ii=env.invoke_ii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var ___syscall6=env.___syscall6;
  var _abort=env._abort;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _malloc($0) {
 $0 = $0|0;
 var $$$0172$i = 0, $$$0173$i = 0, $$$4236$i = 0, $$$4329$i = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$0172$lcssa$i = 0, $$01724$i = 0, $$0173$lcssa$i = 0, $$01733$i = 0, $$0192 = 0, $$0194 = 0, $$0201$i$i = 0, $$0202$i$i = 0, $$0206$i$i = 0, $$0207$i$i = 0;
 var $$024367$i = 0, $$0260$i$i = 0, $$0261$i$i = 0, $$0262$i$i = 0, $$0268$i$i = 0, $$0269$i$i = 0, $$0320$i = 0, $$0322$i = 0, $$0323$i = 0, $$0325$i = 0, $$0331$i = 0, $$0336$i = 0, $$0337$$i = 0, $$0337$i = 0, $$0339$i = 0, $$0340$i = 0, $$0345$i = 0, $$1176$i = 0, $$1178$i = 0, $$124466$i = 0;
 var $$1264$i$i = 0, $$1266$i$i = 0, $$1321$i = 0, $$1326$i = 0, $$1341$i = 0, $$1347$i = 0, $$1351$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2333$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i199 = 0, $$3328$i = 0, $$3349$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$4236$i = 0, $$4329$lcssa$i = 0;
 var $$43298$i = 0, $$4335$$4$i = 0, $$4335$ph$i = 0, $$43357$i = 0, $$49$i = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i17$i = 0, $$pre$i195 = 0, $$pre$i207 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i208Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink1$i = 0, $$sink1$i$i = 0;
 var $$sink12$i = 0, $$sink2$i = 0, $$sink2$i202 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
 var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
 var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
 var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
 var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
 var $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
 var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
 var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
 var $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
 var $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i206 = 0, $not$$i = 0, $not$3$i = 0;
 var $or$cond$i = 0, $or$cond$i200 = 0, $or$cond1$i = 0, $or$cond1$i198 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond49$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[1370]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (5520 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($16|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[1370] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(5488)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (5520 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==($65|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[1370] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($67) + ($75)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(5500)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (5520 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[1370] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(5488)>>2] = $76;
     HEAP32[(5500)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(5484)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (5784 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $129 = ((($124)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($130|0)==(0|0);
     $$sink12$i = $131&1;
     $132 = (((($124)) + 16|0) + ($$sink12$i<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($133|0)==(0|0);
     if ($134) {
      $$0172$lcssa$i = $124;$$0173$lcssa$i = $128;
     } else {
      $$01724$i = $124;$$01733$i = $128;$136 = $133;
      while(1) {
       $135 = ((($136)) + 4|0);
       $137 = HEAP32[$135>>2]|0;
       $138 = $137 & -8;
       $139 = (($138) - ($6))|0;
       $140 = ($139>>>0)<($$01733$i>>>0);
       $$$0173$i = $140 ? $139 : $$01733$i;
       $$$0172$i = $140 ? $136 : $$01724$i;
       $141 = ((($136)) + 16|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       $$sink1$i = $143&1;
       $144 = (((($136)) + 16|0) + ($$sink1$i<<2)|0);
       $145 = HEAP32[$144>>2]|0;
       $146 = ($145|0)==(0|0);
       if ($146) {
        $$0172$lcssa$i = $$$0172$i;$$0173$lcssa$i = $$$0173$i;
        break;
       } else {
        $$01724$i = $$$0172$i;$$01733$i = $$$0173$i;$136 = $145;
       }
      }
     }
     $147 = (($$0172$lcssa$i) + ($6)|0);
     $148 = ($147>>>0)>($$0172$lcssa$i>>>0);
     if ($148) {
      $149 = ((($$0172$lcssa$i)) + 24|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = ((($$0172$lcssa$i)) + 12|0);
      $152 = HEAP32[$151>>2]|0;
      $153 = ($152|0)==($$0172$lcssa$i|0);
      do {
       if ($153) {
        $158 = ((($$0172$lcssa$i)) + 20|0);
        $159 = HEAP32[$158>>2]|0;
        $160 = ($159|0)==(0|0);
        if ($160) {
         $161 = ((($$0172$lcssa$i)) + 16|0);
         $162 = HEAP32[$161>>2]|0;
         $163 = ($162|0)==(0|0);
         if ($163) {
          $$3$i = 0;
          break;
         } else {
          $$1176$i = $162;$$1178$i = $161;
         }
        } else {
         $$1176$i = $159;$$1178$i = $158;
        }
        while(1) {
         $164 = ((($$1176$i)) + 20|0);
         $165 = HEAP32[$164>>2]|0;
         $166 = ($165|0)==(0|0);
         if (!($166)) {
          $$1176$i = $165;$$1178$i = $164;
          continue;
         }
         $167 = ((($$1176$i)) + 16|0);
         $168 = HEAP32[$167>>2]|0;
         $169 = ($168|0)==(0|0);
         if ($169) {
          break;
         } else {
          $$1176$i = $168;$$1178$i = $167;
         }
        }
        HEAP32[$$1178$i>>2] = 0;
        $$3$i = $$1176$i;
       } else {
        $154 = ((($$0172$lcssa$i)) + 8|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = ((($155)) + 12|0);
        HEAP32[$156>>2] = $152;
        $157 = ((($152)) + 8|0);
        HEAP32[$157>>2] = $155;
        $$3$i = $152;
       }
      } while(0);
      $170 = ($150|0)==(0|0);
      do {
       if (!($170)) {
        $171 = ((($$0172$lcssa$i)) + 28|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = (5784 + ($172<<2)|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($$0172$lcssa$i|0)==($174|0);
        if ($175) {
         HEAP32[$173>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $176 = 1 << $172;
          $177 = $176 ^ -1;
          $178 = $98 & $177;
          HEAP32[(5484)>>2] = $178;
          break;
         }
        } else {
         $179 = ((($150)) + 16|0);
         $180 = HEAP32[$179>>2]|0;
         $181 = ($180|0)!=($$0172$lcssa$i|0);
         $$sink2$i = $181&1;
         $182 = (((($150)) + 16|0) + ($$sink2$i<<2)|0);
         HEAP32[$182>>2] = $$3$i;
         $183 = ($$3$i|0)==(0|0);
         if ($183) {
          break;
         }
        }
        $184 = ((($$3$i)) + 24|0);
        HEAP32[$184>>2] = $150;
        $185 = ((($$0172$lcssa$i)) + 16|0);
        $186 = HEAP32[$185>>2]|0;
        $187 = ($186|0)==(0|0);
        if (!($187)) {
         $188 = ((($$3$i)) + 16|0);
         HEAP32[$188>>2] = $186;
         $189 = ((($186)) + 24|0);
         HEAP32[$189>>2] = $$3$i;
        }
        $190 = ((($$0172$lcssa$i)) + 20|0);
        $191 = HEAP32[$190>>2]|0;
        $192 = ($191|0)==(0|0);
        if (!($192)) {
         $193 = ((($$3$i)) + 20|0);
         HEAP32[$193>>2] = $191;
         $194 = ((($191)) + 24|0);
         HEAP32[$194>>2] = $$3$i;
        }
       }
      } while(0);
      $195 = ($$0173$lcssa$i>>>0)<(16);
      if ($195) {
       $196 = (($$0173$lcssa$i) + ($6))|0;
       $197 = $196 | 3;
       $198 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$198>>2] = $197;
       $199 = (($$0172$lcssa$i) + ($196)|0);
       $200 = ((($199)) + 4|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = $201 | 1;
       HEAP32[$200>>2] = $202;
      } else {
       $203 = $6 | 3;
       $204 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$204>>2] = $203;
       $205 = $$0173$lcssa$i | 1;
       $206 = ((($147)) + 4|0);
       HEAP32[$206>>2] = $205;
       $207 = (($147) + ($$0173$lcssa$i)|0);
       HEAP32[$207>>2] = $$0173$lcssa$i;
       $208 = ($33|0)==(0);
       if (!($208)) {
        $209 = HEAP32[(5500)>>2]|0;
        $210 = $33 >>> 3;
        $211 = $210 << 1;
        $212 = (5520 + ($211<<2)|0);
        $213 = 1 << $210;
        $214 = $8 & $213;
        $215 = ($214|0)==(0);
        if ($215) {
         $216 = $8 | $213;
         HEAP32[1370] = $216;
         $$pre$i = ((($212)) + 8|0);
         $$0$i = $212;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $217 = ((($212)) + 8|0);
         $218 = HEAP32[$217>>2]|0;
         $$0$i = $218;$$pre$phi$iZ2D = $217;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $209;
        $219 = ((($$0$i)) + 12|0);
        HEAP32[$219>>2] = $209;
        $220 = ((($209)) + 8|0);
        HEAP32[$220>>2] = $$0$i;
        $221 = ((($209)) + 12|0);
        HEAP32[$221>>2] = $212;
       }
       HEAP32[(5488)>>2] = $$0173$lcssa$i;
       HEAP32[(5500)>>2] = $147;
      }
      $222 = ((($$0172$lcssa$i)) + 8|0);
      $$0 = $222;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $223 = ($0>>>0)>(4294967231);
   if ($223) {
    $$0192 = -1;
   } else {
    $224 = (($0) + 11)|0;
    $225 = $224 & -8;
    $226 = HEAP32[(5484)>>2]|0;
    $227 = ($226|0)==(0);
    if ($227) {
     $$0192 = $225;
    } else {
     $228 = (0 - ($225))|0;
     $229 = $224 >>> 8;
     $230 = ($229|0)==(0);
     if ($230) {
      $$0336$i = 0;
     } else {
      $231 = ($225>>>0)>(16777215);
      if ($231) {
       $$0336$i = 31;
      } else {
       $232 = (($229) + 1048320)|0;
       $233 = $232 >>> 16;
       $234 = $233 & 8;
       $235 = $229 << $234;
       $236 = (($235) + 520192)|0;
       $237 = $236 >>> 16;
       $238 = $237 & 4;
       $239 = $238 | $234;
       $240 = $235 << $238;
       $241 = (($240) + 245760)|0;
       $242 = $241 >>> 16;
       $243 = $242 & 2;
       $244 = $239 | $243;
       $245 = (14 - ($244))|0;
       $246 = $240 << $243;
       $247 = $246 >>> 15;
       $248 = (($245) + ($247))|0;
       $249 = $248 << 1;
       $250 = (($248) + 7)|0;
       $251 = $225 >>> $250;
       $252 = $251 & 1;
       $253 = $252 | $249;
       $$0336$i = $253;
      }
     }
     $254 = (5784 + ($$0336$i<<2)|0);
     $255 = HEAP32[$254>>2]|0;
     $256 = ($255|0)==(0|0);
     L74: do {
      if ($256) {
       $$2333$i = 0;$$3$i199 = 0;$$3328$i = $228;
       label = 57;
      } else {
       $257 = ($$0336$i|0)==(31);
       $258 = $$0336$i >>> 1;
       $259 = (25 - ($258))|0;
       $260 = $257 ? 0 : $259;
       $261 = $225 << $260;
       $$0320$i = 0;$$0325$i = $228;$$0331$i = $255;$$0337$i = $261;$$0340$i = 0;
       while(1) {
        $262 = ((($$0331$i)) + 4|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = $263 & -8;
        $265 = (($264) - ($225))|0;
        $266 = ($265>>>0)<($$0325$i>>>0);
        if ($266) {
         $267 = ($265|0)==(0);
         if ($267) {
          $$43298$i = 0;$$43357$i = $$0331$i;$$49$i = $$0331$i;
          label = 61;
          break L74;
         } else {
          $$1321$i = $$0331$i;$$1326$i = $265;
         }
        } else {
         $$1321$i = $$0320$i;$$1326$i = $$0325$i;
        }
        $268 = ((($$0331$i)) + 20|0);
        $269 = HEAP32[$268>>2]|0;
        $270 = $$0337$i >>> 31;
        $271 = (((($$0331$i)) + 16|0) + ($270<<2)|0);
        $272 = HEAP32[$271>>2]|0;
        $273 = ($269|0)==(0|0);
        $274 = ($269|0)==($272|0);
        $or$cond1$i198 = $273 | $274;
        $$1341$i = $or$cond1$i198 ? $$0340$i : $269;
        $275 = ($272|0)==(0|0);
        $not$3$i = $275 ^ 1;
        $276 = $not$3$i&1;
        $$0337$$i = $$0337$i << $276;
        if ($275) {
         $$2333$i = $$1341$i;$$3$i199 = $$1321$i;$$3328$i = $$1326$i;
         label = 57;
         break;
        } else {
         $$0320$i = $$1321$i;$$0325$i = $$1326$i;$$0331$i = $272;$$0337$i = $$0337$$i;$$0340$i = $$1341$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 57) {
      $277 = ($$2333$i|0)==(0|0);
      $278 = ($$3$i199|0)==(0|0);
      $or$cond$i200 = $277 & $278;
      if ($or$cond$i200) {
       $279 = 2 << $$0336$i;
       $280 = (0 - ($279))|0;
       $281 = $279 | $280;
       $282 = $226 & $281;
       $283 = ($282|0)==(0);
       if ($283) {
        $$0192 = $225;
        break;
       }
       $284 = (0 - ($282))|0;
       $285 = $282 & $284;
       $286 = (($285) + -1)|0;
       $287 = $286 >>> 12;
       $288 = $287 & 16;
       $289 = $286 >>> $288;
       $290 = $289 >>> 5;
       $291 = $290 & 8;
       $292 = $291 | $288;
       $293 = $289 >>> $291;
       $294 = $293 >>> 2;
       $295 = $294 & 4;
       $296 = $292 | $295;
       $297 = $293 >>> $295;
       $298 = $297 >>> 1;
       $299 = $298 & 2;
       $300 = $296 | $299;
       $301 = $297 >>> $299;
       $302 = $301 >>> 1;
       $303 = $302 & 1;
       $304 = $300 | $303;
       $305 = $301 >>> $303;
       $306 = (($304) + ($305))|0;
       $307 = (5784 + ($306<<2)|0);
       $308 = HEAP32[$307>>2]|0;
       $$4$ph$i = 0;$$4335$ph$i = $308;
      } else {
       $$4$ph$i = $$3$i199;$$4335$ph$i = $$2333$i;
      }
      $309 = ($$4335$ph$i|0)==(0|0);
      if ($309) {
       $$4$lcssa$i = $$4$ph$i;$$4329$lcssa$i = $$3328$i;
      } else {
       $$43298$i = $$3328$i;$$43357$i = $$4335$ph$i;$$49$i = $$4$ph$i;
       label = 61;
      }
     }
     if ((label|0) == 61) {
      while(1) {
       label = 0;
       $310 = ((($$43357$i)) + 4|0);
       $311 = HEAP32[$310>>2]|0;
       $312 = $311 & -8;
       $313 = (($312) - ($225))|0;
       $314 = ($313>>>0)<($$43298$i>>>0);
       $$$4329$i = $314 ? $313 : $$43298$i;
       $$4335$$4$i = $314 ? $$43357$i : $$49$i;
       $315 = ((($$43357$i)) + 16|0);
       $316 = HEAP32[$315>>2]|0;
       $317 = ($316|0)==(0|0);
       $$sink2$i202 = $317&1;
       $318 = (((($$43357$i)) + 16|0) + ($$sink2$i202<<2)|0);
       $319 = HEAP32[$318>>2]|0;
       $320 = ($319|0)==(0|0);
       if ($320) {
        $$4$lcssa$i = $$4335$$4$i;$$4329$lcssa$i = $$$4329$i;
        break;
       } else {
        $$43298$i = $$$4329$i;$$43357$i = $319;$$49$i = $$4335$$4$i;
        label = 61;
       }
      }
     }
     $321 = ($$4$lcssa$i|0)==(0|0);
     if ($321) {
      $$0192 = $225;
     } else {
      $322 = HEAP32[(5488)>>2]|0;
      $323 = (($322) - ($225))|0;
      $324 = ($$4329$lcssa$i>>>0)<($323>>>0);
      if ($324) {
       $325 = (($$4$lcssa$i) + ($225)|0);
       $326 = ($325>>>0)>($$4$lcssa$i>>>0);
       if (!($326)) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $327 = ((($$4$lcssa$i)) + 24|0);
       $328 = HEAP32[$327>>2]|0;
       $329 = ((($$4$lcssa$i)) + 12|0);
       $330 = HEAP32[$329>>2]|0;
       $331 = ($330|0)==($$4$lcssa$i|0);
       do {
        if ($331) {
         $336 = ((($$4$lcssa$i)) + 20|0);
         $337 = HEAP32[$336>>2]|0;
         $338 = ($337|0)==(0|0);
         if ($338) {
          $339 = ((($$4$lcssa$i)) + 16|0);
          $340 = HEAP32[$339>>2]|0;
          $341 = ($340|0)==(0|0);
          if ($341) {
           $$3349$i = 0;
           break;
          } else {
           $$1347$i = $340;$$1351$i = $339;
          }
         } else {
          $$1347$i = $337;$$1351$i = $336;
         }
         while(1) {
          $342 = ((($$1347$i)) + 20|0);
          $343 = HEAP32[$342>>2]|0;
          $344 = ($343|0)==(0|0);
          if (!($344)) {
           $$1347$i = $343;$$1351$i = $342;
           continue;
          }
          $345 = ((($$1347$i)) + 16|0);
          $346 = HEAP32[$345>>2]|0;
          $347 = ($346|0)==(0|0);
          if ($347) {
           break;
          } else {
           $$1347$i = $346;$$1351$i = $345;
          }
         }
         HEAP32[$$1351$i>>2] = 0;
         $$3349$i = $$1347$i;
        } else {
         $332 = ((($$4$lcssa$i)) + 8|0);
         $333 = HEAP32[$332>>2]|0;
         $334 = ((($333)) + 12|0);
         HEAP32[$334>>2] = $330;
         $335 = ((($330)) + 8|0);
         HEAP32[$335>>2] = $333;
         $$3349$i = $330;
        }
       } while(0);
       $348 = ($328|0)==(0|0);
       do {
        if ($348) {
         $431 = $226;
        } else {
         $349 = ((($$4$lcssa$i)) + 28|0);
         $350 = HEAP32[$349>>2]|0;
         $351 = (5784 + ($350<<2)|0);
         $352 = HEAP32[$351>>2]|0;
         $353 = ($$4$lcssa$i|0)==($352|0);
         if ($353) {
          HEAP32[$351>>2] = $$3349$i;
          $cond$i206 = ($$3349$i|0)==(0|0);
          if ($cond$i206) {
           $354 = 1 << $350;
           $355 = $354 ^ -1;
           $356 = $226 & $355;
           HEAP32[(5484)>>2] = $356;
           $431 = $356;
           break;
          }
         } else {
          $357 = ((($328)) + 16|0);
          $358 = HEAP32[$357>>2]|0;
          $359 = ($358|0)!=($$4$lcssa$i|0);
          $$sink3$i = $359&1;
          $360 = (((($328)) + 16|0) + ($$sink3$i<<2)|0);
          HEAP32[$360>>2] = $$3349$i;
          $361 = ($$3349$i|0)==(0|0);
          if ($361) {
           $431 = $226;
           break;
          }
         }
         $362 = ((($$3349$i)) + 24|0);
         HEAP32[$362>>2] = $328;
         $363 = ((($$4$lcssa$i)) + 16|0);
         $364 = HEAP32[$363>>2]|0;
         $365 = ($364|0)==(0|0);
         if (!($365)) {
          $366 = ((($$3349$i)) + 16|0);
          HEAP32[$366>>2] = $364;
          $367 = ((($364)) + 24|0);
          HEAP32[$367>>2] = $$3349$i;
         }
         $368 = ((($$4$lcssa$i)) + 20|0);
         $369 = HEAP32[$368>>2]|0;
         $370 = ($369|0)==(0|0);
         if ($370) {
          $431 = $226;
         } else {
          $371 = ((($$3349$i)) + 20|0);
          HEAP32[$371>>2] = $369;
          $372 = ((($369)) + 24|0);
          HEAP32[$372>>2] = $$3349$i;
          $431 = $226;
         }
        }
       } while(0);
       $373 = ($$4329$lcssa$i>>>0)<(16);
       do {
        if ($373) {
         $374 = (($$4329$lcssa$i) + ($225))|0;
         $375 = $374 | 3;
         $376 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$376>>2] = $375;
         $377 = (($$4$lcssa$i) + ($374)|0);
         $378 = ((($377)) + 4|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = $379 | 1;
         HEAP32[$378>>2] = $380;
        } else {
         $381 = $225 | 3;
         $382 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$382>>2] = $381;
         $383 = $$4329$lcssa$i | 1;
         $384 = ((($325)) + 4|0);
         HEAP32[$384>>2] = $383;
         $385 = (($325) + ($$4329$lcssa$i)|0);
         HEAP32[$385>>2] = $$4329$lcssa$i;
         $386 = $$4329$lcssa$i >>> 3;
         $387 = ($$4329$lcssa$i>>>0)<(256);
         if ($387) {
          $388 = $386 << 1;
          $389 = (5520 + ($388<<2)|0);
          $390 = HEAP32[1370]|0;
          $391 = 1 << $386;
          $392 = $390 & $391;
          $393 = ($392|0)==(0);
          if ($393) {
           $394 = $390 | $391;
           HEAP32[1370] = $394;
           $$pre$i207 = ((($389)) + 8|0);
           $$0345$i = $389;$$pre$phi$i208Z2D = $$pre$i207;
          } else {
           $395 = ((($389)) + 8|0);
           $396 = HEAP32[$395>>2]|0;
           $$0345$i = $396;$$pre$phi$i208Z2D = $395;
          }
          HEAP32[$$pre$phi$i208Z2D>>2] = $325;
          $397 = ((($$0345$i)) + 12|0);
          HEAP32[$397>>2] = $325;
          $398 = ((($325)) + 8|0);
          HEAP32[$398>>2] = $$0345$i;
          $399 = ((($325)) + 12|0);
          HEAP32[$399>>2] = $389;
          break;
         }
         $400 = $$4329$lcssa$i >>> 8;
         $401 = ($400|0)==(0);
         if ($401) {
          $$0339$i = 0;
         } else {
          $402 = ($$4329$lcssa$i>>>0)>(16777215);
          if ($402) {
           $$0339$i = 31;
          } else {
           $403 = (($400) + 1048320)|0;
           $404 = $403 >>> 16;
           $405 = $404 & 8;
           $406 = $400 << $405;
           $407 = (($406) + 520192)|0;
           $408 = $407 >>> 16;
           $409 = $408 & 4;
           $410 = $409 | $405;
           $411 = $406 << $409;
           $412 = (($411) + 245760)|0;
           $413 = $412 >>> 16;
           $414 = $413 & 2;
           $415 = $410 | $414;
           $416 = (14 - ($415))|0;
           $417 = $411 << $414;
           $418 = $417 >>> 15;
           $419 = (($416) + ($418))|0;
           $420 = $419 << 1;
           $421 = (($419) + 7)|0;
           $422 = $$4329$lcssa$i >>> $421;
           $423 = $422 & 1;
           $424 = $423 | $420;
           $$0339$i = $424;
          }
         }
         $425 = (5784 + ($$0339$i<<2)|0);
         $426 = ((($325)) + 28|0);
         HEAP32[$426>>2] = $$0339$i;
         $427 = ((($325)) + 16|0);
         $428 = ((($427)) + 4|0);
         HEAP32[$428>>2] = 0;
         HEAP32[$427>>2] = 0;
         $429 = 1 << $$0339$i;
         $430 = $431 & $429;
         $432 = ($430|0)==(0);
         if ($432) {
          $433 = $431 | $429;
          HEAP32[(5484)>>2] = $433;
          HEAP32[$425>>2] = $325;
          $434 = ((($325)) + 24|0);
          HEAP32[$434>>2] = $425;
          $435 = ((($325)) + 12|0);
          HEAP32[$435>>2] = $325;
          $436 = ((($325)) + 8|0);
          HEAP32[$436>>2] = $325;
          break;
         }
         $437 = HEAP32[$425>>2]|0;
         $438 = ($$0339$i|0)==(31);
         $439 = $$0339$i >>> 1;
         $440 = (25 - ($439))|0;
         $441 = $438 ? 0 : $440;
         $442 = $$4329$lcssa$i << $441;
         $$0322$i = $442;$$0323$i = $437;
         while(1) {
          $443 = ((($$0323$i)) + 4|0);
          $444 = HEAP32[$443>>2]|0;
          $445 = $444 & -8;
          $446 = ($445|0)==($$4329$lcssa$i|0);
          if ($446) {
           label = 97;
           break;
          }
          $447 = $$0322$i >>> 31;
          $448 = (((($$0323$i)) + 16|0) + ($447<<2)|0);
          $449 = $$0322$i << 1;
          $450 = HEAP32[$448>>2]|0;
          $451 = ($450|0)==(0|0);
          if ($451) {
           label = 96;
           break;
          } else {
           $$0322$i = $449;$$0323$i = $450;
          }
         }
         if ((label|0) == 96) {
          HEAP32[$448>>2] = $325;
          $452 = ((($325)) + 24|0);
          HEAP32[$452>>2] = $$0323$i;
          $453 = ((($325)) + 12|0);
          HEAP32[$453>>2] = $325;
          $454 = ((($325)) + 8|0);
          HEAP32[$454>>2] = $325;
          break;
         }
         else if ((label|0) == 97) {
          $455 = ((($$0323$i)) + 8|0);
          $456 = HEAP32[$455>>2]|0;
          $457 = ((($456)) + 12|0);
          HEAP32[$457>>2] = $325;
          HEAP32[$455>>2] = $325;
          $458 = ((($325)) + 8|0);
          HEAP32[$458>>2] = $456;
          $459 = ((($325)) + 12|0);
          HEAP32[$459>>2] = $$0323$i;
          $460 = ((($325)) + 24|0);
          HEAP32[$460>>2] = 0;
          break;
         }
        }
       } while(0);
       $461 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $461;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0192 = $225;
      }
     }
    }
   }
  }
 } while(0);
 $462 = HEAP32[(5488)>>2]|0;
 $463 = ($462>>>0)<($$0192>>>0);
 if (!($463)) {
  $464 = (($462) - ($$0192))|0;
  $465 = HEAP32[(5500)>>2]|0;
  $466 = ($464>>>0)>(15);
  if ($466) {
   $467 = (($465) + ($$0192)|0);
   HEAP32[(5500)>>2] = $467;
   HEAP32[(5488)>>2] = $464;
   $468 = $464 | 1;
   $469 = ((($467)) + 4|0);
   HEAP32[$469>>2] = $468;
   $470 = (($465) + ($462)|0);
   HEAP32[$470>>2] = $464;
   $471 = $$0192 | 3;
   $472 = ((($465)) + 4|0);
   HEAP32[$472>>2] = $471;
  } else {
   HEAP32[(5488)>>2] = 0;
   HEAP32[(5500)>>2] = 0;
   $473 = $462 | 3;
   $474 = ((($465)) + 4|0);
   HEAP32[$474>>2] = $473;
   $475 = (($465) + ($462)|0);
   $476 = ((($475)) + 4|0);
   $477 = HEAP32[$476>>2]|0;
   $478 = $477 | 1;
   HEAP32[$476>>2] = $478;
  }
  $479 = ((($465)) + 8|0);
  $$0 = $479;
  STACKTOP = sp;return ($$0|0);
 }
 $480 = HEAP32[(5492)>>2]|0;
 $481 = ($480>>>0)>($$0192>>>0);
 if ($481) {
  $482 = (($480) - ($$0192))|0;
  HEAP32[(5492)>>2] = $482;
  $483 = HEAP32[(5504)>>2]|0;
  $484 = (($483) + ($$0192)|0);
  HEAP32[(5504)>>2] = $484;
  $485 = $482 | 1;
  $486 = ((($484)) + 4|0);
  HEAP32[$486>>2] = $485;
  $487 = $$0192 | 3;
  $488 = ((($483)) + 4|0);
  HEAP32[$488>>2] = $487;
  $489 = ((($483)) + 8|0);
  $$0 = $489;
  STACKTOP = sp;return ($$0|0);
 }
 $490 = HEAP32[1488]|0;
 $491 = ($490|0)==(0);
 if ($491) {
  HEAP32[(5960)>>2] = 4096;
  HEAP32[(5956)>>2] = 4096;
  HEAP32[(5964)>>2] = -1;
  HEAP32[(5968)>>2] = -1;
  HEAP32[(5972)>>2] = 0;
  HEAP32[(5924)>>2] = 0;
  $492 = $1;
  $493 = $492 & -16;
  $494 = $493 ^ 1431655768;
  HEAP32[1488] = $494;
  $498 = 4096;
 } else {
  $$pre$i195 = HEAP32[(5960)>>2]|0;
  $498 = $$pre$i195;
 }
 $495 = (($$0192) + 48)|0;
 $496 = (($$0192) + 47)|0;
 $497 = (($498) + ($496))|0;
 $499 = (0 - ($498))|0;
 $500 = $497 & $499;
 $501 = ($500>>>0)>($$0192>>>0);
 if (!($501)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $502 = HEAP32[(5920)>>2]|0;
 $503 = ($502|0)==(0);
 if (!($503)) {
  $504 = HEAP32[(5912)>>2]|0;
  $505 = (($504) + ($500))|0;
  $506 = ($505>>>0)<=($504>>>0);
  $507 = ($505>>>0)>($502>>>0);
  $or$cond1$i = $506 | $507;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $508 = HEAP32[(5924)>>2]|0;
 $509 = $508 & 4;
 $510 = ($509|0)==(0);
 L167: do {
  if ($510) {
   $511 = HEAP32[(5504)>>2]|0;
   $512 = ($511|0)==(0|0);
   L169: do {
    if ($512) {
     label = 118;
    } else {
     $$0$i20$i = (5928);
     while(1) {
      $513 = HEAP32[$$0$i20$i>>2]|0;
      $514 = ($513>>>0)>($511>>>0);
      if (!($514)) {
       $515 = ((($$0$i20$i)) + 4|0);
       $516 = HEAP32[$515>>2]|0;
       $517 = (($513) + ($516)|0);
       $518 = ($517>>>0)>($511>>>0);
       if ($518) {
        break;
       }
      }
      $519 = ((($$0$i20$i)) + 8|0);
      $520 = HEAP32[$519>>2]|0;
      $521 = ($520|0)==(0|0);
      if ($521) {
       label = 118;
       break L169;
      } else {
       $$0$i20$i = $520;
      }
     }
     $544 = (($497) - ($480))|0;
     $545 = $544 & $499;
     $546 = ($545>>>0)<(2147483647);
     if ($546) {
      $547 = (_sbrk(($545|0))|0);
      $548 = HEAP32[$$0$i20$i>>2]|0;
      $549 = HEAP32[$515>>2]|0;
      $550 = (($548) + ($549)|0);
      $551 = ($547|0)==($550|0);
      if ($551) {
       $552 = ($547|0)==((-1)|0);
       if ($552) {
        $$2234243136$i = $545;
       } else {
        $$723947$i = $545;$$748$i = $547;
        label = 135;
        break L167;
       }
      } else {
       $$2247$ph$i = $547;$$2253$ph$i = $545;
       label = 126;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 118) {
     $522 = (_sbrk(0)|0);
     $523 = ($522|0)==((-1)|0);
     if ($523) {
      $$2234243136$i = 0;
     } else {
      $524 = $522;
      $525 = HEAP32[(5956)>>2]|0;
      $526 = (($525) + -1)|0;
      $527 = $526 & $524;
      $528 = ($527|0)==(0);
      $529 = (($526) + ($524))|0;
      $530 = (0 - ($525))|0;
      $531 = $529 & $530;
      $532 = (($531) - ($524))|0;
      $533 = $528 ? 0 : $532;
      $$$i = (($533) + ($500))|0;
      $534 = HEAP32[(5912)>>2]|0;
      $535 = (($$$i) + ($534))|0;
      $536 = ($$$i>>>0)>($$0192>>>0);
      $537 = ($$$i>>>0)<(2147483647);
      $or$cond$i = $536 & $537;
      if ($or$cond$i) {
       $538 = HEAP32[(5920)>>2]|0;
       $539 = ($538|0)==(0);
       if (!($539)) {
        $540 = ($535>>>0)<=($534>>>0);
        $541 = ($535>>>0)>($538>>>0);
        $or$cond2$i = $540 | $541;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $542 = (_sbrk(($$$i|0))|0);
       $543 = ($542|0)==($522|0);
       if ($543) {
        $$723947$i = $$$i;$$748$i = $522;
        label = 135;
        break L167;
       } else {
        $$2247$ph$i = $542;$$2253$ph$i = $$$i;
        label = 126;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 126) {
     $553 = (0 - ($$2253$ph$i))|0;
     $554 = ($$2247$ph$i|0)!=((-1)|0);
     $555 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $555 & $554;
     $556 = ($495>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $556 & $or$cond7$i;
     if (!($or$cond10$i)) {
      $566 = ($$2247$ph$i|0)==((-1)|0);
      if ($566) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 135;
       break L167;
      }
     }
     $557 = HEAP32[(5960)>>2]|0;
     $558 = (($496) - ($$2253$ph$i))|0;
     $559 = (($558) + ($557))|0;
     $560 = (0 - ($557))|0;
     $561 = $559 & $560;
     $562 = ($561>>>0)<(2147483647);
     if (!($562)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
     $563 = (_sbrk(($561|0))|0);
     $564 = ($563|0)==((-1)|0);
     if ($564) {
      (_sbrk(($553|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $565 = (($561) + ($$2253$ph$i))|0;
      $$723947$i = $565;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
    }
   } while(0);
   $567 = HEAP32[(5924)>>2]|0;
   $568 = $567 | 4;
   HEAP32[(5924)>>2] = $568;
   $$4236$i = $$2234243136$i;
   label = 133;
  } else {
   $$4236$i = 0;
   label = 133;
  }
 } while(0);
 if ((label|0) == 133) {
  $569 = ($500>>>0)<(2147483647);
  if ($569) {
   $570 = (_sbrk(($500|0))|0);
   $571 = (_sbrk(0)|0);
   $572 = ($570|0)!=((-1)|0);
   $573 = ($571|0)!=((-1)|0);
   $or$cond5$i = $572 & $573;
   $574 = ($570>>>0)<($571>>>0);
   $or$cond11$i = $574 & $or$cond5$i;
   $575 = $571;
   $576 = $570;
   $577 = (($575) - ($576))|0;
   $578 = (($$0192) + 40)|0;
   $579 = ($577>>>0)>($578>>>0);
   $$$4236$i = $579 ? $577 : $$4236$i;
   $or$cond11$not$i = $or$cond11$i ^ 1;
   $580 = ($570|0)==((-1)|0);
   $not$$i = $579 ^ 1;
   $581 = $580 | $not$$i;
   $or$cond49$i = $581 | $or$cond11$not$i;
   if (!($or$cond49$i)) {
    $$723947$i = $$$4236$i;$$748$i = $570;
    label = 135;
   }
  }
 }
 if ((label|0) == 135) {
  $582 = HEAP32[(5912)>>2]|0;
  $583 = (($582) + ($$723947$i))|0;
  HEAP32[(5912)>>2] = $583;
  $584 = HEAP32[(5916)>>2]|0;
  $585 = ($583>>>0)>($584>>>0);
  if ($585) {
   HEAP32[(5916)>>2] = $583;
  }
  $586 = HEAP32[(5504)>>2]|0;
  $587 = ($586|0)==(0|0);
  do {
   if ($587) {
    $588 = HEAP32[(5496)>>2]|0;
    $589 = ($588|0)==(0|0);
    $590 = ($$748$i>>>0)<($588>>>0);
    $or$cond12$i = $589 | $590;
    if ($or$cond12$i) {
     HEAP32[(5496)>>2] = $$748$i;
    }
    HEAP32[(5928)>>2] = $$748$i;
    HEAP32[(5932)>>2] = $$723947$i;
    HEAP32[(5940)>>2] = 0;
    $591 = HEAP32[1488]|0;
    HEAP32[(5516)>>2] = $591;
    HEAP32[(5512)>>2] = -1;
    HEAP32[(5532)>>2] = (5520);
    HEAP32[(5528)>>2] = (5520);
    HEAP32[(5540)>>2] = (5528);
    HEAP32[(5536)>>2] = (5528);
    HEAP32[(5548)>>2] = (5536);
    HEAP32[(5544)>>2] = (5536);
    HEAP32[(5556)>>2] = (5544);
    HEAP32[(5552)>>2] = (5544);
    HEAP32[(5564)>>2] = (5552);
    HEAP32[(5560)>>2] = (5552);
    HEAP32[(5572)>>2] = (5560);
    HEAP32[(5568)>>2] = (5560);
    HEAP32[(5580)>>2] = (5568);
    HEAP32[(5576)>>2] = (5568);
    HEAP32[(5588)>>2] = (5576);
    HEAP32[(5584)>>2] = (5576);
    HEAP32[(5596)>>2] = (5584);
    HEAP32[(5592)>>2] = (5584);
    HEAP32[(5604)>>2] = (5592);
    HEAP32[(5600)>>2] = (5592);
    HEAP32[(5612)>>2] = (5600);
    HEAP32[(5608)>>2] = (5600);
    HEAP32[(5620)>>2] = (5608);
    HEAP32[(5616)>>2] = (5608);
    HEAP32[(5628)>>2] = (5616);
    HEAP32[(5624)>>2] = (5616);
    HEAP32[(5636)>>2] = (5624);
    HEAP32[(5632)>>2] = (5624);
    HEAP32[(5644)>>2] = (5632);
    HEAP32[(5640)>>2] = (5632);
    HEAP32[(5652)>>2] = (5640);
    HEAP32[(5648)>>2] = (5640);
    HEAP32[(5660)>>2] = (5648);
    HEAP32[(5656)>>2] = (5648);
    HEAP32[(5668)>>2] = (5656);
    HEAP32[(5664)>>2] = (5656);
    HEAP32[(5676)>>2] = (5664);
    HEAP32[(5672)>>2] = (5664);
    HEAP32[(5684)>>2] = (5672);
    HEAP32[(5680)>>2] = (5672);
    HEAP32[(5692)>>2] = (5680);
    HEAP32[(5688)>>2] = (5680);
    HEAP32[(5700)>>2] = (5688);
    HEAP32[(5696)>>2] = (5688);
    HEAP32[(5708)>>2] = (5696);
    HEAP32[(5704)>>2] = (5696);
    HEAP32[(5716)>>2] = (5704);
    HEAP32[(5712)>>2] = (5704);
    HEAP32[(5724)>>2] = (5712);
    HEAP32[(5720)>>2] = (5712);
    HEAP32[(5732)>>2] = (5720);
    HEAP32[(5728)>>2] = (5720);
    HEAP32[(5740)>>2] = (5728);
    HEAP32[(5736)>>2] = (5728);
    HEAP32[(5748)>>2] = (5736);
    HEAP32[(5744)>>2] = (5736);
    HEAP32[(5756)>>2] = (5744);
    HEAP32[(5752)>>2] = (5744);
    HEAP32[(5764)>>2] = (5752);
    HEAP32[(5760)>>2] = (5752);
    HEAP32[(5772)>>2] = (5760);
    HEAP32[(5768)>>2] = (5760);
    HEAP32[(5780)>>2] = (5768);
    HEAP32[(5776)>>2] = (5768);
    $592 = (($$723947$i) + -40)|0;
    $593 = ((($$748$i)) + 8|0);
    $594 = $593;
    $595 = $594 & 7;
    $596 = ($595|0)==(0);
    $597 = (0 - ($594))|0;
    $598 = $597 & 7;
    $599 = $596 ? 0 : $598;
    $600 = (($$748$i) + ($599)|0);
    $601 = (($592) - ($599))|0;
    HEAP32[(5504)>>2] = $600;
    HEAP32[(5492)>>2] = $601;
    $602 = $601 | 1;
    $603 = ((($600)) + 4|0);
    HEAP32[$603>>2] = $602;
    $604 = (($$748$i) + ($592)|0);
    $605 = ((($604)) + 4|0);
    HEAP32[$605>>2] = 40;
    $606 = HEAP32[(5968)>>2]|0;
    HEAP32[(5508)>>2] = $606;
   } else {
    $$024367$i = (5928);
    while(1) {
     $607 = HEAP32[$$024367$i>>2]|0;
     $608 = ((($$024367$i)) + 4|0);
     $609 = HEAP32[$608>>2]|0;
     $610 = (($607) + ($609)|0);
     $611 = ($$748$i|0)==($610|0);
     if ($611) {
      label = 143;
      break;
     }
     $612 = ((($$024367$i)) + 8|0);
     $613 = HEAP32[$612>>2]|0;
     $614 = ($613|0)==(0|0);
     if ($614) {
      break;
     } else {
      $$024367$i = $613;
     }
    }
    if ((label|0) == 143) {
     $615 = ((($$024367$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($607>>>0)<=($586>>>0);
      $620 = ($$748$i>>>0)>($586>>>0);
      $or$cond50$i = $620 & $619;
      if ($or$cond50$i) {
       $621 = (($609) + ($$723947$i))|0;
       HEAP32[$608>>2] = $621;
       $622 = HEAP32[(5492)>>2]|0;
       $623 = (($622) + ($$723947$i))|0;
       $624 = ((($586)) + 8|0);
       $625 = $624;
       $626 = $625 & 7;
       $627 = ($626|0)==(0);
       $628 = (0 - ($625))|0;
       $629 = $628 & 7;
       $630 = $627 ? 0 : $629;
       $631 = (($586) + ($630)|0);
       $632 = (($623) - ($630))|0;
       HEAP32[(5504)>>2] = $631;
       HEAP32[(5492)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($631)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($586) + ($623)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(5968)>>2]|0;
       HEAP32[(5508)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(5496)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(5496)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124466$i = (5928);
    while(1) {
     $641 = HEAP32[$$124466$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 151;
      break;
     }
     $643 = ((($$124466$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      $$0$i$i$i = (5928);
      break;
     } else {
      $$124466$i = $644;
     }
    }
    if ((label|0) == 151) {
     $646 = ((($$124466$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124466$i>>2] = $$748$i;
      $650 = ((($$124466$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($586|0)==($668|0);
      do {
       if ($676) {
        $677 = HEAP32[(5492)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(5492)>>2] = $678;
        HEAP32[(5504)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(5500)>>2]|0;
        $682 = ($681|0)==($668|0);
        if ($682) {
         $683 = HEAP32[(5488)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(5488)>>2] = $684;
         HEAP32[(5500)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L234: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[1370]|0;
            $703 = $702 & $701;
            HEAP32[1370] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1264$i$i = $719;$$1266$i$i = $715;
              }
             } else {
              $$1264$i$i = $717;$$1266$i$i = $716;
             }
             while(1) {
              $721 = ((($$1264$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if (!($723)) {
               $$1264$i$i = $722;$$1266$i$i = $721;
               continue;
              }
              $724 = ((($$1264$i$i)) + 16|0);
              $725 = HEAP32[$724>>2]|0;
              $726 = ($725|0)==(0|0);
              if ($726) {
               break;
              } else {
               $$1264$i$i = $725;$$1266$i$i = $724;
              }
             }
             HEAP32[$$1266$i$i>>2] = 0;
             $$3$i$i = $$1264$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (5784 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($731|0)==($668|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(5484)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(5484)>>2] = $736;
             break L234;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $739 = ($738|0)!=($668|0);
             $$sink1$i$i = $739&1;
             $740 = (((($707)) + 16|0) + ($$sink1$i$i<<2)|0);
             HEAP32[$740>>2] = $$3$i$i;
             $741 = ($$3$i$i|0)==(0|0);
             if ($741) {
              break L234;
             }
            }
           } while(0);
           $742 = ((($$3$i$i)) + 24|0);
           HEAP32[$742>>2] = $707;
           $743 = ((($668)) + 16|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = ($744|0)==(0|0);
           if (!($745)) {
            $746 = ((($$3$i$i)) + 16|0);
            HEAP32[$746>>2] = $744;
            $747 = ((($744)) + 24|0);
            HEAP32[$747>>2] = $$3$i$i;
           }
           $748 = ((($743)) + 4|0);
           $749 = HEAP32[$748>>2]|0;
           $750 = ($749|0)==(0|0);
           if ($750) {
            break;
           }
           $751 = ((($$3$i$i)) + 20|0);
           HEAP32[$751>>2] = $749;
           $752 = ((($749)) + 24|0);
           HEAP32[$752>>2] = $$3$i$i;
          }
         } while(0);
         $753 = (($668) + ($692)|0);
         $754 = (($692) + ($673))|0;
         $$0$i$i = $753;$$0260$i$i = $754;
        } else {
         $$0$i$i = $668;$$0260$i$i = $673;
        }
        $755 = ((($$0$i$i)) + 4|0);
        $756 = HEAP32[$755>>2]|0;
        $757 = $756 & -2;
        HEAP32[$755>>2] = $757;
        $758 = $$0260$i$i | 1;
        $759 = ((($672)) + 4|0);
        HEAP32[$759>>2] = $758;
        $760 = (($672) + ($$0260$i$i)|0);
        HEAP32[$760>>2] = $$0260$i$i;
        $761 = $$0260$i$i >>> 3;
        $762 = ($$0260$i$i>>>0)<(256);
        if ($762) {
         $763 = $761 << 1;
         $764 = (5520 + ($763<<2)|0);
         $765 = HEAP32[1370]|0;
         $766 = 1 << $761;
         $767 = $765 & $766;
         $768 = ($767|0)==(0);
         if ($768) {
          $769 = $765 | $766;
          HEAP32[1370] = $769;
          $$pre$i17$i = ((($764)) + 8|0);
          $$0268$i$i = $764;$$pre$phi$i18$iZ2D = $$pre$i17$i;
         } else {
          $770 = ((($764)) + 8|0);
          $771 = HEAP32[$770>>2]|0;
          $$0268$i$i = $771;$$pre$phi$i18$iZ2D = $770;
         }
         HEAP32[$$pre$phi$i18$iZ2D>>2] = $672;
         $772 = ((($$0268$i$i)) + 12|0);
         HEAP32[$772>>2] = $672;
         $773 = ((($672)) + 8|0);
         HEAP32[$773>>2] = $$0268$i$i;
         $774 = ((($672)) + 12|0);
         HEAP32[$774>>2] = $764;
         break;
        }
        $775 = $$0260$i$i >>> 8;
        $776 = ($775|0)==(0);
        do {
         if ($776) {
          $$0269$i$i = 0;
         } else {
          $777 = ($$0260$i$i>>>0)>(16777215);
          if ($777) {
           $$0269$i$i = 31;
           break;
          }
          $778 = (($775) + 1048320)|0;
          $779 = $778 >>> 16;
          $780 = $779 & 8;
          $781 = $775 << $780;
          $782 = (($781) + 520192)|0;
          $783 = $782 >>> 16;
          $784 = $783 & 4;
          $785 = $784 | $780;
          $786 = $781 << $784;
          $787 = (($786) + 245760)|0;
          $788 = $787 >>> 16;
          $789 = $788 & 2;
          $790 = $785 | $789;
          $791 = (14 - ($790))|0;
          $792 = $786 << $789;
          $793 = $792 >>> 15;
          $794 = (($791) + ($793))|0;
          $795 = $794 << 1;
          $796 = (($794) + 7)|0;
          $797 = $$0260$i$i >>> $796;
          $798 = $797 & 1;
          $799 = $798 | $795;
          $$0269$i$i = $799;
         }
        } while(0);
        $800 = (5784 + ($$0269$i$i<<2)|0);
        $801 = ((($672)) + 28|0);
        HEAP32[$801>>2] = $$0269$i$i;
        $802 = ((($672)) + 16|0);
        $803 = ((($802)) + 4|0);
        HEAP32[$803>>2] = 0;
        HEAP32[$802>>2] = 0;
        $804 = HEAP32[(5484)>>2]|0;
        $805 = 1 << $$0269$i$i;
        $806 = $804 & $805;
        $807 = ($806|0)==(0);
        if ($807) {
         $808 = $804 | $805;
         HEAP32[(5484)>>2] = $808;
         HEAP32[$800>>2] = $672;
         $809 = ((($672)) + 24|0);
         HEAP32[$809>>2] = $800;
         $810 = ((($672)) + 12|0);
         HEAP32[$810>>2] = $672;
         $811 = ((($672)) + 8|0);
         HEAP32[$811>>2] = $672;
         break;
        }
        $812 = HEAP32[$800>>2]|0;
        $813 = ($$0269$i$i|0)==(31);
        $814 = $$0269$i$i >>> 1;
        $815 = (25 - ($814))|0;
        $816 = $813 ? 0 : $815;
        $817 = $$0260$i$i << $816;
        $$0261$i$i = $817;$$0262$i$i = $812;
        while(1) {
         $818 = ((($$0262$i$i)) + 4|0);
         $819 = HEAP32[$818>>2]|0;
         $820 = $819 & -8;
         $821 = ($820|0)==($$0260$i$i|0);
         if ($821) {
          label = 192;
          break;
         }
         $822 = $$0261$i$i >>> 31;
         $823 = (((($$0262$i$i)) + 16|0) + ($822<<2)|0);
         $824 = $$0261$i$i << 1;
         $825 = HEAP32[$823>>2]|0;
         $826 = ($825|0)==(0|0);
         if ($826) {
          label = 191;
          break;
         } else {
          $$0261$i$i = $824;$$0262$i$i = $825;
         }
        }
        if ((label|0) == 191) {
         HEAP32[$823>>2] = $672;
         $827 = ((($672)) + 24|0);
         HEAP32[$827>>2] = $$0262$i$i;
         $828 = ((($672)) + 12|0);
         HEAP32[$828>>2] = $672;
         $829 = ((($672)) + 8|0);
         HEAP32[$829>>2] = $672;
         break;
        }
        else if ((label|0) == 192) {
         $830 = ((($$0262$i$i)) + 8|0);
         $831 = HEAP32[$830>>2]|0;
         $832 = ((($831)) + 12|0);
         HEAP32[$832>>2] = $672;
         HEAP32[$830>>2] = $672;
         $833 = ((($672)) + 8|0);
         HEAP32[$833>>2] = $831;
         $834 = ((($672)) + 12|0);
         HEAP32[$834>>2] = $$0262$i$i;
         $835 = ((($672)) + 24|0);
         HEAP32[$835>>2] = 0;
         break;
        }
       }
      } while(0);
      $960 = ((($660)) + 8|0);
      $$0 = $960;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0$i$i$i = (5928);
     }
    }
    while(1) {
     $836 = HEAP32[$$0$i$i$i>>2]|0;
     $837 = ($836>>>0)>($586>>>0);
     if (!($837)) {
      $838 = ((($$0$i$i$i)) + 4|0);
      $839 = HEAP32[$838>>2]|0;
      $840 = (($836) + ($839)|0);
      $841 = ($840>>>0)>($586>>>0);
      if ($841) {
       break;
      }
     }
     $842 = ((($$0$i$i$i)) + 8|0);
     $843 = HEAP32[$842>>2]|0;
     $$0$i$i$i = $843;
    }
    $844 = ((($840)) + -47|0);
    $845 = ((($844)) + 8|0);
    $846 = $845;
    $847 = $846 & 7;
    $848 = ($847|0)==(0);
    $849 = (0 - ($846))|0;
    $850 = $849 & 7;
    $851 = $848 ? 0 : $850;
    $852 = (($844) + ($851)|0);
    $853 = ((($586)) + 16|0);
    $854 = ($852>>>0)<($853>>>0);
    $855 = $854 ? $586 : $852;
    $856 = ((($855)) + 8|0);
    $857 = ((($855)) + 24|0);
    $858 = (($$723947$i) + -40)|0;
    $859 = ((($$748$i)) + 8|0);
    $860 = $859;
    $861 = $860 & 7;
    $862 = ($861|0)==(0);
    $863 = (0 - ($860))|0;
    $864 = $863 & 7;
    $865 = $862 ? 0 : $864;
    $866 = (($$748$i) + ($865)|0);
    $867 = (($858) - ($865))|0;
    HEAP32[(5504)>>2] = $866;
    HEAP32[(5492)>>2] = $867;
    $868 = $867 | 1;
    $869 = ((($866)) + 4|0);
    HEAP32[$869>>2] = $868;
    $870 = (($$748$i) + ($858)|0);
    $871 = ((($870)) + 4|0);
    HEAP32[$871>>2] = 40;
    $872 = HEAP32[(5968)>>2]|0;
    HEAP32[(5508)>>2] = $872;
    $873 = ((($855)) + 4|0);
    HEAP32[$873>>2] = 27;
    ;HEAP32[$856>>2]=HEAP32[(5928)>>2]|0;HEAP32[$856+4>>2]=HEAP32[(5928)+4>>2]|0;HEAP32[$856+8>>2]=HEAP32[(5928)+8>>2]|0;HEAP32[$856+12>>2]=HEAP32[(5928)+12>>2]|0;
    HEAP32[(5928)>>2] = $$748$i;
    HEAP32[(5932)>>2] = $$723947$i;
    HEAP32[(5940)>>2] = 0;
    HEAP32[(5936)>>2] = $856;
    $875 = $857;
    while(1) {
     $874 = ((($875)) + 4|0);
     HEAP32[$874>>2] = 7;
     $876 = ((($875)) + 8|0);
     $877 = ($876>>>0)<($840>>>0);
     if ($877) {
      $875 = $874;
     } else {
      break;
     }
    }
    $878 = ($855|0)==($586|0);
    if (!($878)) {
     $879 = $855;
     $880 = $586;
     $881 = (($879) - ($880))|0;
     $882 = HEAP32[$873>>2]|0;
     $883 = $882 & -2;
     HEAP32[$873>>2] = $883;
     $884 = $881 | 1;
     $885 = ((($586)) + 4|0);
     HEAP32[$885>>2] = $884;
     HEAP32[$855>>2] = $881;
     $886 = $881 >>> 3;
     $887 = ($881>>>0)<(256);
     if ($887) {
      $888 = $886 << 1;
      $889 = (5520 + ($888<<2)|0);
      $890 = HEAP32[1370]|0;
      $891 = 1 << $886;
      $892 = $890 & $891;
      $893 = ($892|0)==(0);
      if ($893) {
       $894 = $890 | $891;
       HEAP32[1370] = $894;
       $$pre$i$i = ((($889)) + 8|0);
       $$0206$i$i = $889;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $895 = ((($889)) + 8|0);
       $896 = HEAP32[$895>>2]|0;
       $$0206$i$i = $896;$$pre$phi$i$iZ2D = $895;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $586;
      $897 = ((($$0206$i$i)) + 12|0);
      HEAP32[$897>>2] = $586;
      $898 = ((($586)) + 8|0);
      HEAP32[$898>>2] = $$0206$i$i;
      $899 = ((($586)) + 12|0);
      HEAP32[$899>>2] = $889;
      break;
     }
     $900 = $881 >>> 8;
     $901 = ($900|0)==(0);
     if ($901) {
      $$0207$i$i = 0;
     } else {
      $902 = ($881>>>0)>(16777215);
      if ($902) {
       $$0207$i$i = 31;
      } else {
       $903 = (($900) + 1048320)|0;
       $904 = $903 >>> 16;
       $905 = $904 & 8;
       $906 = $900 << $905;
       $907 = (($906) + 520192)|0;
       $908 = $907 >>> 16;
       $909 = $908 & 4;
       $910 = $909 | $905;
       $911 = $906 << $909;
       $912 = (($911) + 245760)|0;
       $913 = $912 >>> 16;
       $914 = $913 & 2;
       $915 = $910 | $914;
       $916 = (14 - ($915))|0;
       $917 = $911 << $914;
       $918 = $917 >>> 15;
       $919 = (($916) + ($918))|0;
       $920 = $919 << 1;
       $921 = (($919) + 7)|0;
       $922 = $881 >>> $921;
       $923 = $922 & 1;
       $924 = $923 | $920;
       $$0207$i$i = $924;
      }
     }
     $925 = (5784 + ($$0207$i$i<<2)|0);
     $926 = ((($586)) + 28|0);
     HEAP32[$926>>2] = $$0207$i$i;
     $927 = ((($586)) + 20|0);
     HEAP32[$927>>2] = 0;
     HEAP32[$853>>2] = 0;
     $928 = HEAP32[(5484)>>2]|0;
     $929 = 1 << $$0207$i$i;
     $930 = $928 & $929;
     $931 = ($930|0)==(0);
     if ($931) {
      $932 = $928 | $929;
      HEAP32[(5484)>>2] = $932;
      HEAP32[$925>>2] = $586;
      $933 = ((($586)) + 24|0);
      HEAP32[$933>>2] = $925;
      $934 = ((($586)) + 12|0);
      HEAP32[$934>>2] = $586;
      $935 = ((($586)) + 8|0);
      HEAP32[$935>>2] = $586;
      break;
     }
     $936 = HEAP32[$925>>2]|0;
     $937 = ($$0207$i$i|0)==(31);
     $938 = $$0207$i$i >>> 1;
     $939 = (25 - ($938))|0;
     $940 = $937 ? 0 : $939;
     $941 = $881 << $940;
     $$0201$i$i = $941;$$0202$i$i = $936;
     while(1) {
      $942 = ((($$0202$i$i)) + 4|0);
      $943 = HEAP32[$942>>2]|0;
      $944 = $943 & -8;
      $945 = ($944|0)==($881|0);
      if ($945) {
       label = 213;
       break;
      }
      $946 = $$0201$i$i >>> 31;
      $947 = (((($$0202$i$i)) + 16|0) + ($946<<2)|0);
      $948 = $$0201$i$i << 1;
      $949 = HEAP32[$947>>2]|0;
      $950 = ($949|0)==(0|0);
      if ($950) {
       label = 212;
       break;
      } else {
       $$0201$i$i = $948;$$0202$i$i = $949;
      }
     }
     if ((label|0) == 212) {
      HEAP32[$947>>2] = $586;
      $951 = ((($586)) + 24|0);
      HEAP32[$951>>2] = $$0202$i$i;
      $952 = ((($586)) + 12|0);
      HEAP32[$952>>2] = $586;
      $953 = ((($586)) + 8|0);
      HEAP32[$953>>2] = $586;
      break;
     }
     else if ((label|0) == 213) {
      $954 = ((($$0202$i$i)) + 8|0);
      $955 = HEAP32[$954>>2]|0;
      $956 = ((($955)) + 12|0);
      HEAP32[$956>>2] = $586;
      HEAP32[$954>>2] = $586;
      $957 = ((($586)) + 8|0);
      HEAP32[$957>>2] = $955;
      $958 = ((($586)) + 12|0);
      HEAP32[$958>>2] = $$0202$i$i;
      $959 = ((($586)) + 24|0);
      HEAP32[$959>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $961 = HEAP32[(5492)>>2]|0;
  $962 = ($961>>>0)>($$0192>>>0);
  if ($962) {
   $963 = (($961) - ($$0192))|0;
   HEAP32[(5492)>>2] = $963;
   $964 = HEAP32[(5504)>>2]|0;
   $965 = (($964) + ($$0192)|0);
   HEAP32[(5504)>>2] = $965;
   $966 = $963 | 1;
   $967 = ((($965)) + 4|0);
   HEAP32[$967>>2] = $966;
   $968 = $$0192 | 3;
   $969 = ((($964)) + 4|0);
   HEAP32[$969>>2] = $968;
   $970 = ((($964)) + 8|0);
   $$0 = $970;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $971 = (___errno_location()|0);
 HEAP32[$971>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0195$i = 0, $$0195$in$i = 0, $$0348 = 0, $$0349 = 0, $$0361 = 0, $$0368 = 0, $$1 = 0, $$1347 = 0, $$1352 = 0, $$1355 = 0, $$1363 = 0, $$1367 = 0, $$2 = 0, $$3 = 0, $$3365 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond373 = 0;
 var $cond374 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(5496)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(5500)>>2]|0;
   $18 = ($17|0)==($14|0);
   if ($18) {
    $79 = ((($7)) + 4|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $80 & 3;
    $82 = ($81|0)==(3);
    if (!($82)) {
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    }
    HEAP32[(5488)>>2] = $15;
    $83 = $80 & -2;
    HEAP32[$79>>2] = $83;
    $84 = $15 | 1;
    $85 = ((($14)) + 4|0);
    HEAP32[$85>>2] = $84;
    $86 = (($14) + ($15)|0);
    HEAP32[$86>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[1370]|0;
     $29 = $28 & $27;
     HEAP32[1370] = $29;
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1352 = $45;$$1355 = $41;
      }
     } else {
      $$1352 = $43;$$1355 = $42;
     }
     while(1) {
      $47 = ((($$1352)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $$1352 = $48;$$1355 = $47;
       continue;
      }
      $50 = ((($$1352)) + 16|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)==(0|0);
      if ($52) {
       break;
      } else {
       $$1352 = $51;$$1355 = $50;
      }
     }
     HEAP32[$$1355>>2] = 0;
     $$3 = $$1352;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1347 = $15;$87 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (5784 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)==($14|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond373 = ($$3|0)==(0|0);
     if ($cond373) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(5484)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(5484)>>2] = $62;
      $$1 = $14;$$1347 = $15;$87 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($64|0)!=($14|0);
     $$sink3 = $65&1;
     $66 = (((($33)) + 16|0) + ($$sink3<<2)|0);
     HEAP32[$66>>2] = $$3;
     $67 = ($$3|0)==(0|0);
     if ($67) {
      $$1 = $14;$$1347 = $15;$87 = $14;
      break;
     }
    }
    $68 = ((($$3)) + 24|0);
    HEAP32[$68>>2] = $33;
    $69 = ((($14)) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if (!($71)) {
     $72 = ((($$3)) + 16|0);
     HEAP32[$72>>2] = $70;
     $73 = ((($70)) + 24|0);
     HEAP32[$73>>2] = $$3;
    }
    $74 = ((($69)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)==(0|0);
    if ($76) {
     $$1 = $14;$$1347 = $15;$87 = $14;
    } else {
     $77 = ((($$3)) + 20|0);
     HEAP32[$77>>2] = $75;
     $78 = ((($75)) + 24|0);
     HEAP32[$78>>2] = $$3;
     $$1 = $14;$$1347 = $15;$87 = $14;
    }
   }
  } else {
   $$1 = $2;$$1347 = $6;$87 = $2;
  }
 } while(0);
 $88 = ($87>>>0)<($7>>>0);
 if (!($88)) {
  return;
 }
 $89 = ((($7)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90 & 1;
 $92 = ($91|0)==(0);
 if ($92) {
  return;
 }
 $93 = $90 & 2;
 $94 = ($93|0)==(0);
 if ($94) {
  $95 = HEAP32[(5504)>>2]|0;
  $96 = ($95|0)==($7|0);
  if ($96) {
   $97 = HEAP32[(5492)>>2]|0;
   $98 = (($97) + ($$1347))|0;
   HEAP32[(5492)>>2] = $98;
   HEAP32[(5504)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = HEAP32[(5500)>>2]|0;
   $102 = ($$1|0)==($101|0);
   if (!($102)) {
    return;
   }
   HEAP32[(5500)>>2] = 0;
   HEAP32[(5488)>>2] = 0;
   return;
  }
  $103 = HEAP32[(5500)>>2]|0;
  $104 = ($103|0)==($7|0);
  if ($104) {
   $105 = HEAP32[(5488)>>2]|0;
   $106 = (($105) + ($$1347))|0;
   HEAP32[(5488)>>2] = $106;
   HEAP32[(5500)>>2] = $87;
   $107 = $106 | 1;
   $108 = ((($$1)) + 4|0);
   HEAP32[$108>>2] = $107;
   $109 = (($87) + ($106)|0);
   HEAP32[$109>>2] = $106;
   return;
  }
  $110 = $90 & -8;
  $111 = (($110) + ($$1347))|0;
  $112 = $90 >>> 3;
  $113 = ($90>>>0)<(256);
  do {
   if ($113) {
    $114 = ((($7)) + 8|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ((($7)) + 12|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($117|0)==($115|0);
    if ($118) {
     $119 = 1 << $112;
     $120 = $119 ^ -1;
     $121 = HEAP32[1370]|0;
     $122 = $121 & $120;
     HEAP32[1370] = $122;
     break;
    } else {
     $123 = ((($115)) + 12|0);
     HEAP32[$123>>2] = $117;
     $124 = ((($117)) + 8|0);
     HEAP32[$124>>2] = $115;
     break;
    }
   } else {
    $125 = ((($7)) + 24|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((($7)) + 12|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($128|0)==($7|0);
    do {
     if ($129) {
      $134 = ((($7)) + 16|0);
      $135 = ((($134)) + 4|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ($136|0)==(0|0);
      if ($137) {
       $138 = HEAP32[$134>>2]|0;
       $139 = ($138|0)==(0|0);
       if ($139) {
        $$3365 = 0;
        break;
       } else {
        $$1363 = $138;$$1367 = $134;
       }
      } else {
       $$1363 = $136;$$1367 = $135;
      }
      while(1) {
       $140 = ((($$1363)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if (!($142)) {
        $$1363 = $141;$$1367 = $140;
        continue;
       }
       $143 = ((($$1363)) + 16|0);
       $144 = HEAP32[$143>>2]|0;
       $145 = ($144|0)==(0|0);
       if ($145) {
        break;
       } else {
        $$1363 = $144;$$1367 = $143;
       }
      }
      HEAP32[$$1367>>2] = 0;
      $$3365 = $$1363;
     } else {
      $130 = ((($7)) + 8|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = ((($131)) + 12|0);
      HEAP32[$132>>2] = $128;
      $133 = ((($128)) + 8|0);
      HEAP32[$133>>2] = $131;
      $$3365 = $128;
     }
    } while(0);
    $146 = ($126|0)==(0|0);
    if (!($146)) {
     $147 = ((($7)) + 28|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (5784 + ($148<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($7|0);
     if ($151) {
      HEAP32[$149>>2] = $$3365;
      $cond374 = ($$3365|0)==(0|0);
      if ($cond374) {
       $152 = 1 << $148;
       $153 = $152 ^ -1;
       $154 = HEAP32[(5484)>>2]|0;
       $155 = $154 & $153;
       HEAP32[(5484)>>2] = $155;
       break;
      }
     } else {
      $156 = ((($126)) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($157|0)!=($7|0);
      $$sink5 = $158&1;
      $159 = (((($126)) + 16|0) + ($$sink5<<2)|0);
      HEAP32[$159>>2] = $$3365;
      $160 = ($$3365|0)==(0|0);
      if ($160) {
       break;
      }
     }
     $161 = ((($$3365)) + 24|0);
     HEAP32[$161>>2] = $126;
     $162 = ((($7)) + 16|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($163|0)==(0|0);
     if (!($164)) {
      $165 = ((($$3365)) + 16|0);
      HEAP32[$165>>2] = $163;
      $166 = ((($163)) + 24|0);
      HEAP32[$166>>2] = $$3365;
     }
     $167 = ((($162)) + 4|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = ($168|0)==(0|0);
     if (!($169)) {
      $170 = ((($$3365)) + 20|0);
      HEAP32[$170>>2] = $168;
      $171 = ((($168)) + 24|0);
      HEAP32[$171>>2] = $$3365;
     }
    }
   }
  } while(0);
  $172 = $111 | 1;
  $173 = ((($$1)) + 4|0);
  HEAP32[$173>>2] = $172;
  $174 = (($87) + ($111)|0);
  HEAP32[$174>>2] = $111;
  $175 = HEAP32[(5500)>>2]|0;
  $176 = ($$1|0)==($175|0);
  if ($176) {
   HEAP32[(5488)>>2] = $111;
   return;
  } else {
   $$2 = $111;
  }
 } else {
  $177 = $90 & -2;
  HEAP32[$89>>2] = $177;
  $178 = $$1347 | 1;
  $179 = ((($$1)) + 4|0);
  HEAP32[$179>>2] = $178;
  $180 = (($87) + ($$1347)|0);
  HEAP32[$180>>2] = $$1347;
  $$2 = $$1347;
 }
 $181 = $$2 >>> 3;
 $182 = ($$2>>>0)<(256);
 if ($182) {
  $183 = $181 << 1;
  $184 = (5520 + ($183<<2)|0);
  $185 = HEAP32[1370]|0;
  $186 = 1 << $181;
  $187 = $185 & $186;
  $188 = ($187|0)==(0);
  if ($188) {
   $189 = $185 | $186;
   HEAP32[1370] = $189;
   $$pre = ((($184)) + 8|0);
   $$0368 = $184;$$pre$phiZ2D = $$pre;
  } else {
   $190 = ((($184)) + 8|0);
   $191 = HEAP32[$190>>2]|0;
   $$0368 = $191;$$pre$phiZ2D = $190;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $192 = ((($$0368)) + 12|0);
  HEAP32[$192>>2] = $$1;
  $193 = ((($$1)) + 8|0);
  HEAP32[$193>>2] = $$0368;
  $194 = ((($$1)) + 12|0);
  HEAP32[$194>>2] = $184;
  return;
 }
 $195 = $$2 >>> 8;
 $196 = ($195|0)==(0);
 if ($196) {
  $$0361 = 0;
 } else {
  $197 = ($$2>>>0)>(16777215);
  if ($197) {
   $$0361 = 31;
  } else {
   $198 = (($195) + 1048320)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 8;
   $201 = $195 << $200;
   $202 = (($201) + 520192)|0;
   $203 = $202 >>> 16;
   $204 = $203 & 4;
   $205 = $204 | $200;
   $206 = $201 << $204;
   $207 = (($206) + 245760)|0;
   $208 = $207 >>> 16;
   $209 = $208 & 2;
   $210 = $205 | $209;
   $211 = (14 - ($210))|0;
   $212 = $206 << $209;
   $213 = $212 >>> 15;
   $214 = (($211) + ($213))|0;
   $215 = $214 << 1;
   $216 = (($214) + 7)|0;
   $217 = $$2 >>> $216;
   $218 = $217 & 1;
   $219 = $218 | $215;
   $$0361 = $219;
  }
 }
 $220 = (5784 + ($$0361<<2)|0);
 $221 = ((($$1)) + 28|0);
 HEAP32[$221>>2] = $$0361;
 $222 = ((($$1)) + 16|0);
 $223 = ((($$1)) + 20|0);
 HEAP32[$223>>2] = 0;
 HEAP32[$222>>2] = 0;
 $224 = HEAP32[(5484)>>2]|0;
 $225 = 1 << $$0361;
 $226 = $224 & $225;
 $227 = ($226|0)==(0);
 do {
  if ($227) {
   $228 = $224 | $225;
   HEAP32[(5484)>>2] = $228;
   HEAP32[$220>>2] = $$1;
   $229 = ((($$1)) + 24|0);
   HEAP32[$229>>2] = $220;
   $230 = ((($$1)) + 12|0);
   HEAP32[$230>>2] = $$1;
   $231 = ((($$1)) + 8|0);
   HEAP32[$231>>2] = $$1;
  } else {
   $232 = HEAP32[$220>>2]|0;
   $233 = ($$0361|0)==(31);
   $234 = $$0361 >>> 1;
   $235 = (25 - ($234))|0;
   $236 = $233 ? 0 : $235;
   $237 = $$2 << $236;
   $$0348 = $237;$$0349 = $232;
   while(1) {
    $238 = ((($$0349)) + 4|0);
    $239 = HEAP32[$238>>2]|0;
    $240 = $239 & -8;
    $241 = ($240|0)==($$2|0);
    if ($241) {
     label = 73;
     break;
    }
    $242 = $$0348 >>> 31;
    $243 = (((($$0349)) + 16|0) + ($242<<2)|0);
    $244 = $$0348 << 1;
    $245 = HEAP32[$243>>2]|0;
    $246 = ($245|0)==(0|0);
    if ($246) {
     label = 72;
     break;
    } else {
     $$0348 = $244;$$0349 = $245;
    }
   }
   if ((label|0) == 72) {
    HEAP32[$243>>2] = $$1;
    $247 = ((($$1)) + 24|0);
    HEAP32[$247>>2] = $$0349;
    $248 = ((($$1)) + 12|0);
    HEAP32[$248>>2] = $$1;
    $249 = ((($$1)) + 8|0);
    HEAP32[$249>>2] = $$1;
    break;
   }
   else if ((label|0) == 73) {
    $250 = ((($$0349)) + 8|0);
    $251 = HEAP32[$250>>2]|0;
    $252 = ((($251)) + 12|0);
    HEAP32[$252>>2] = $$1;
    HEAP32[$250>>2] = $$1;
    $253 = ((($$1)) + 8|0);
    HEAP32[$253>>2] = $251;
    $254 = ((($$1)) + 12|0);
    HEAP32[$254>>2] = $$0349;
    $255 = ((($$1)) + 24|0);
    HEAP32[$255>>2] = 0;
    break;
   }
  }
 } while(0);
 $256 = HEAP32[(5512)>>2]|0;
 $257 = (($256) + -1)|0;
 HEAP32[(5512)>>2] = $257;
 $258 = ($257|0)==(0);
 if ($258) {
  $$0195$in$i = (5936);
 } else {
  return;
 }
 while(1) {
  $$0195$i = HEAP32[$$0195$in$i>>2]|0;
  $259 = ($$0195$i|0)==(0|0);
  $260 = ((($$0195$i)) + 8|0);
  if ($259) {
   break;
  } else {
   $$0195$in$i = $260;
  }
 }
 HEAP32[(5512)>>2] = -1;
 return;
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 _memcpy(($14|0),($0|0),($24|0))|0;
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1246 = 0, $$1249 = 0, $$2 = 0, $$3 = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = $3 & 3;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ($1>>>0)<(256);
  if ($8) {
   $$2 = 0;
   return ($$2|0);
  }
  $9 = (($1) + 4)|0;
  $10 = ($4>>>0)<($9>>>0);
  if (!($10)) {
   $11 = (($4) - ($1))|0;
   $12 = HEAP32[(5960)>>2]|0;
   $13 = $12 << 1;
   $14 = ($11>>>0)>($13>>>0);
   if (!($14)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $15 = ($4>>>0)<($1>>>0);
 if (!($15)) {
  $16 = (($4) - ($1))|0;
  $17 = ($16>>>0)>(15);
  if (!($17)) {
   $$2 = $0;
   return ($$2|0);
  }
  $18 = (($0) + ($1)|0);
  $19 = $3 & 1;
  $20 = $19 | $1;
  $21 = $20 | 2;
  HEAP32[$2>>2] = $21;
  $22 = ((($18)) + 4|0);
  $23 = $16 | 3;
  HEAP32[$22>>2] = $23;
  $24 = ((($5)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 | 1;
  HEAP32[$24>>2] = $26;
  _dispose_chunk($18,$16);
  $$2 = $0;
  return ($$2|0);
 }
 $27 = HEAP32[(5504)>>2]|0;
 $28 = ($27|0)==($5|0);
 if ($28) {
  $29 = HEAP32[(5492)>>2]|0;
  $30 = (($29) + ($4))|0;
  $31 = ($30>>>0)>($1>>>0);
  $32 = (($30) - ($1))|0;
  $33 = (($0) + ($1)|0);
  if (!($31)) {
   $$2 = 0;
   return ($$2|0);
  }
  $34 = $32 | 1;
  $35 = ((($33)) + 4|0);
  $36 = $3 & 1;
  $37 = $36 | $1;
  $38 = $37 | 2;
  HEAP32[$2>>2] = $38;
  HEAP32[$35>>2] = $34;
  HEAP32[(5504)>>2] = $33;
  HEAP32[(5492)>>2] = $32;
  $$2 = $0;
  return ($$2|0);
 }
 $39 = HEAP32[(5500)>>2]|0;
 $40 = ($39|0)==($5|0);
 if ($40) {
  $41 = HEAP32[(5488)>>2]|0;
  $42 = (($41) + ($4))|0;
  $43 = ($42>>>0)<($1>>>0);
  if ($43) {
   $$2 = 0;
   return ($$2|0);
  }
  $44 = (($42) - ($1))|0;
  $45 = ($44>>>0)>(15);
  if ($45) {
   $46 = (($0) + ($1)|0);
   $47 = (($0) + ($42)|0);
   $48 = $3 & 1;
   $49 = $48 | $1;
   $50 = $49 | 2;
   HEAP32[$2>>2] = $50;
   $51 = ((($46)) + 4|0);
   $52 = $44 | 1;
   HEAP32[$51>>2] = $52;
   HEAP32[$47>>2] = $44;
   $53 = ((($47)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 & -2;
   HEAP32[$53>>2] = $55;
   $storemerge = $46;$storemerge1 = $44;
  } else {
   $56 = $3 & 1;
   $57 = $56 | $42;
   $58 = $57 | 2;
   HEAP32[$2>>2] = $58;
   $59 = (($0) + ($42)|0);
   $60 = ((($59)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 | 1;
   HEAP32[$60>>2] = $62;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(5488)>>2] = $storemerge1;
  HEAP32[(5500)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $63 = ((($5)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $$2 = 0;
  return ($$2|0);
 }
 $67 = $64 & -8;
 $68 = (($67) + ($4))|0;
 $69 = ($68>>>0)<($1>>>0);
 if ($69) {
  $$2 = 0;
  return ($$2|0);
 }
 $70 = (($68) - ($1))|0;
 $71 = $64 >>> 3;
 $72 = ($64>>>0)<(256);
 do {
  if ($72) {
   $73 = ((($5)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($5)) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)==($74|0);
   if ($77) {
    $78 = 1 << $71;
    $79 = $78 ^ -1;
    $80 = HEAP32[1370]|0;
    $81 = $80 & $79;
    HEAP32[1370] = $81;
    break;
   } else {
    $82 = ((($74)) + 12|0);
    HEAP32[$82>>2] = $76;
    $83 = ((($76)) + 8|0);
    HEAP32[$83>>2] = $74;
    break;
   }
  } else {
   $84 = ((($5)) + 24|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($5)) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==($5|0);
   do {
    if ($88) {
     $93 = ((($5)) + 16|0);
     $94 = ((($93)) + 4|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)==(0|0);
     if ($96) {
      $97 = HEAP32[$93>>2]|0;
      $98 = ($97|0)==(0|0);
      if ($98) {
       $$3 = 0;
       break;
      } else {
       $$1246 = $97;$$1249 = $93;
      }
     } else {
      $$1246 = $95;$$1249 = $94;
     }
     while(1) {
      $99 = ((($$1246)) + 20|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($100|0)==(0|0);
      if (!($101)) {
       $$1246 = $100;$$1249 = $99;
       continue;
      }
      $102 = ((($$1246)) + 16|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = ($103|0)==(0|0);
      if ($104) {
       break;
      } else {
       $$1246 = $103;$$1249 = $102;
      }
     }
     HEAP32[$$1249>>2] = 0;
     $$3 = $$1246;
    } else {
     $89 = ((($5)) + 8|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ((($90)) + 12|0);
     HEAP32[$91>>2] = $87;
     $92 = ((($87)) + 8|0);
     HEAP32[$92>>2] = $90;
     $$3 = $87;
    }
   } while(0);
   $105 = ($85|0)==(0|0);
   if (!($105)) {
    $106 = ((($5)) + 28|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (5784 + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($109|0)==($5|0);
    if ($110) {
     HEAP32[$108>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $111 = 1 << $107;
      $112 = $111 ^ -1;
      $113 = HEAP32[(5484)>>2]|0;
      $114 = $113 & $112;
      HEAP32[(5484)>>2] = $114;
      break;
     }
    } else {
     $115 = ((($85)) + 16|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)!=($5|0);
     $$sink1 = $117&1;
     $118 = (((($85)) + 16|0) + ($$sink1<<2)|0);
     HEAP32[$118>>2] = $$3;
     $119 = ($$3|0)==(0|0);
     if ($119) {
      break;
     }
    }
    $120 = ((($$3)) + 24|0);
    HEAP32[$120>>2] = $85;
    $121 = ((($5)) + 16|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($122|0)==(0|0);
    if (!($123)) {
     $124 = ((($$3)) + 16|0);
     HEAP32[$124>>2] = $122;
     $125 = ((($122)) + 24|0);
     HEAP32[$125>>2] = $$3;
    }
    $126 = ((($121)) + 4|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = ($127|0)==(0|0);
    if (!($128)) {
     $129 = ((($$3)) + 20|0);
     HEAP32[$129>>2] = $127;
     $130 = ((($127)) + 24|0);
     HEAP32[$130>>2] = $$3;
    }
   }
  }
 } while(0);
 $131 = ($70>>>0)<(16);
 if ($131) {
  $132 = $3 & 1;
  $133 = $68 | $132;
  $134 = $133 | 2;
  HEAP32[$2>>2] = $134;
  $135 = (($0) + ($68)|0);
  $136 = ((($135)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $137 | 1;
  HEAP32[$136>>2] = $138;
  $$2 = $0;
  return ($$2|0);
 } else {
  $139 = (($0) + ($1)|0);
  $140 = $3 & 1;
  $141 = $140 | $1;
  $142 = $141 | 2;
  HEAP32[$2>>2] = $142;
  $143 = ((($139)) + 4|0);
  $144 = $70 | 3;
  HEAP32[$143>>2] = $144;
  $145 = (($0) + ($68)|0);
  $146 = ((($145)) + 4|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $147 | 1;
  HEAP32[$146>>2] = $148;
  _dispose_chunk($139,$70);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0366 = 0, $$0367 = 0, $$0378 = 0, $$0385 = 0, $$1 = 0, $$1365 = 0, $$1373 = 0, $$1376 = 0, $$1380 = 0, $$1384 = 0, $$2 = 0, $$3 = 0, $$3382 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink2 = 0, $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(5500)>>2]|0;
   $14 = ($13|0)==($11|0);
   if ($14) {
    $75 = ((($2)) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $76 & 3;
    $78 = ($77|0)==(3);
    if (!($78)) {
     $$1 = $11;$$1365 = $12;
     break;
    }
    HEAP32[(5488)>>2] = $12;
    $79 = $76 & -2;
    HEAP32[$75>>2] = $79;
    $80 = $12 | 1;
    $81 = ((($11)) + 4|0);
    HEAP32[$81>>2] = $80;
    HEAP32[$2>>2] = $12;
    return;
   }
   $15 = $7 >>> 3;
   $16 = ($7>>>0)<(256);
   if ($16) {
    $17 = ((($11)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($11)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($18|0);
    if ($21) {
     $22 = 1 << $15;
     $23 = $22 ^ -1;
     $24 = HEAP32[1370]|0;
     $25 = $24 & $23;
     HEAP32[1370] = $25;
     $$1 = $11;$$1365 = $12;
     break;
    } else {
     $26 = ((($18)) + 12|0);
     HEAP32[$26>>2] = $20;
     $27 = ((($20)) + 8|0);
     HEAP32[$27>>2] = $18;
     $$1 = $11;$$1365 = $12;
     break;
    }
   }
   $28 = ((($11)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($11)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==($11|0);
   do {
    if ($32) {
     $37 = ((($11)) + 16|0);
     $38 = ((($37)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0|0);
     if ($40) {
      $41 = HEAP32[$37>>2]|0;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$3 = 0;
       break;
      } else {
       $$1373 = $41;$$1376 = $37;
      }
     } else {
      $$1373 = $39;$$1376 = $38;
     }
     while(1) {
      $43 = ((($$1373)) + 20|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0|0);
      if (!($45)) {
       $$1373 = $44;$$1376 = $43;
       continue;
      }
      $46 = ((($$1373)) + 16|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)==(0|0);
      if ($48) {
       break;
      } else {
       $$1373 = $47;$$1376 = $46;
      }
     }
     HEAP32[$$1376>>2] = 0;
     $$3 = $$1373;
    } else {
     $33 = ((($11)) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($34)) + 12|0);
     HEAP32[$35>>2] = $31;
     $36 = ((($31)) + 8|0);
     HEAP32[$36>>2] = $34;
     $$3 = $31;
    }
   } while(0);
   $49 = ($29|0)==(0|0);
   if ($49) {
    $$1 = $11;$$1365 = $12;
   } else {
    $50 = ((($11)) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (5784 + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==($11|0);
    if ($54) {
     HEAP32[$52>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $55 = 1 << $51;
      $56 = $55 ^ -1;
      $57 = HEAP32[(5484)>>2]|0;
      $58 = $57 & $56;
      HEAP32[(5484)>>2] = $58;
      $$1 = $11;$$1365 = $12;
      break;
     }
    } else {
     $59 = ((($29)) + 16|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)!=($11|0);
     $$sink2 = $61&1;
     $62 = (((($29)) + 16|0) + ($$sink2<<2)|0);
     HEAP32[$62>>2] = $$3;
     $63 = ($$3|0)==(0|0);
     if ($63) {
      $$1 = $11;$$1365 = $12;
      break;
     }
    }
    $64 = ((($$3)) + 24|0);
    HEAP32[$64>>2] = $29;
    $65 = ((($11)) + 16|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)==(0|0);
    if (!($67)) {
     $68 = ((($$3)) + 16|0);
     HEAP32[$68>>2] = $66;
     $69 = ((($66)) + 24|0);
     HEAP32[$69>>2] = $$3;
    }
    $70 = ((($65)) + 4|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)==(0|0);
    if ($72) {
     $$1 = $11;$$1365 = $12;
    } else {
     $73 = ((($$3)) + 20|0);
     HEAP32[$73>>2] = $71;
     $74 = ((($71)) + 24|0);
     HEAP32[$74>>2] = $$3;
     $$1 = $11;$$1365 = $12;
    }
   }
  } else {
   $$1 = $0;$$1365 = $1;
  }
 } while(0);
 $82 = ((($2)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 & 2;
 $85 = ($84|0)==(0);
 if ($85) {
  $86 = HEAP32[(5504)>>2]|0;
  $87 = ($86|0)==($2|0);
  if ($87) {
   $88 = HEAP32[(5492)>>2]|0;
   $89 = (($88) + ($$1365))|0;
   HEAP32[(5492)>>2] = $89;
   HEAP32[(5504)>>2] = $$1;
   $90 = $89 | 1;
   $91 = ((($$1)) + 4|0);
   HEAP32[$91>>2] = $90;
   $92 = HEAP32[(5500)>>2]|0;
   $93 = ($$1|0)==($92|0);
   if (!($93)) {
    return;
   }
   HEAP32[(5500)>>2] = 0;
   HEAP32[(5488)>>2] = 0;
   return;
  }
  $94 = HEAP32[(5500)>>2]|0;
  $95 = ($94|0)==($2|0);
  if ($95) {
   $96 = HEAP32[(5488)>>2]|0;
   $97 = (($96) + ($$1365))|0;
   HEAP32[(5488)>>2] = $97;
   HEAP32[(5500)>>2] = $$1;
   $98 = $97 | 1;
   $99 = ((($$1)) + 4|0);
   HEAP32[$99>>2] = $98;
   $100 = (($$1) + ($97)|0);
   HEAP32[$100>>2] = $97;
   return;
  }
  $101 = $83 & -8;
  $102 = (($101) + ($$1365))|0;
  $103 = $83 >>> 3;
  $104 = ($83>>>0)<(256);
  do {
   if ($104) {
    $105 = ((($2)) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ((($2)) + 12|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ($108|0)==($106|0);
    if ($109) {
     $110 = 1 << $103;
     $111 = $110 ^ -1;
     $112 = HEAP32[1370]|0;
     $113 = $112 & $111;
     HEAP32[1370] = $113;
     break;
    } else {
     $114 = ((($106)) + 12|0);
     HEAP32[$114>>2] = $108;
     $115 = ((($108)) + 8|0);
     HEAP32[$115>>2] = $106;
     break;
    }
   } else {
    $116 = ((($2)) + 24|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ((($2)) + 12|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ($119|0)==($2|0);
    do {
     if ($120) {
      $125 = ((($2)) + 16|0);
      $126 = ((($125)) + 4|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = ($127|0)==(0|0);
      if ($128) {
       $129 = HEAP32[$125>>2]|0;
       $130 = ($129|0)==(0|0);
       if ($130) {
        $$3382 = 0;
        break;
       } else {
        $$1380 = $129;$$1384 = $125;
       }
      } else {
       $$1380 = $127;$$1384 = $126;
      }
      while(1) {
       $131 = ((($$1380)) + 20|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = ($132|0)==(0|0);
       if (!($133)) {
        $$1380 = $132;$$1384 = $131;
        continue;
       }
       $134 = ((($$1380)) + 16|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = ($135|0)==(0|0);
       if ($136) {
        break;
       } else {
        $$1380 = $135;$$1384 = $134;
       }
      }
      HEAP32[$$1384>>2] = 0;
      $$3382 = $$1380;
     } else {
      $121 = ((($2)) + 8|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ((($122)) + 12|0);
      HEAP32[$123>>2] = $119;
      $124 = ((($119)) + 8|0);
      HEAP32[$124>>2] = $122;
      $$3382 = $119;
     }
    } while(0);
    $137 = ($117|0)==(0|0);
    if (!($137)) {
     $138 = ((($2)) + 28|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (5784 + ($139<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($2|0);
     if ($142) {
      HEAP32[$140>>2] = $$3382;
      $cond3 = ($$3382|0)==(0|0);
      if ($cond3) {
       $143 = 1 << $139;
       $144 = $143 ^ -1;
       $145 = HEAP32[(5484)>>2]|0;
       $146 = $145 & $144;
       HEAP32[(5484)>>2] = $146;
       break;
      }
     } else {
      $147 = ((($117)) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($148|0)!=($2|0);
      $$sink4 = $149&1;
      $150 = (((($117)) + 16|0) + ($$sink4<<2)|0);
      HEAP32[$150>>2] = $$3382;
      $151 = ($$3382|0)==(0|0);
      if ($151) {
       break;
      }
     }
     $152 = ((($$3382)) + 24|0);
     HEAP32[$152>>2] = $117;
     $153 = ((($2)) + 16|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($154|0)==(0|0);
     if (!($155)) {
      $156 = ((($$3382)) + 16|0);
      HEAP32[$156>>2] = $154;
      $157 = ((($154)) + 24|0);
      HEAP32[$157>>2] = $$3382;
     }
     $158 = ((($153)) + 4|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==(0|0);
     if (!($160)) {
      $161 = ((($$3382)) + 20|0);
      HEAP32[$161>>2] = $159;
      $162 = ((($159)) + 24|0);
      HEAP32[$162>>2] = $$3382;
     }
    }
   }
  } while(0);
  $163 = $102 | 1;
  $164 = ((($$1)) + 4|0);
  HEAP32[$164>>2] = $163;
  $165 = (($$1) + ($102)|0);
  HEAP32[$165>>2] = $102;
  $166 = HEAP32[(5500)>>2]|0;
  $167 = ($$1|0)==($166|0);
  if ($167) {
   HEAP32[(5488)>>2] = $102;
   return;
  } else {
   $$2 = $102;
  }
 } else {
  $168 = $83 & -2;
  HEAP32[$82>>2] = $168;
  $169 = $$1365 | 1;
  $170 = ((($$1)) + 4|0);
  HEAP32[$170>>2] = $169;
  $171 = (($$1) + ($$1365)|0);
  HEAP32[$171>>2] = $$1365;
  $$2 = $$1365;
 }
 $172 = $$2 >>> 3;
 $173 = ($$2>>>0)<(256);
 if ($173) {
  $174 = $172 << 1;
  $175 = (5520 + ($174<<2)|0);
  $176 = HEAP32[1370]|0;
  $177 = 1 << $172;
  $178 = $176 & $177;
  $179 = ($178|0)==(0);
  if ($179) {
   $180 = $176 | $177;
   HEAP32[1370] = $180;
   $$pre = ((($175)) + 8|0);
   $$0385 = $175;$$pre$phiZ2D = $$pre;
  } else {
   $181 = ((($175)) + 8|0);
   $182 = HEAP32[$181>>2]|0;
   $$0385 = $182;$$pre$phiZ2D = $181;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $183 = ((($$0385)) + 12|0);
  HEAP32[$183>>2] = $$1;
  $184 = ((($$1)) + 8|0);
  HEAP32[$184>>2] = $$0385;
  $185 = ((($$1)) + 12|0);
  HEAP32[$185>>2] = $175;
  return;
 }
 $186 = $$2 >>> 8;
 $187 = ($186|0)==(0);
 if ($187) {
  $$0378 = 0;
 } else {
  $188 = ($$2>>>0)>(16777215);
  if ($188) {
   $$0378 = 31;
  } else {
   $189 = (($186) + 1048320)|0;
   $190 = $189 >>> 16;
   $191 = $190 & 8;
   $192 = $186 << $191;
   $193 = (($192) + 520192)|0;
   $194 = $193 >>> 16;
   $195 = $194 & 4;
   $196 = $195 | $191;
   $197 = $192 << $195;
   $198 = (($197) + 245760)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 2;
   $201 = $196 | $200;
   $202 = (14 - ($201))|0;
   $203 = $197 << $200;
   $204 = $203 >>> 15;
   $205 = (($202) + ($204))|0;
   $206 = $205 << 1;
   $207 = (($205) + 7)|0;
   $208 = $$2 >>> $207;
   $209 = $208 & 1;
   $210 = $209 | $206;
   $$0378 = $210;
  }
 }
 $211 = (5784 + ($$0378<<2)|0);
 $212 = ((($$1)) + 28|0);
 HEAP32[$212>>2] = $$0378;
 $213 = ((($$1)) + 16|0);
 $214 = ((($$1)) + 20|0);
 HEAP32[$214>>2] = 0;
 HEAP32[$213>>2] = 0;
 $215 = HEAP32[(5484)>>2]|0;
 $216 = 1 << $$0378;
 $217 = $215 & $216;
 $218 = ($217|0)==(0);
 if ($218) {
  $219 = $215 | $216;
  HEAP32[(5484)>>2] = $219;
  HEAP32[$211>>2] = $$1;
  $220 = ((($$1)) + 24|0);
  HEAP32[$220>>2] = $211;
  $221 = ((($$1)) + 12|0);
  HEAP32[$221>>2] = $$1;
  $222 = ((($$1)) + 8|0);
  HEAP32[$222>>2] = $$1;
  return;
 }
 $223 = HEAP32[$211>>2]|0;
 $224 = ($$0378|0)==(31);
 $225 = $$0378 >>> 1;
 $226 = (25 - ($225))|0;
 $227 = $224 ? 0 : $226;
 $228 = $$2 << $227;
 $$0366 = $228;$$0367 = $223;
 while(1) {
  $229 = ((($$0367)) + 4|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = $230 & -8;
  $232 = ($231|0)==($$2|0);
  if ($232) {
   label = 69;
   break;
  }
  $233 = $$0366 >>> 31;
  $234 = (((($$0367)) + 16|0) + ($233<<2)|0);
  $235 = $$0366 << 1;
  $236 = HEAP32[$234>>2]|0;
  $237 = ($236|0)==(0|0);
  if ($237) {
   label = 68;
   break;
  } else {
   $$0366 = $235;$$0367 = $236;
  }
 }
 if ((label|0) == 68) {
  HEAP32[$234>>2] = $$1;
  $238 = ((($$1)) + 24|0);
  HEAP32[$238>>2] = $$0367;
  $239 = ((($$1)) + 12|0);
  HEAP32[$239>>2] = $$1;
  $240 = ((($$1)) + 8|0);
  HEAP32[$240>>2] = $$1;
  return;
 }
 else if ((label|0) == 69) {
  $241 = ((($$0367)) + 8|0);
  $242 = HEAP32[$241>>2]|0;
  $243 = ((($242)) + 12|0);
  HEAP32[$243>>2] = $$1;
  HEAP32[$241>>2] = $$1;
  $244 = ((($$1)) + 8|0);
  HEAP32[$244>>2] = $242;
  $245 = ((($$1)) + 12|0);
  HEAP32[$245>>2] = $$0367;
  $246 = ((($$1)) + 24|0);
  HEAP32[$246>>2] = 0;
  return;
 }
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_368($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6040|0);
}
function _dummy_368($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $27 = ($26|0)<(0);
    if ($27) {
     break;
    }
    $35 = (($$04855) - ($26))|0;
    $36 = ((($$04954)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($26>>>0)>($37>>>0);
    $39 = ((($$04954)) + 8|0);
    $$150 = $38 ? $39 : $$04954;
    $40 = $38 << 31 >> 31;
    $$1 = (($$04756) + ($40))|0;
    $41 = $38 ? $37 : 0;
    $$0 = (($26) - ($41))|0;
    $42 = HEAP32[$$150>>2]|0;
    $43 = (($42) + ($$0)|0);
    HEAP32[$$150>>2] = $43;
    $44 = ((($$150)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) - ($$0))|0;
    HEAP32[$44>>2] = $46;
    $47 = HEAP32[$13>>2]|0;
    $48 = $$150;
    HEAP32[$vararg_buffer3>>2] = $47;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $48;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $49 = (___syscall146(146,($vararg_buffer3|0))|0);
    $50 = (___syscall_ret($49)|0);
    $51 = ($35|0)==($50|0);
    if ($51) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $35;$$04954 = $$150;$26 = $50;
    }
   }
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $29 = HEAP32[$0>>2]|0;
   $30 = $29 | 32;
   HEAP32[$0>>2] = $30;
   $31 = ($$04756|0)==(2);
   if ($31) {
    $$051 = 0;
   } else {
    $32 = ((($$04954)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($2) - ($33))|0;
    $$051 = $34;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$4>>2] = $25;
  HEAP32[$7>>2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $3 = (652 + ($$016)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ($5|0)==($0|0);
  if ($6) {
   label = 2;
   break;
  }
  $7 = (($$016) + 1)|0;
  $8 = ($7|0)==(87);
  if ($8) {
   $$01214 = 740;$$115 = 87;
   label = 5;
   break;
  } else {
   $$016 = $7;
  }
 }
 if ((label|0) == 2) {
  $2 = ($$016|0)==(0);
  if ($2) {
   $$012$lcssa = 740;
  } else {
   $$01214 = 740;$$115 = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
    label = 5;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)!=(0|0);
 $8 = $7 ? $$0 : $0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$191 = $63 ? $$090 : $26;
      if ($62) {
       $$4 = 0;
       break L1;
      } else {
       $$090 = $$191;$$094 = $$195;
      }
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $$ = $61 ? $57 : 0;
      $$4 = $$;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $$ = $2 ? $0 : $3;
 return ($$|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function ___pthread_self() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (200|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01519 = $0;$23 = $1;
   while(1) {
    $4 = HEAP8[$$01519>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$sink = $23;
     break L1;
    }
    $6 = ((($$01519)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01519 = $6;$23 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn = $$0;
   while(1) {
    $19 = ((($$pn)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$sink = $21;
 }
 $22 = (($$sink) - ($1))|0;
 return ($22|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _isupper($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -65)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_71()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = $1 & -128;
    $12 = ($11|0)==(57216);
    if ($12) {
     $14 = $1&255;
     HEAP8[$0>>0] = $14;
     $$0 = 1;
     break;
    } else {
     $13 = (___errno_location()|0);
     HEAP32[$13>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $15 = ($1>>>0)<(2048);
   if ($15) {
    $16 = $1 >>> 6;
    $17 = $16 | 192;
    $18 = $17&255;
    $19 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $18;
    $20 = $1 & 63;
    $21 = $20 | 128;
    $22 = $21&255;
    HEAP8[$19>>0] = $22;
    $$0 = 2;
    break;
   }
   $23 = ($1>>>0)<(55296);
   $24 = $1 & -8192;
   $25 = ($24|0)==(57344);
   $or$cond = $23 | $25;
   if ($or$cond) {
    $26 = $1 >>> 12;
    $27 = $26 | 224;
    $28 = $27&255;
    $29 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $28;
    $30 = $1 >>> 6;
    $31 = $30 & 63;
    $32 = $31 | 128;
    $33 = $32&255;
    $34 = ((($0)) + 2|0);
    HEAP8[$29>>0] = $33;
    $35 = $1 & 63;
    $36 = $35 | 128;
    $37 = $36&255;
    HEAP8[$34>>0] = $37;
    $$0 = 3;
    break;
   }
   $38 = (($1) + -65536)|0;
   $39 = ($38>>>0)<(1048576);
   if ($39) {
    $40 = $1 >>> 18;
    $41 = $40 | 240;
    $42 = $41&255;
    $43 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $42;
    $44 = $1 >>> 12;
    $45 = $44 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    $48 = ((($0)) + 2|0);
    HEAP8[$43>>0] = $47;
    $49 = $1 >>> 6;
    $50 = $49 & 63;
    $51 = $50 | 128;
    $52 = $51&255;
    $53 = ((($0)) + 3|0);
    HEAP8[$48>>0] = $52;
    $54 = $1 & 63;
    $55 = $54 | 128;
    $56 = $55&255;
    HEAP8[$53>>0] = $56;
    $$0 = 4;
    break;
   } else {
    $57 = (___errno_location()|0);
    HEAP32[$57>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_71() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $4 = sp + 124|0;
 $5 = sp;
 dest=$5; src=444; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $$$015 = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $$$015;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($$$015)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($$$015|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $39 = $12;
  } else {
   $39 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 7]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $40 = ($39|0)==(0);
  if (!($40)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$4266 = 0, $$$5 = 0, $$0 = 0, $$0228 = 0, $$0228$ = 0, $$0229320 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa357 = 0, $$0240319 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0;
 var $$0249307 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$$0254$ = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262313 = 0, $$0269 = 0, $$0269$phi = 0, $$1 = 0, $$1230331 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241330 = 0, $$1244318 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0;
 var $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242306 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2256$$$2256 = 0, $$2261 = 0, $$2271 = 0, $$283$ = 0, $$290 = 0, $$291 = 0, $$3257 = 0;
 var $$3265 = 0, $$3272 = 0, $$3304 = 0, $$376 = 0, $$4258355 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa295 = 0, $$pre = 0, $$pre346 = 0, $$pre347 = 0, $$pre347$pre = 0, $$pre349 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $brmerge = 0, $brmerge312 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0;
 var $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit275 = 0, $isdigit277 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp274 = 0, $isdigittmp276 = 0, $or$cond = 0, $or$cond280 = 0, $or$cond282 = 0, $or$cond285 = 0, $storemerge = 0, $storemerge278 = 0, $trunc = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $5 = sp + 16|0;
 $6 = sp;
 $7 = sp + 24|0;
 $8 = sp + 8|0;
 $9 = sp + 20|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;$21 = $1;
 L1: while(1) {
  $15 = ($$0247|0)>(-1);
  do {
   if ($15) {
    $16 = (2147483647 - ($$0247))|0;
    $17 = ($$0243|0)>($16|0);
    if ($17) {
     $18 = (___errno_location()|0);
     HEAP32[$18>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $19 = (($$0243) + ($$0247))|0;
     $$1248 = $19;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $20 = HEAP8[$21>>0]|0;
  $22 = ($20<<24>>24)==(0);
  if ($22) {
   label = 86;
   break;
  } else {
   $23 = $20;$25 = $21;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $$0249307 = $25;$27 = $25;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $25;$39 = $25;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($25)) + 1|0);
   HEAP32[$5>>2] = $24;
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($27)) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$0249$lcssa = $$0249307;$39 = $27;
      break L12;
     }
     $30 = ((($$0249307)) + 1|0);
     $31 = ((($27)) + 2|0);
     HEAP32[$5>>2] = $31;
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $$0249307 = $30;$27 = $31;
      label = 9;
     } else {
      $$0249$lcssa = $30;$39 = $31;
      break;
     }
    }
   }
  } while(0);
  $34 = $$0249$lcssa;
  $35 = $21;
  $36 = (($34) - ($35))|0;
  if ($10) {
   _out($0,$21,$36);
  }
  $37 = ($36|0)==(0);
  if (!($37)) {
   $$0269$phi = $$0269;$$0243 = $36;$$0247 = $$1248;$21 = $39;$$0269 = $$0269$phi;
   continue;
  }
  $38 = ((($39)) + 1|0);
  $40 = HEAP8[$38>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($39)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($39)) + 3|0);
   $$376 = $44 ? $45 : $38;
   $$$0269 = $44 ? 1 : $$0269;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$0253 = $isdigittmp$;$$1270 = $$$0269;$storemerge = $$376;
  } else {
   $$0253 = -1;$$1270 = $$0269;$storemerge = $38;
  }
  HEAP32[$5>>2] = $storemerge;
  $46 = HEAP8[$storemerge>>0]|0;
  $47 = $46 << 24 >> 24;
  $48 = (($47) + -32)|0;
  $49 = ($48>>>0)>(31);
  $50 = 1 << $48;
  $51 = $50 & 75913;
  $52 = ($51|0)==(0);
  $brmerge312 = $49 | $52;
  if ($brmerge312) {
   $$0262$lcssa = 0;$$lcssa295 = $46;$69 = $storemerge;
  } else {
   $$0262313 = 0;$54 = $46;$59 = $storemerge;
   while(1) {
    $53 = $54 << 24 >> 24;
    $55 = (($53) + -32)|0;
    $56 = 1 << $55;
    $57 = $56 | $$0262313;
    $58 = ((($59)) + 1|0);
    HEAP32[$5>>2] = $58;
    $60 = HEAP8[$58>>0]|0;
    $61 = $60 << 24 >> 24;
    $62 = (($61) + -32)|0;
    $63 = ($62>>>0)>(31);
    $64 = 1 << $62;
    $65 = $64 & 75913;
    $66 = ($65|0)==(0);
    $brmerge = $63 | $66;
    if ($brmerge) {
     $$0262$lcssa = $57;$$lcssa295 = $60;$69 = $58;
     break;
    } else {
     $$0262313 = $57;$54 = $60;$59 = $58;
    }
   }
  }
  $67 = ($$lcssa295<<24>>24)==(42);
  if ($67) {
   $68 = ((($69)) + 1|0);
   $70 = HEAP8[$68>>0]|0;
   $71 = $70 << 24 >> 24;
   $isdigittmp276 = (($71) + -48)|0;
   $isdigit277 = ($isdigittmp276>>>0)<(10);
   if ($isdigit277) {
    $72 = ((($69)) + 2|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = ($73<<24>>24)==(36);
    if ($74) {
     $75 = (($4) + ($isdigittmp276<<2)|0);
     HEAP32[$75>>2] = 10;
     $76 = HEAP8[$68>>0]|0;
     $77 = $76 << 24 >> 24;
     $78 = (($77) + -48)|0;
     $79 = (($3) + ($78<<3)|0);
     $80 = $79;
     $81 = $80;
     $82 = HEAP32[$81>>2]|0;
     $83 = (($80) + 4)|0;
     $84 = $83;
     $85 = HEAP32[$84>>2]|0;
     $86 = ((($69)) + 3|0);
     $$0259 = $82;$$2271 = 1;$storemerge278 = $86;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
   if ((label|0) == 22) {
    label = 0;
    $87 = ($$1270|0)==(0);
    if (!($87)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $88 = $arglist_current;
     $89 = ((0) + 4|0);
     $expanded4 = $89;
     $expanded = (($expanded4) - 1)|0;
     $90 = (($88) + ($expanded))|0;
     $91 = ((0) + 4|0);
     $expanded8 = $91;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $92 = $90 & $expanded6;
     $93 = $92;
     $94 = HEAP32[$93>>2]|0;
     $arglist_next = ((($93)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0259 = $94;$$2271 = 0;$storemerge278 = $68;
    } else {
     $$0259 = 0;$$2271 = 0;$storemerge278 = $68;
    }
   }
   HEAP32[$5>>2] = $storemerge278;
   $95 = ($$0259|0)<(0);
   $96 = $$0262$lcssa | 8192;
   $97 = (0 - ($$0259))|0;
   $$$0262 = $95 ? $96 : $$0262$lcssa;
   $$$0259 = $95 ? $97 : $$0259;
   $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$101 = $storemerge278;
  } else {
   $98 = (_getint($5)|0);
   $99 = ($98|0)<(0);
   if ($99) {
    $$0 = -1;
    break;
   }
   $$pre346 = HEAP32[$5>>2]|0;
   $$1260 = $98;$$1263 = $$0262$lcssa;$$3272 = $$1270;$101 = $$pre346;
  }
  $100 = HEAP8[$101>>0]|0;
  $102 = ($100<<24>>24)==(46);
  do {
   if ($102) {
    $103 = ((($101)) + 1|0);
    $104 = HEAP8[$103>>0]|0;
    $105 = ($104<<24>>24)==(42);
    if (!($105)) {
     $132 = ((($101)) + 1|0);
     HEAP32[$5>>2] = $132;
     $133 = (_getint($5)|0);
     $$pre347$pre = HEAP32[$5>>2]|0;
     $$0254 = $133;$$pre347 = $$pre347$pre;
     break;
    }
    $106 = ((($101)) + 2|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = $107 << 24 >> 24;
    $isdigittmp274 = (($108) + -48)|0;
    $isdigit275 = ($isdigittmp274>>>0)<(10);
    if ($isdigit275) {
     $109 = ((($101)) + 3|0);
     $110 = HEAP8[$109>>0]|0;
     $111 = ($110<<24>>24)==(36);
     if ($111) {
      $112 = (($4) + ($isdigittmp274<<2)|0);
      HEAP32[$112>>2] = 10;
      $113 = HEAP8[$106>>0]|0;
      $114 = $113 << 24 >> 24;
      $115 = (($114) + -48)|0;
      $116 = (($3) + ($115<<3)|0);
      $117 = $116;
      $118 = $117;
      $119 = HEAP32[$118>>2]|0;
      $120 = (($117) + 4)|0;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = ((($101)) + 4|0);
      HEAP32[$5>>2] = $123;
      $$0254 = $119;$$pre347 = $123;
      break;
     }
    }
    $124 = ($$3272|0)==(0);
    if (!($124)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $125 = $arglist_current2;
     $126 = ((0) + 4|0);
     $expanded11 = $126;
     $expanded10 = (($expanded11) - 1)|0;
     $127 = (($125) + ($expanded10))|0;
     $128 = ((0) + 4|0);
     $expanded15 = $128;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $129 = $127 & $expanded13;
     $130 = $129;
     $131 = HEAP32[$130>>2]|0;
     $arglist_next3 = ((($130)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $338 = $131;
    } else {
     $338 = 0;
    }
    HEAP32[$5>>2] = $106;
    $$0254 = $338;$$pre347 = $106;
   } else {
    $$0254 = -1;$$pre347 = $101;
   }
  } while(0);
  $$0252 = 0;$135 = $$pre347;
  while(1) {
   $134 = HEAP8[$135>>0]|0;
   $136 = $134 << 24 >> 24;
   $137 = (($136) + -65)|0;
   $138 = ($137>>>0)>(57);
   if ($138) {
    $$0 = -1;
    break L1;
   }
   $139 = ((($135)) + 1|0);
   HEAP32[$5>>2] = $139;
   $140 = HEAP8[$135>>0]|0;
   $141 = $140 << 24 >> 24;
   $142 = (($141) + -65)|0;
   $143 = ((2544 + (($$0252*58)|0)|0) + ($142)|0);
   $144 = HEAP8[$143>>0]|0;
   $145 = $144&255;
   $146 = (($145) + -1)|0;
   $147 = ($146>>>0)<(8);
   if ($147) {
    $$0252 = $145;$135 = $139;
   } else {
    break;
   }
  }
  $148 = ($144<<24>>24)==(0);
  if ($148) {
   $$0 = -1;
   break;
  }
  $149 = ($144<<24>>24)==(19);
  $150 = ($$0253|0)>(-1);
  do {
   if ($149) {
    if ($150) {
     $$0 = -1;
     break L1;
    } else {
     label = 48;
    }
   } else {
    if ($150) {
     $151 = (($4) + ($$0253<<2)|0);
     HEAP32[$151>>2] = $145;
     $152 = (($3) + ($$0253<<3)|0);
     $153 = $152;
     $154 = $153;
     $155 = HEAP32[$154>>2]|0;
     $156 = (($153) + 4)|0;
     $157 = $156;
     $158 = HEAP32[$157>>2]|0;
     $159 = $6;
     $160 = $159;
     HEAP32[$160>>2] = $155;
     $161 = (($159) + 4)|0;
     $162 = $161;
     HEAP32[$162>>2] = $158;
     label = 48;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($6,$145,$2);
   }
  } while(0);
  if ((label|0) == 48) {
   label = 0;
   if (!($10)) {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
    continue;
   }
  }
  $163 = HEAP8[$135>>0]|0;
  $164 = $163 << 24 >> 24;
  $165 = ($$0252|0)!=(0);
  $166 = $164 & 15;
  $167 = ($166|0)==(3);
  $or$cond280 = $165 & $167;
  $168 = $164 & -33;
  $$0235 = $or$cond280 ? $168 : $164;
  $169 = $$1263 & 8192;
  $170 = ($169|0)==(0);
  $171 = $$1263 & -65537;
  $$1263$ = $170 ? $$1263 : $171;
  L70: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $178 = HEAP32[$6>>2]|0;
     HEAP32[$178>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
     continue L1;
     break;
    }
    case 1:  {
     $179 = HEAP32[$6>>2]|0;
     HEAP32[$179>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
     continue L1;
     break;
    }
    case 2:  {
     $180 = ($$1248|0)<(0);
     $181 = $180 << 31 >> 31;
     $182 = HEAP32[$6>>2]|0;
     $183 = $182;
     $184 = $183;
     HEAP32[$184>>2] = $$1248;
     $185 = (($183) + 4)|0;
     $186 = $185;
     HEAP32[$186>>2] = $181;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
     continue L1;
     break;
    }
    case 3:  {
     $187 = $$1248&65535;
     $188 = HEAP32[$6>>2]|0;
     HEAP16[$188>>1] = $187;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
     continue L1;
     break;
    }
    case 4:  {
     $189 = $$1248&255;
     $190 = HEAP32[$6>>2]|0;
     HEAP8[$190>>0] = $189;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
     continue L1;
     break;
    }
    case 6:  {
     $191 = HEAP32[$6>>2]|0;
     HEAP32[$191>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
     continue L1;
     break;
    }
    case 7:  {
     $192 = ($$1248|0)<(0);
     $193 = $192 << 31 >> 31;
     $194 = HEAP32[$6>>2]|0;
     $195 = $194;
     $196 = $195;
     HEAP32[$196>>2] = $$1248;
     $197 = (($195) + 4)|0;
     $198 = $197;
     HEAP32[$198>>2] = $193;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $199 = ($$0254>>>0)>(8);
    $200 = $199 ? $$0254 : 8;
    $201 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $200;$$3265 = $201;
    label = 60;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 60;
    break;
   }
   case 111:  {
    $217 = $6;
    $218 = $217;
    $219 = HEAP32[$218>>2]|0;
    $220 = (($217) + 4)|0;
    $221 = $220;
    $222 = HEAP32[$221>>2]|0;
    $223 = (_fmt_o($219,$222,$11)|0);
    $224 = $$1263$ & 8;
    $225 = ($224|0)==(0);
    $226 = $223;
    $227 = (($12) - ($226))|0;
    $228 = ($$0254|0)>($227|0);
    $229 = (($227) + 1)|0;
    $230 = $225 | $228;
    $$0254$$0254$ = $230 ? $$0254 : $229;
    $$0228 = $223;$$1233 = 0;$$1238 = 3008;$$2256 = $$0254$$0254$;$$4266 = $$1263$;$255 = $219;$257 = $222;
    label = 66;
    break;
   }
   case 105: case 100:  {
    $231 = $6;
    $232 = $231;
    $233 = HEAP32[$232>>2]|0;
    $234 = (($231) + 4)|0;
    $235 = $234;
    $236 = HEAP32[$235>>2]|0;
    $237 = ($236|0)<(0);
    if ($237) {
     $238 = (_i64Subtract(0,0,($233|0),($236|0))|0);
     $239 = tempRet0;
     $240 = $6;
     $241 = $240;
     HEAP32[$241>>2] = $238;
     $242 = (($240) + 4)|0;
     $243 = $242;
     HEAP32[$243>>2] = $239;
     $$0232 = 1;$$0237 = 3008;$250 = $238;$251 = $239;
     label = 65;
     break L70;
    } else {
     $244 = $$1263$ & 2048;
     $245 = ($244|0)==(0);
     $246 = $$1263$ & 1;
     $247 = ($246|0)==(0);
     $$ = $247 ? 3008 : (3010);
     $$$ = $245 ? $$ : (3009);
     $248 = $$1263$ & 2049;
     $249 = ($248|0)!=(0);
     $$283$ = $249&1;
     $$0232 = $$283$;$$0237 = $$$;$250 = $233;$251 = $236;
     label = 65;
     break L70;
    }
    break;
   }
   case 117:  {
    $172 = $6;
    $173 = $172;
    $174 = HEAP32[$173>>2]|0;
    $175 = (($172) + 4)|0;
    $176 = $175;
    $177 = HEAP32[$176>>2]|0;
    $$0232 = 0;$$0237 = 3008;$250 = $174;$251 = $177;
    label = 65;
    break;
   }
   case 99:  {
    $267 = $6;
    $268 = $267;
    $269 = HEAP32[$268>>2]|0;
    $270 = (($267) + 4)|0;
    $271 = $270;
    $272 = HEAP32[$271>>2]|0;
    $273 = $269&255;
    HEAP8[$13>>0] = $273;
    $$2 = $13;$$2234 = 0;$$2239 = 3008;$$2251 = $11;$$5 = 1;$$6268 = $171;
    break;
   }
   case 109:  {
    $274 = (___errno_location()|0);
    $275 = HEAP32[$274>>2]|0;
    $276 = (_strerror($275)|0);
    $$1 = $276;
    label = 70;
    break;
   }
   case 115:  {
    $277 = HEAP32[$6>>2]|0;
    $278 = ($277|0)!=(0|0);
    $279 = $278 ? $277 : 3018;
    $$1 = $279;
    label = 70;
    break;
   }
   case 67:  {
    $286 = $6;
    $287 = $286;
    $288 = HEAP32[$287>>2]|0;
    $289 = (($286) + 4)|0;
    $290 = $289;
    $291 = HEAP32[$290>>2]|0;
    HEAP32[$8>>2] = $288;
    HEAP32[$14>>2] = 0;
    HEAP32[$6>>2] = $8;
    $$4258355 = -1;$339 = $8;
    label = 74;
    break;
   }
   case 83:  {
    $$pre349 = HEAP32[$6>>2]|0;
    $292 = ($$0254|0)==(0);
    if ($292) {
     _pad_391($0,32,$$1260,0,$$1263$);
     $$0240$lcssa357 = 0;
     label = 83;
    } else {
     $$4258355 = $$0254;$339 = $$pre349;
     label = 74;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $314 = +HEAPF64[$6>>3];
    $315 = (_fmt_fp($0,$314,$$1260,$$0254,$$1263$,$$0235)|0);
    $$0243 = $315;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
    continue L1;
    break;
   }
   default: {
    $$2 = $21;$$2234 = 0;$$2239 = 3008;$$2251 = $11;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L94: do {
   if ((label|0) == 60) {
    label = 0;
    $202 = $6;
    $203 = $202;
    $204 = HEAP32[$203>>2]|0;
    $205 = (($202) + 4)|0;
    $206 = $205;
    $207 = HEAP32[$206>>2]|0;
    $208 = $$1236 & 32;
    $209 = (_fmt_x($204,$207,$11,$208)|0);
    $210 = ($204|0)==(0);
    $211 = ($207|0)==(0);
    $212 = $210 & $211;
    $213 = $$3265 & 8;
    $214 = ($213|0)==(0);
    $or$cond282 = $214 | $212;
    $215 = $$1236 >> 4;
    $216 = (3008 + ($215)|0);
    $$290 = $or$cond282 ? 3008 : $216;
    $$291 = $or$cond282 ? 0 : 2;
    $$0228 = $209;$$1233 = $$291;$$1238 = $$290;$$2256 = $$1255;$$4266 = $$3265;$255 = $204;$257 = $207;
    label = 66;
   }
   else if ((label|0) == 65) {
    label = 0;
    $252 = (_fmt_u($250,$251,$11)|0);
    $$0228 = $252;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;$255 = $250;$257 = $251;
    label = 66;
   }
   else if ((label|0) == 70) {
    label = 0;
    $280 = (_memchr($$1,0,$$0254)|0);
    $281 = ($280|0)==(0|0);
    $282 = $280;
    $283 = $$1;
    $284 = (($282) - ($283))|0;
    $285 = (($$1) + ($$0254)|0);
    $$3257 = $281 ? $$0254 : $284;
    $$1250 = $281 ? $285 : $280;
    $$2 = $$1;$$2234 = 0;$$2239 = 3008;$$2251 = $$1250;$$5 = $$3257;$$6268 = $171;
   }
   else if ((label|0) == 74) {
    label = 0;
    $$0229320 = $339;$$0240319 = 0;$$1244318 = 0;
    while(1) {
     $293 = HEAP32[$$0229320>>2]|0;
     $294 = ($293|0)==(0);
     if ($294) {
      $$0240$lcssa = $$0240319;$$2245 = $$1244318;
      break;
     }
     $295 = (_wctomb($9,$293)|0);
     $296 = ($295|0)<(0);
     $297 = (($$4258355) - ($$0240319))|0;
     $298 = ($295>>>0)>($297>>>0);
     $or$cond285 = $296 | $298;
     if ($or$cond285) {
      $$0240$lcssa = $$0240319;$$2245 = $295;
      break;
     }
     $299 = ((($$0229320)) + 4|0);
     $300 = (($295) + ($$0240319))|0;
     $301 = ($$4258355>>>0)>($300>>>0);
     if ($301) {
      $$0229320 = $299;$$0240319 = $300;$$1244318 = $295;
     } else {
      $$0240$lcssa = $300;$$2245 = $295;
      break;
     }
    }
    $302 = ($$2245|0)<(0);
    if ($302) {
     $$0 = -1;
     break L1;
    }
    _pad_391($0,32,$$1260,$$0240$lcssa,$$1263$);
    $303 = ($$0240$lcssa|0)==(0);
    if ($303) {
     $$0240$lcssa357 = 0;
     label = 83;
    } else {
     $$1230331 = $339;$$1241330 = 0;
     while(1) {
      $304 = HEAP32[$$1230331>>2]|0;
      $305 = ($304|0)==(0);
      if ($305) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 83;
       break L94;
      }
      $306 = (_wctomb($9,$304)|0);
      $307 = (($306) + ($$1241330))|0;
      $308 = ($307|0)>($$0240$lcssa|0);
      if ($308) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 83;
       break L94;
      }
      $309 = ((($$1230331)) + 4|0);
      _out($0,$9,$306);
      $310 = ($307>>>0)<($$0240$lcssa>>>0);
      if ($310) {
       $$1230331 = $309;$$1241330 = $307;
      } else {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 83;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 66) {
   label = 0;
   $253 = ($$2256|0)>(-1);
   $254 = $$4266 & -65537;
   $$$4266 = $253 ? $254 : $$4266;
   $256 = ($255|0)!=(0);
   $258 = ($257|0)!=(0);
   $259 = $256 | $258;
   $260 = ($$2256|0)!=(0);
   $or$cond = $260 | $259;
   $261 = $$0228;
   $262 = (($12) - ($261))|0;
   $263 = $259 ^ 1;
   $264 = $263&1;
   $265 = (($262) + ($264))|0;
   $266 = ($$2256|0)>($265|0);
   $$2256$ = $266 ? $$2256 : $265;
   $$2256$$$2256 = $or$cond ? $$2256$ : $$2256;
   $$0228$ = $or$cond ? $$0228 : $11;
   $$2 = $$0228$;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $11;$$5 = $$2256$$$2256;$$6268 = $$$4266;
  }
  else if ((label|0) == 83) {
   label = 0;
   $311 = $$1263$ ^ 8192;
   _pad_391($0,32,$$1260,$$0240$lcssa357,$311);
   $312 = ($$1260|0)>($$0240$lcssa357|0);
   $313 = $312 ? $$1260 : $$0240$lcssa357;
   $$0243 = $313;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
   continue;
  }
  $316 = $$2251;
  $317 = $$2;
  $318 = (($316) - ($317))|0;
  $319 = ($$5|0)<($318|0);
  $$$5 = $319 ? $318 : $$5;
  $320 = (($$$5) + ($$2234))|0;
  $321 = ($$1260|0)<($320|0);
  $$2261 = $321 ? $320 : $$1260;
  _pad_391($0,32,$$2261,$320,$$6268);
  _out($0,$$2239,$$2234);
  $322 = $$6268 ^ 65536;
  _pad_391($0,48,$$2261,$320,$322);
  _pad_391($0,48,$$$5,$318,0);
  _out($0,$$2,$318);
  $323 = $$6268 ^ 8192;
  _pad_391($0,32,$$2261,$320,$323);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
 }
 L113: do {
  if ((label|0) == 86) {
   $324 = ($0|0)==(0|0);
   if ($324) {
    $325 = ($$0269|0)==(0);
    if ($325) {
     $$0 = 0;
    } else {
     $$2242306 = 1;
     while(1) {
      $326 = (($4) + ($$2242306<<2)|0);
      $327 = HEAP32[$326>>2]|0;
      $328 = ($327|0)==(0);
      if ($328) {
       $$2242$lcssa = $$2242306;
       break;
      }
      $330 = (($3) + ($$2242306<<3)|0);
      _pop_arg($330,$327,$2);
      $331 = (($$2242306) + 1)|0;
      $332 = ($$2242306|0)<(9);
      if ($332) {
       $$2242306 = $331;
      } else {
       $$2242$lcssa = $331;
       break;
      }
     }
     $329 = ($$2242$lcssa|0)<(10);
     if ($329) {
      $$3304 = $$2242$lcssa;
      while(1) {
       $335 = (($4) + ($$3304<<2)|0);
       $336 = HEAP32[$335>>2]|0;
       $337 = ($336|0)==(0);
       if (!($337)) {
        $$0 = -1;
        break L113;
       }
       $333 = (($$3304) + 1)|0;
       $334 = ($$3304|0)<(9);
       if ($334) {
        $$3304 = $333;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$06 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit5 = 0, $isdigittmp = 0, $isdigittmp4 = 0, $isdigittmp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $isdigittmp4 = (($3) + -48)|0;
 $isdigit5 = ($isdigittmp4>>>0)<(10);
 if ($isdigit5) {
  $$06 = 0;$7 = $1;$isdigittmp7 = $isdigittmp4;
  while(1) {
   $4 = ($$06*10)|0;
   $5 = (($isdigittmp7) + ($4))|0;
   $6 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $6;
   $8 = HEAP8[$6>>0]|0;
   $9 = $8 << 24 >> 24;
   $isdigittmp = (($9) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$06 = $5;$7 = $6;$isdigittmp7 = $isdigittmp;
   } else {
    $$0$lcssa = $5;
    break;
   }
  }
 } else {
  $$0$lcssa = 0;
 }
 return ($$0$lcssa|0);
}
function _pop_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (3060 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = tempRet0;
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = tempRet0;
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10&255;
   $13 = $12 | 48;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _pad_391($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = ($9>>>0)<(256);
  $11 = $10 ? $9 : 256;
  _memset(($5|0),($1|0),($11|0))|0;
  $12 = ($9>>>0)>(255);
  if ($12) {
   $13 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out($0,$5,256);
    $14 = (($$011) + -256)|0;
    $15 = ($14>>>0)>(255);
    if ($15) {
     $$011 = $14;
    } else {
     break;
    }
   }
   $16 = $13 & 255;
   $$0$lcssa = $16;
  } else {
   $$0$lcssa = $9;
  }
  _out($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$ = 0, $$$$564 = 0.0, $$$3484 = 0, $$$3484699 = 0, $$$3484700 = 0, $$$3501 = 0, $$$4502 = 0, $$$543 = 0.0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488 = 0, $$0488655 = 0, $$0488657 = 0;
 var $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0510 = 0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0;
 var $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1526 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2476$$549 = 0, $$2476$$551 = 0, $$2483$ph = 0;
 var $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$534$ = 0;
 var $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$557 = 0, $$5605 = 0, $$561 = 0, $$564 = 0.0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0;
 var $$9$ph = 0, $$lcssa675 = 0, $$neg = 0, $$neg568 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre690 = 0, $$pre693 = 0, $$pre697 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0;
 var $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond542 = 0, $or$cond545 = 0, $or$cond556 = 0, $or$cond6 = 0, $scevgep686 = 0, $scevgep686687 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0;
 $6 = sp + 8|0;
 $7 = sp;
 $8 = sp + 524|0;
 $9 = $8;
 $10 = sp + 512|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 (___DOUBLE_BITS_392($1)|0);
 $12 = tempRet0;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = -$1;
  $$0471 = $14;$$0520 = 1;$$0521 = 3025;
 } else {
  $15 = $4 & 2048;
  $16 = ($15|0)==(0);
  $17 = $4 & 1;
  $18 = ($17|0)==(0);
  $$ = $18 ? (3026) : (3031);
  $$$ = $16 ? $$ : (3028);
  $19 = $4 & 2049;
  $20 = ($19|0)!=(0);
  $$534$ = $20&1;
  $$0471 = $1;$$0520 = $$534$;$$0521 = $$$;
 }
 (___DOUBLE_BITS_392($$0471)|0);
 $21 = tempRet0;
 $22 = $21 & 2146435072;
 $23 = (0)==(0);
 $24 = ($22|0)==(2146435072);
 $25 = $23 & $24;
 do {
  if ($25) {
   $26 = $5 & 32;
   $27 = ($26|0)!=(0);
   $28 = $27 ? 3044 : 3048;
   $29 = ($$0471 != $$0471) | (0.0 != 0.0);
   $30 = $27 ? 3052 : 3056;
   $$0510 = $29 ? $30 : $28;
   $31 = (($$0520) + 3)|0;
   $32 = $4 & -65537;
   _pad_391($0,32,$2,$31,$32);
   _out($0,$$0521,$$0520);
   _out($0,$$0510,3);
   $33 = $4 ^ 8192;
   _pad_391($0,32,$2,$31,$33);
   $$sink560 = $31;
  } else {
   $34 = (+_frexpl($$0471,$7));
   $35 = $34 * 2.0;
   $36 = $35 != 0.0;
   if ($36) {
    $37 = HEAP32[$7>>2]|0;
    $38 = (($37) + -1)|0;
    HEAP32[$7>>2] = $38;
   }
   $39 = $5 | 32;
   $40 = ($39|0)==(97);
   if ($40) {
    $41 = $5 & 32;
    $42 = ($41|0)==(0);
    $43 = ((($$0521)) + 9|0);
    $$0521$ = $42 ? $$0521 : $43;
    $44 = $$0520 | 2;
    $45 = ($3>>>0)>(11);
    $46 = (12 - ($3))|0;
    $47 = ($46|0)==(0);
    $48 = $45 | $47;
    do {
     if ($48) {
      $$1472 = $35;
     } else {
      $$0509585 = 8.0;$$1508586 = $46;
      while(1) {
       $49 = (($$1508586) + -1)|0;
       $50 = $$0509585 * 16.0;
       $51 = ($49|0)==(0);
       if ($51) {
        break;
       } else {
        $$0509585 = $50;$$1508586 = $49;
       }
      }
      $52 = HEAP8[$$0521$>>0]|0;
      $53 = ($52<<24>>24)==(45);
      if ($53) {
       $54 = -$35;
       $55 = $54 - $50;
       $56 = $50 + $55;
       $57 = -$56;
       $$1472 = $57;
       break;
      } else {
       $58 = $35 + $50;
       $59 = $58 - $50;
       $$1472 = $59;
       break;
      }
     }
    } while(0);
    $60 = HEAP32[$7>>2]|0;
    $61 = ($60|0)<(0);
    $62 = (0 - ($60))|0;
    $63 = $61 ? $62 : $60;
    $64 = ($63|0)<(0);
    $65 = $64 << 31 >> 31;
    $66 = (_fmt_u($63,$65,$11)|0);
    $67 = ($66|0)==($11|0);
    if ($67) {
     $68 = ((($10)) + 11|0);
     HEAP8[$68>>0] = 48;
     $$0511 = $68;
    } else {
     $$0511 = $66;
    }
    $69 = $60 >> 31;
    $70 = $69 & 2;
    $71 = (($70) + 43)|0;
    $72 = $71&255;
    $73 = ((($$0511)) + -1|0);
    HEAP8[$73>>0] = $72;
    $74 = (($5) + 15)|0;
    $75 = $74&255;
    $76 = ((($$0511)) + -2|0);
    HEAP8[$76>>0] = $75;
    $77 = ($3|0)<(1);
    $78 = $4 & 8;
    $79 = ($78|0)==(0);
    $$0523 = $8;$$2473 = $$1472;
    while(1) {
     $80 = (~~(($$2473)));
     $81 = (3060 + ($80)|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = $82&255;
     $84 = $41 | $83;
     $85 = $84&255;
     $86 = ((($$0523)) + 1|0);
     HEAP8[$$0523>>0] = $85;
     $87 = (+($80|0));
     $88 = $$2473 - $87;
     $89 = $88 * 16.0;
     $90 = $86;
     $91 = (($90) - ($9))|0;
     $92 = ($91|0)==(1);
     if ($92) {
      $93 = $89 == 0.0;
      $or$cond3$not = $77 & $93;
      $or$cond = $79 & $or$cond3$not;
      if ($or$cond) {
       $$1524 = $86;
      } else {
       $94 = ((($$0523)) + 2|0);
       HEAP8[$86>>0] = 46;
       $$1524 = $94;
      }
     } else {
      $$1524 = $86;
     }
     $95 = $89 != 0.0;
     if ($95) {
      $$0523 = $$1524;$$2473 = $89;
     } else {
      break;
     }
    }
    $96 = ($3|0)==(0);
    $$pre693 = $$1524;
    if ($96) {
     label = 24;
    } else {
     $97 = (-2 - ($9))|0;
     $98 = (($97) + ($$pre693))|0;
     $99 = ($98|0)<($3|0);
     if ($99) {
      $100 = (($3) + 2)|0;
      $$pre690 = (($$pre693) - ($9))|0;
      $$pre$phi691Z2D = $$pre690;$$sink = $100;
     } else {
      label = 24;
     }
    }
    if ((label|0) == 24) {
     $101 = (($$pre693) - ($9))|0;
     $$pre$phi691Z2D = $101;$$sink = $101;
    }
    $102 = $11;
    $103 = $76;
    $104 = (($102) - ($103))|0;
    $105 = (($104) + ($44))|0;
    $106 = (($105) + ($$sink))|0;
    _pad_391($0,32,$2,$106,$4);
    _out($0,$$0521$,$44);
    $107 = $4 ^ 65536;
    _pad_391($0,48,$2,$106,$107);
    _out($0,$8,$$pre$phi691Z2D);
    $108 = (($$sink) - ($$pre$phi691Z2D))|0;
    _pad_391($0,48,$108,0,0);
    _out($0,$76,$104);
    $109 = $4 ^ 8192;
    _pad_391($0,32,$2,$106,$109);
    $$sink560 = $106;
    break;
   }
   $110 = ($3|0)<(0);
   $$540 = $110 ? 6 : $3;
   if ($36) {
    $111 = $35 * 268435456.0;
    $112 = HEAP32[$7>>2]|0;
    $113 = (($112) + -28)|0;
    HEAP32[$7>>2] = $113;
    $$3 = $111;$$pr = $113;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $35;$$pr = $$pre;
   }
   $114 = ($$pr|0)<(0);
   $115 = ((($6)) + 288|0);
   $$561 = $114 ? $6 : $115;
   $$0498 = $$561;$$4 = $$3;
   while(1) {
    $116 = (~~(($$4))>>>0);
    HEAP32[$$0498>>2] = $116;
    $117 = ((($$0498)) + 4|0);
    $118 = (+($116>>>0));
    $119 = $$4 - $118;
    $120 = $119 * 1.0E+9;
    $121 = $120 != 0.0;
    if ($121) {
     $$0498 = $117;$$4 = $120;
    } else {
     break;
    }
   }
   $122 = ($$pr|0)>(0);
   if ($122) {
    $$1482663 = $$561;$$1499662 = $117;$123 = $$pr;
    while(1) {
     $124 = ($123|0)<(29);
     $125 = $124 ? $123 : 29;
     $$0488655 = ((($$1499662)) + -4|0);
     $126 = ($$0488655>>>0)<($$1482663>>>0);
     if ($126) {
      $$2483$ph = $$1482663;
     } else {
      $$0488657 = $$0488655;$$0497656 = 0;
      while(1) {
       $127 = HEAP32[$$0488657>>2]|0;
       $128 = (_bitshift64Shl(($127|0),0,($125|0))|0);
       $129 = tempRet0;
       $130 = (_i64Add(($128|0),($129|0),($$0497656|0),0)|0);
       $131 = tempRet0;
       $132 = (___uremdi3(($130|0),($131|0),1000000000,0)|0);
       $133 = tempRet0;
       HEAP32[$$0488657>>2] = $132;
       $134 = (___udivdi3(($130|0),($131|0),1000000000,0)|0);
       $135 = tempRet0;
       $$0488 = ((($$0488657)) + -4|0);
       $136 = ($$0488>>>0)<($$1482663>>>0);
       if ($136) {
        break;
       } else {
        $$0488657 = $$0488;$$0497656 = $134;
       }
      }
      $137 = ($134|0)==(0);
      if ($137) {
       $$2483$ph = $$1482663;
      } else {
       $138 = ((($$1482663)) + -4|0);
       HEAP32[$138>>2] = $134;
       $$2483$ph = $138;
      }
     }
     $$2500 = $$1499662;
     while(1) {
      $139 = ($$2500>>>0)>($$2483$ph>>>0);
      if (!($139)) {
       break;
      }
      $140 = ((($$2500)) + -4|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = ($141|0)==(0);
      if ($142) {
       $$2500 = $140;
      } else {
       break;
      }
     }
     $143 = HEAP32[$7>>2]|0;
     $144 = (($143) - ($125))|0;
     HEAP32[$7>>2] = $144;
     $145 = ($144|0)>(0);
     if ($145) {
      $$1482663 = $$2483$ph;$$1499662 = $$2500;$123 = $144;
     } else {
      $$1482$lcssa = $$2483$ph;$$1499$lcssa = $$2500;$$pr566 = $144;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561;$$1499$lcssa = $117;$$pr566 = $$pr;
   }
   $146 = ($$pr566|0)<(0);
   if ($146) {
    $147 = (($$540) + 25)|0;
    $148 = (($147|0) / 9)&-1;
    $149 = (($148) + 1)|0;
    $150 = ($39|0)==(102);
    $$3484650 = $$1482$lcssa;$$3501649 = $$1499$lcssa;$152 = $$pr566;
    while(1) {
     $151 = (0 - ($152))|0;
     $153 = ($151|0)<(9);
     $154 = $153 ? $151 : 9;
     $155 = ($$3484650>>>0)<($$3501649>>>0);
     if ($155) {
      $159 = 1 << $154;
      $160 = (($159) + -1)|0;
      $161 = 1000000000 >>> $154;
      $$0487644 = 0;$$1489643 = $$3484650;
      while(1) {
       $162 = HEAP32[$$1489643>>2]|0;
       $163 = $162 & $160;
       $164 = $162 >>> $154;
       $165 = (($164) + ($$0487644))|0;
       HEAP32[$$1489643>>2] = $165;
       $166 = Math_imul($163, $161)|0;
       $167 = ((($$1489643)) + 4|0);
       $168 = ($167>>>0)<($$3501649>>>0);
       if ($168) {
        $$0487644 = $166;$$1489643 = $167;
       } else {
        break;
       }
      }
      $169 = HEAP32[$$3484650>>2]|0;
      $170 = ($169|0)==(0);
      $171 = ((($$3484650)) + 4|0);
      $$$3484 = $170 ? $171 : $$3484650;
      $172 = ($166|0)==(0);
      if ($172) {
       $$$3484700 = $$$3484;$$4502 = $$3501649;
      } else {
       $173 = ((($$3501649)) + 4|0);
       HEAP32[$$3501649>>2] = $166;
       $$$3484700 = $$$3484;$$4502 = $173;
      }
     } else {
      $156 = HEAP32[$$3484650>>2]|0;
      $157 = ($156|0)==(0);
      $158 = ((($$3484650)) + 4|0);
      $$$3484699 = $157 ? $158 : $$3484650;
      $$$3484700 = $$$3484699;$$4502 = $$3501649;
     }
     $174 = $150 ? $$561 : $$$3484700;
     $175 = $$4502;
     $176 = $174;
     $177 = (($175) - ($176))|0;
     $178 = $177 >> 2;
     $179 = ($178|0)>($149|0);
     $180 = (($174) + ($149<<2)|0);
     $$$4502 = $179 ? $180 : $$4502;
     $181 = HEAP32[$7>>2]|0;
     $182 = (($181) + ($154))|0;
     HEAP32[$7>>2] = $182;
     $183 = ($182|0)<(0);
     if ($183) {
      $$3484650 = $$$3484700;$$3501649 = $$$4502;$152 = $182;
     } else {
      $$3484$lcssa = $$$3484700;$$3501$lcssa = $$$4502;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$3501$lcssa = $$1499$lcssa;
   }
   $184 = ($$3484$lcssa>>>0)<($$3501$lcssa>>>0);
   $185 = $$561;
   if ($184) {
    $186 = $$3484$lcssa;
    $187 = (($185) - ($186))|0;
    $188 = $187 >> 2;
    $189 = ($188*9)|0;
    $190 = HEAP32[$$3484$lcssa>>2]|0;
    $191 = ($190>>>0)<(10);
    if ($191) {
     $$1515 = $189;
    } else {
     $$0514639 = $189;$$0530638 = 10;
     while(1) {
      $192 = ($$0530638*10)|0;
      $193 = (($$0514639) + 1)|0;
      $194 = ($190>>>0)<($192>>>0);
      if ($194) {
       $$1515 = $193;
       break;
      } else {
       $$0514639 = $193;$$0530638 = $192;
      }
     }
    }
   } else {
    $$1515 = 0;
   }
   $195 = ($39|0)!=(102);
   $196 = $195 ? $$1515 : 0;
   $197 = (($$540) - ($196))|0;
   $198 = ($39|0)==(103);
   $199 = ($$540|0)!=(0);
   $200 = $199 & $198;
   $$neg = $200 << 31 >> 31;
   $201 = (($197) + ($$neg))|0;
   $202 = $$3501$lcssa;
   $203 = (($202) - ($185))|0;
   $204 = $203 >> 2;
   $205 = ($204*9)|0;
   $206 = (($205) + -9)|0;
   $207 = ($201|0)<($206|0);
   if ($207) {
    $208 = ((($$561)) + 4|0);
    $209 = (($201) + 9216)|0;
    $210 = (($209|0) / 9)&-1;
    $211 = (($210) + -1024)|0;
    $212 = (($208) + ($211<<2)|0);
    $213 = (($209|0) % 9)&-1;
    $214 = ($213|0)<(8);
    if ($214) {
     $$0527$in633 = $213;$$1531632 = 10;
     while(1) {
      $$0527 = (($$0527$in633) + 1)|0;
      $215 = ($$1531632*10)|0;
      $216 = ($$0527$in633|0)<(7);
      if ($216) {
       $$0527$in633 = $$0527;$$1531632 = $215;
      } else {
       $$1531$lcssa = $215;
       break;
      }
     }
    } else {
     $$1531$lcssa = 10;
    }
    $217 = HEAP32[$212>>2]|0;
    $218 = (($217>>>0) % ($$1531$lcssa>>>0))&-1;
    $219 = ($218|0)==(0);
    $220 = ((($212)) + 4|0);
    $221 = ($220|0)==($$3501$lcssa|0);
    $or$cond542 = $221 & $219;
    if ($or$cond542) {
     $$4492 = $212;$$4518 = $$1515;$$8 = $$3484$lcssa;
    } else {
     $222 = (($217>>>0) / ($$1531$lcssa>>>0))&-1;
     $223 = $222 & 1;
     $224 = ($223|0)==(0);
     $$543 = $224 ? 9007199254740992.0 : 9007199254740994.0;
     $225 = (($$1531$lcssa|0) / 2)&-1;
     $226 = ($218>>>0)<($225>>>0);
     $227 = ($218|0)==($225|0);
     $or$cond545 = $221 & $227;
     $$564 = $or$cond545 ? 1.0 : 1.5;
     $$$564 = $226 ? 0.5 : $$564;
     $228 = ($$0520|0)==(0);
     if ($228) {
      $$1467 = $$$564;$$1469 = $$543;
     } else {
      $229 = HEAP8[$$0521>>0]|0;
      $230 = ($229<<24>>24)==(45);
      $231 = -$$543;
      $232 = -$$$564;
      $$$543 = $230 ? $231 : $$543;
      $$$$564 = $230 ? $232 : $$$564;
      $$1467 = $$$$564;$$1469 = $$$543;
     }
     $233 = (($217) - ($218))|0;
     HEAP32[$212>>2] = $233;
     $234 = $$1469 + $$1467;
     $235 = $234 != $$1469;
     if ($235) {
      $236 = (($233) + ($$1531$lcssa))|0;
      HEAP32[$212>>2] = $236;
      $237 = ($236>>>0)>(999999999);
      if ($237) {
       $$5486626 = $$3484$lcssa;$$sink547625 = $212;
       while(1) {
        $238 = ((($$sink547625)) + -4|0);
        HEAP32[$$sink547625>>2] = 0;
        $239 = ($238>>>0)<($$5486626>>>0);
        if ($239) {
         $240 = ((($$5486626)) + -4|0);
         HEAP32[$240>>2] = 0;
         $$6 = $240;
        } else {
         $$6 = $$5486626;
        }
        $241 = HEAP32[$238>>2]|0;
        $242 = (($241) + 1)|0;
        HEAP32[$238>>2] = $242;
        $243 = ($242>>>0)>(999999999);
        if ($243) {
         $$5486626 = $$6;$$sink547625 = $238;
        } else {
         $$5486$lcssa = $$6;$$sink547$lcssa = $238;
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa;$$sink547$lcssa = $212;
      }
      $244 = $$5486$lcssa;
      $245 = (($185) - ($244))|0;
      $246 = $245 >> 2;
      $247 = ($246*9)|0;
      $248 = HEAP32[$$5486$lcssa>>2]|0;
      $249 = ($248>>>0)<(10);
      if ($249) {
       $$4492 = $$sink547$lcssa;$$4518 = $247;$$8 = $$5486$lcssa;
      } else {
       $$2516621 = $247;$$2532620 = 10;
       while(1) {
        $250 = ($$2532620*10)|0;
        $251 = (($$2516621) + 1)|0;
        $252 = ($248>>>0)<($250>>>0);
        if ($252) {
         $$4492 = $$sink547$lcssa;$$4518 = $251;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2516621 = $251;$$2532620 = $250;
        }
       }
      }
     } else {
      $$4492 = $212;$$4518 = $$1515;$$8 = $$3484$lcssa;
     }
    }
    $253 = ((($$4492)) + 4|0);
    $254 = ($$3501$lcssa>>>0)>($253>>>0);
    $$$3501 = $254 ? $253 : $$3501$lcssa;
    $$5519$ph = $$4518;$$7505$ph = $$$3501;$$9$ph = $$8;
   } else {
    $$5519$ph = $$1515;$$7505$ph = $$3501$lcssa;$$9$ph = $$3484$lcssa;
   }
   $$7505 = $$7505$ph;
   while(1) {
    $255 = ($$7505>>>0)>($$9$ph>>>0);
    if (!($255)) {
     $$lcssa675 = 0;
     break;
    }
    $256 = ((($$7505)) + -4|0);
    $257 = HEAP32[$256>>2]|0;
    $258 = ($257|0)==(0);
    if ($258) {
     $$7505 = $256;
    } else {
     $$lcssa675 = 1;
     break;
    }
   }
   $259 = (0 - ($$5519$ph))|0;
   do {
    if ($198) {
     $not$ = $199 ^ 1;
     $260 = $not$&1;
     $$540$ = (($$540) + ($260))|0;
     $261 = ($$540$|0)>($$5519$ph|0);
     $262 = ($$5519$ph|0)>(-5);
     $or$cond6 = $261 & $262;
     if ($or$cond6) {
      $263 = (($5) + -1)|0;
      $$neg568 = (($$540$) + -1)|0;
      $264 = (($$neg568) - ($$5519$ph))|0;
      $$0479 = $263;$$2476 = $264;
     } else {
      $265 = (($5) + -2)|0;
      $266 = (($$540$) + -1)|0;
      $$0479 = $265;$$2476 = $266;
     }
     $267 = $4 & 8;
     $268 = ($267|0)==(0);
     if ($268) {
      if ($$lcssa675) {
       $269 = ((($$7505)) + -4|0);
       $270 = HEAP32[$269>>2]|0;
       $271 = ($270|0)==(0);
       if ($271) {
        $$2529 = 9;
       } else {
        $272 = (($270>>>0) % 10)&-1;
        $273 = ($272|0)==(0);
        if ($273) {
         $$1528617 = 0;$$3533616 = 10;
         while(1) {
          $274 = ($$3533616*10)|0;
          $275 = (($$1528617) + 1)|0;
          $276 = (($270>>>0) % ($274>>>0))&-1;
          $277 = ($276|0)==(0);
          if ($277) {
           $$1528617 = $275;$$3533616 = $274;
          } else {
           $$2529 = $275;
           break;
          }
         }
        } else {
         $$2529 = 0;
        }
       }
      } else {
       $$2529 = 9;
      }
      $278 = $$0479 | 32;
      $279 = ($278|0)==(102);
      $280 = $$7505;
      $281 = (($280) - ($185))|0;
      $282 = $281 >> 2;
      $283 = ($282*9)|0;
      $284 = (($283) + -9)|0;
      if ($279) {
       $285 = (($284) - ($$2529))|0;
       $286 = ($285|0)>(0);
       $$548 = $286 ? $285 : 0;
       $287 = ($$2476|0)<($$548|0);
       $$2476$$549 = $287 ? $$2476 : $$548;
       $$1480 = $$0479;$$3477 = $$2476$$549;$$pre$phi698Z2D = 0;
       break;
      } else {
       $288 = (($284) + ($$5519$ph))|0;
       $289 = (($288) - ($$2529))|0;
       $290 = ($289|0)>(0);
       $$550 = $290 ? $289 : 0;
       $291 = ($$2476|0)<($$550|0);
       $$2476$$551 = $291 ? $$2476 : $$550;
       $$1480 = $$0479;$$3477 = $$2476$$551;$$pre$phi698Z2D = 0;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;$$pre$phi698Z2D = $267;
     }
    } else {
     $$pre697 = $4 & 8;
     $$1480 = $5;$$3477 = $$540;$$pre$phi698Z2D = $$pre697;
    }
   } while(0);
   $292 = $$3477 | $$pre$phi698Z2D;
   $293 = ($292|0)!=(0);
   $294 = $293&1;
   $295 = $$1480 | 32;
   $296 = ($295|0)==(102);
   if ($296) {
    $297 = ($$5519$ph|0)>(0);
    $298 = $297 ? $$5519$ph : 0;
    $$2513 = 0;$$pn = $298;
   } else {
    $299 = ($$5519$ph|0)<(0);
    $300 = $299 ? $259 : $$5519$ph;
    $301 = ($300|0)<(0);
    $302 = $301 << 31 >> 31;
    $303 = (_fmt_u($300,$302,$11)|0);
    $304 = $11;
    $305 = $303;
    $306 = (($304) - ($305))|0;
    $307 = ($306|0)<(2);
    if ($307) {
     $$1512610 = $303;
     while(1) {
      $308 = ((($$1512610)) + -1|0);
      HEAP8[$308>>0] = 48;
      $309 = $308;
      $310 = (($304) - ($309))|0;
      $311 = ($310|0)<(2);
      if ($311) {
       $$1512610 = $308;
      } else {
       $$1512$lcssa = $308;
       break;
      }
     }
    } else {
     $$1512$lcssa = $303;
    }
    $312 = $$5519$ph >> 31;
    $313 = $312 & 2;
    $314 = (($313) + 43)|0;
    $315 = $314&255;
    $316 = ((($$1512$lcssa)) + -1|0);
    HEAP8[$316>>0] = $315;
    $317 = $$1480&255;
    $318 = ((($$1512$lcssa)) + -2|0);
    HEAP8[$318>>0] = $317;
    $319 = $318;
    $320 = (($304) - ($319))|0;
    $$2513 = $318;$$pn = $320;
   }
   $321 = (($$0520) + 1)|0;
   $322 = (($321) + ($$3477))|0;
   $$1526 = (($322) + ($294))|0;
   $323 = (($$1526) + ($$pn))|0;
   _pad_391($0,32,$2,$323,$4);
   _out($0,$$0521,$$0520);
   $324 = $4 ^ 65536;
   _pad_391($0,48,$2,$323,$324);
   if ($296) {
    $325 = ($$9$ph>>>0)>($$561>>>0);
    $$0496$$9 = $325 ? $$561 : $$9$ph;
    $326 = ((($8)) + 9|0);
    $327 = $326;
    $328 = ((($8)) + 8|0);
    $$5493600 = $$0496$$9;
    while(1) {
     $329 = HEAP32[$$5493600>>2]|0;
     $330 = (_fmt_u($329,0,$326)|0);
     $331 = ($$5493600|0)==($$0496$$9|0);
     if ($331) {
      $337 = ($330|0)==($326|0);
      if ($337) {
       HEAP8[$328>>0] = 48;
       $$1465 = $328;
      } else {
       $$1465 = $330;
      }
     } else {
      $332 = ($330>>>0)>($8>>>0);
      if ($332) {
       $333 = $330;
       $334 = (($333) - ($9))|0;
       _memset(($8|0),48,($334|0))|0;
       $$0464597 = $330;
       while(1) {
        $335 = ((($$0464597)) + -1|0);
        $336 = ($335>>>0)>($8>>>0);
        if ($336) {
         $$0464597 = $335;
        } else {
         $$1465 = $335;
         break;
        }
       }
      } else {
       $$1465 = $330;
      }
     }
     $338 = $$1465;
     $339 = (($327) - ($338))|0;
     _out($0,$$1465,$339);
     $340 = ((($$5493600)) + 4|0);
     $341 = ($340>>>0)>($$561>>>0);
     if ($341) {
      break;
     } else {
      $$5493600 = $340;
     }
    }
    $342 = ($292|0)==(0);
    if (!($342)) {
     _out($0,3887,1);
    }
    $343 = ($340>>>0)<($$7505>>>0);
    $344 = ($$3477|0)>(0);
    $345 = $343 & $344;
    if ($345) {
     $$4478593 = $$3477;$$6494592 = $340;
     while(1) {
      $346 = HEAP32[$$6494592>>2]|0;
      $347 = (_fmt_u($346,0,$326)|0);
      $348 = ($347>>>0)>($8>>>0);
      if ($348) {
       $349 = $347;
       $350 = (($349) - ($9))|0;
       _memset(($8|0),48,($350|0))|0;
       $$0463587 = $347;
       while(1) {
        $351 = ((($$0463587)) + -1|0);
        $352 = ($351>>>0)>($8>>>0);
        if ($352) {
         $$0463587 = $351;
        } else {
         $$0463$lcssa = $351;
         break;
        }
       }
      } else {
       $$0463$lcssa = $347;
      }
      $353 = ($$4478593|0)<(9);
      $354 = $353 ? $$4478593 : 9;
      _out($0,$$0463$lcssa,$354);
      $355 = ((($$6494592)) + 4|0);
      $356 = (($$4478593) + -9)|0;
      $357 = ($355>>>0)<($$7505>>>0);
      $358 = ($$4478593|0)>(9);
      $359 = $357 & $358;
      if ($359) {
       $$4478593 = $356;$$6494592 = $355;
      } else {
       $$4478$lcssa = $356;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $360 = (($$4478$lcssa) + 9)|0;
    _pad_391($0,48,$360,9,0);
   } else {
    $361 = ((($$9$ph)) + 4|0);
    $$7505$ = $$lcssa675 ? $$7505 : $361;
    $362 = ($$3477|0)>(-1);
    if ($362) {
     $363 = ((($8)) + 9|0);
     $364 = ($$pre$phi698Z2D|0)==(0);
     $365 = $363;
     $366 = (0 - ($9))|0;
     $367 = ((($8)) + 8|0);
     $$5605 = $$3477;$$7495604 = $$9$ph;
     while(1) {
      $368 = HEAP32[$$7495604>>2]|0;
      $369 = (_fmt_u($368,0,$363)|0);
      $370 = ($369|0)==($363|0);
      if ($370) {
       HEAP8[$367>>0] = 48;
       $$0 = $367;
      } else {
       $$0 = $369;
      }
      $371 = ($$7495604|0)==($$9$ph|0);
      do {
       if ($371) {
        $375 = ((($$0)) + 1|0);
        _out($0,$$0,1);
        $376 = ($$5605|0)<(1);
        $or$cond556 = $364 & $376;
        if ($or$cond556) {
         $$2 = $375;
         break;
        }
        _out($0,3887,1);
        $$2 = $375;
       } else {
        $372 = ($$0>>>0)>($8>>>0);
        if (!($372)) {
         $$2 = $$0;
         break;
        }
        $scevgep686 = (($$0) + ($366)|0);
        $scevgep686687 = $scevgep686;
        _memset(($8|0),48,($scevgep686687|0))|0;
        $$1601 = $$0;
        while(1) {
         $373 = ((($$1601)) + -1|0);
         $374 = ($373>>>0)>($8>>>0);
         if ($374) {
          $$1601 = $373;
         } else {
          $$2 = $373;
          break;
         }
        }
       }
      } while(0);
      $377 = $$2;
      $378 = (($365) - ($377))|0;
      $379 = ($$5605|0)>($378|0);
      $380 = $379 ? $378 : $$5605;
      _out($0,$$2,$380);
      $381 = (($$5605) - ($378))|0;
      $382 = ((($$7495604)) + 4|0);
      $383 = ($382>>>0)<($$7505$>>>0);
      $384 = ($381|0)>(-1);
      $385 = $383 & $384;
      if ($385) {
       $$5605 = $381;$$7495604 = $382;
      } else {
       $$5$lcssa = $381;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $386 = (($$5$lcssa) + 18)|0;
    _pad_391($0,48,$386,18,0);
    $387 = $11;
    $388 = $$2513;
    $389 = (($387) - ($388))|0;
    _out($0,$$2513,$389);
   }
   $390 = $4 ^ 8192;
   _pad_391($0,32,$2,$323,$390);
   $$sink560 = $323;
  }
 } while(0);
 $391 = ($$sink560|0)<($2|0);
 $$557 = $391 ? $2 : $$sink560;
 STACKTOP = sp;return ($$557|0);
}
function ___DOUBLE_BITS_392($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$038 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 7]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$038 = $1;
     while(1) {
      $21 = ($$038|0)==(0);
      if ($21) {
       $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
       break L10;
      }
      $22 = (($$038) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$038 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 7]($2,$0,$$038)|0);
     $29 = ($28>>>0)<($$038>>>0);
     if ($29) {
      $$1 = $28;
      break L5;
     }
     $30 = (($0) + ($$038)|0);
     $$042 = (($1) - ($$038))|0;
     $$pre47 = HEAP32[$9>>2]|0;
     $$139 = $$038;$$141 = $30;$$143 = $$042;$31 = $$pre47;
    } else {
     $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
    }
   } while(0);
   _memcpy(($31|0),($$141|0),($$143|0))|0;
   $32 = HEAP32[$9>>2]|0;
   $33 = (($32) + ($$143)|0);
   HEAP32[$9>>2] = $33;
   $34 = (($$139) + ($$143))|0;
   $$1 = $34;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $$ = $8 ? $2 : $7;
 $$cast = $6;
 _memcpy(($$cast|0),($1|0),($$|0))|0;
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($$)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function _isxdigit($0) {
 $0 = $0|0;
 var $$phitmp = 0, $1 = 0, $2 = 0, $3 = 0, $isdigit = 0, $isdigittmp = 0, $narrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($0) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $1 = $0 | 32;
 $2 = (($1) + -97)|0;
 $3 = ($2>>>0)<(6);
 $narrow = $isdigit | $3;
 $$phitmp = $narrow&1;
 return ($$phitmp|0);
}
function _snprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_vsnprintf($0,$1,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = (___lockfile($1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $20 = $0&255;
   $21 = $0 & 255;
   $22 = ((($1)) + 75|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($21|0)==($24|0);
   if ($25) {
    label = 10;
   } else {
    $26 = ((($1)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($1)) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27>>>0)<($29>>>0);
    if ($30) {
     $31 = ((($27)) + 1|0);
     HEAP32[$26>>2] = $31;
     HEAP8[$27>>0] = $20;
     $33 = $21;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $32 = (___overflow($1,$0)|0);
    $33 = $32;
   }
   ___unlockfile($1);
   $$0 = $33;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = $0&255;
   $8 = $0 & 255;
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($8|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $7;
     $$0 = $8;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 7]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 36|0;
 $1 = (___cxa_get_globals_fast()|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = ((($3)) + 80|0);
   $6 = ((($3)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if (!($16)) {
    HEAP32[$vararg_buffer7>>2] = 3212;
    _abort_message(3162,$vararg_buffer7);
    // unreachable;
   }
   $17 = ($9|0)==(1126902529);
   $18 = ($12|0)==(1129074247);
   $19 = $17 & $18;
   if ($19) {
    $20 = ((($3)) + 44|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $21;
   } else {
    $22 = $5;
   }
   HEAP32[$0>>2] = $22;
   $23 = HEAP32[$3>>2]|0;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[2]|0;
   $27 = ((($26)) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (FUNCTION_TABLE_iiii[$28 & 7](8,$23,$0)|0);
   if ($29) {
    $30 = HEAP32[$0>>2]|0;
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 1]($30)|0);
    HEAP32[$vararg_buffer>>2] = 3212;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $25;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $34;
    _abort_message(3076,$vararg_buffer);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer3>>2] = 3212;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $25;
    _abort_message(3121,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(3200,$vararg_buffer10);
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (_pthread_once((6044|0),(2|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[1512]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(3351,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function _abort_message($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[18]|0;
 (_vfprintf($2,$0,$1)|0);
 (_fputc(10,$2)|0);
 _abort();
 // unreachable;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $3 = sp;
 $4 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 if ($4) {
  $$2 = 1;
 } else {
  $5 = ($1|0)==(0|0);
  if ($5) {
   $$2 = 0;
  } else {
   $6 = (___dynamic_cast($1,32,16,0)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$2 = 0;
   } else {
    $8 = ((($3)) + 4|0);
    dest=$8; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$3>>2] = $6;
    $9 = ((($3)) + 8|0);
    HEAP32[$9>>2] = $0;
    $10 = ((($3)) + 12|0);
    HEAP32[$10>>2] = -1;
    $11 = ((($3)) + 48|0);
    HEAP32[$11>>2] = 1;
    $12 = HEAP32[$6>>2]|0;
    $13 = ((($12)) + 28|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$2>>2]|0;
    FUNCTION_TABLE_viiii[$14 & 3]($6,$3,$15,1);
    $16 = ((($3)) + 24|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(1);
    if ($18) {
     $19 = ((($3)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     HEAP32[$2>>2] = $20;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$2 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if ($9) {
    $10 = ((($1)) + 16|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==($2|0);
    if (!($12)) {
     $13 = ((($1)) + 20|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)==($2|0);
     if (!($15)) {
      $18 = ((($1)) + 32|0);
      HEAP32[$18>>2] = $3;
      HEAP32[$13>>2] = $2;
      $19 = ((($1)) + 40|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = (($20) + 1)|0;
      HEAP32[$19>>2] = $21;
      $22 = ((($1)) + 36|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ($23|0)==(1);
      if ($24) {
       $25 = ((($1)) + 24|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ($26|0)==(2);
       if ($27) {
        $28 = ((($1)) + 54|0);
        HEAP8[$28>>0] = 1;
       }
      }
      $29 = ((($1)) + 44|0);
      HEAP32[$29>>2] = 4;
      break;
     }
    }
    $16 = ($3|0)==(1);
    if ($16) {
     $17 = ((($1)) + 32|0);
     HEAP32[$17>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 }
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==($1|0);
 return ($3|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   HEAP32[$4>>2] = $2;
   $7 = ((($1)) + 24|0);
   HEAP32[$7>>2] = $3;
   $8 = ((($1)) + 36|0);
   HEAP32[$8>>2] = 1;
  } else {
   $9 = ($5|0)==($2|0);
   if (!($9)) {
    $13 = ((($1)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 1)|0;
    HEAP32[$13>>2] = $15;
    $16 = ((($1)) + 24|0);
    HEAP32[$16>>2] = 2;
    $17 = ((($1)) + 54|0);
    HEAP8[$17>>0] = 1;
    break;
   }
   $10 = ((($1)) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(2);
   if ($12) {
    HEAP32[$10>>2] = $3;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($2|0);
 if ($6) {
  $7 = ((($1)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(1);
  if (!($9)) {
   HEAP32[$7>>2] = $3;
  }
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 53|0);
 HEAP8[$5>>0] = 1;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==($3|0);
 do {
  if ($8) {
   $9 = ((($1)) + 52|0);
   HEAP8[$9>>0] = 1;
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    HEAP32[$10>>2] = $2;
    $13 = ((($1)) + 24|0);
    HEAP32[$13>>2] = $4;
    $14 = ((($1)) + 36|0);
    HEAP32[$14>>2] = 1;
    $15 = ((($1)) + 48|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(1);
    $18 = ($4|0)==(1);
    $or$cond = $17 & $18;
    if (!($or$cond)) {
     break;
    }
    $19 = ((($1)) + 54|0);
    HEAP8[$19>>0] = 1;
    break;
   }
   $20 = ($11|0)==($2|0);
   if (!($20)) {
    $30 = ((($1)) + 36|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31) + 1)|0;
    HEAP32[$30>>2] = $32;
    $33 = ((($1)) + 54|0);
    HEAP8[$33>>0] = 1;
    break;
   }
   $21 = ((($1)) + 24|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(2);
   if ($23) {
    HEAP32[$21>>2] = $4;
    $27 = $4;
   } else {
    $27 = $22;
   }
   $24 = ((($1)) + 48|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(1);
   $28 = ($27|0)==(1);
   $or$cond22 = $26 & $28;
   if ($or$cond22) {
    $29 = ((($1)) + 54|0);
    HEAP8[$29>>0] = 1;
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$33 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $or$cond30 = 0, $or$cond32 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + -8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($0) + ($7)|0);
 $9 = ((($5)) + -4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$4>>2] = $2;
 $11 = ((($4)) + 4|0);
 HEAP32[$11>>2] = $0;
 $12 = ((($4)) + 8|0);
 HEAP32[$12>>2] = $1;
 $13 = ((($4)) + 12|0);
 HEAP32[$13>>2] = $3;
 $14 = ((($4)) + 16|0);
 $15 = ((($4)) + 20|0);
 $16 = ((($4)) + 24|0);
 $17 = ((($4)) + 28|0);
 $18 = ((($4)) + 32|0);
 $19 = ((($4)) + 40|0);
 dest=$14; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$14+36>>1]=0|0;HEAP8[$14+38>>0]=0|0;
 $20 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10,$2,0)|0);
 L1: do {
  if ($20) {
   $21 = ((($4)) + 48|0);
   HEAP32[$21>>2] = 1;
   $22 = HEAP32[$10>>2]|0;
   $23 = ((($22)) + 20|0);
   $24 = HEAP32[$23>>2]|0;
   FUNCTION_TABLE_viiiiii[$24 & 3]($10,$4,$8,$8,1,0);
   $25 = HEAP32[$16>>2]|0;
   $26 = ($25|0)==(1);
   $$ = $26 ? $8 : 0;
   $$0 = $$;
  } else {
   $27 = ((($4)) + 36|0);
   $28 = HEAP32[$10>>2]|0;
   $29 = ((($28)) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   FUNCTION_TABLE_viiiii[$30 & 3]($10,$4,$8,1,0);
   $31 = HEAP32[$27>>2]|0;
   switch ($31|0) {
   case 0:  {
    $32 = HEAP32[$19>>2]|0;
    $33 = ($32|0)==(1);
    $34 = HEAP32[$17>>2]|0;
    $35 = ($34|0)==(1);
    $or$cond = $33 & $35;
    $36 = HEAP32[$18>>2]|0;
    $37 = ($36|0)==(1);
    $or$cond28 = $or$cond & $37;
    $38 = HEAP32[$15>>2]|0;
    $$33 = $or$cond28 ? $38 : 0;
    $$0 = $$33;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $$0 = 0;
    break L1;
   }
   }
   $39 = HEAP32[$16>>2]|0;
   $40 = ($39|0)==(1);
   if (!($40)) {
    $41 = HEAP32[$19>>2]|0;
    $42 = ($41|0)==(0);
    $43 = HEAP32[$17>>2]|0;
    $44 = ($43|0)==(1);
    $or$cond30 = $42 & $44;
    $45 = HEAP32[$18>>2]|0;
    $46 = ($45|0)==(1);
    $or$cond32 = $or$cond30 & $46;
    if (!($or$cond32)) {
     $$0 = 0;
     break;
    }
   }
   $47 = HEAP32[$14>>2]|0;
   $$0 = $47;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viiiiii[$13 & 3]($10,$1,$2,$3,$4,$5);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$037$off038 = 0, $$037$off039 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if (!($9)) {
    $43 = ((($0)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($45)) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    FUNCTION_TABLE_viiiii[$47 & 3]($44,$1,$2,$3,$4);
    break;
   }
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==($2|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==($2|0);
    if (!($15)) {
     $18 = ((($1)) + 32|0);
     HEAP32[$18>>2] = $3;
     $19 = ((($1)) + 44|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(4);
     if ($21) {
      break;
     }
     $22 = ((($1)) + 52|0);
     HEAP8[$22>>0] = 0;
     $23 = ((($1)) + 53|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($0)) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = HEAP32[$25>>2]|0;
     $27 = ((($26)) + 20|0);
     $28 = HEAP32[$27>>2]|0;
     FUNCTION_TABLE_viiiiii[$28 & 3]($25,$1,$2,$2,1,$4);
     $29 = HEAP8[$23>>0]|0;
     $30 = ($29<<24>>24)==(0);
     if ($30) {
      $$037$off038 = 4;
      label = 11;
     } else {
      $31 = HEAP8[$22>>0]|0;
      $32 = ($31<<24>>24)==(0);
      if ($32) {
       $$037$off038 = 3;
       label = 11;
      } else {
       $$037$off039 = 3;
      }
     }
     if ((label|0) == 11) {
      HEAP32[$13>>2] = $2;
      $33 = ((($1)) + 40|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (($34) + 1)|0;
      HEAP32[$33>>2] = $35;
      $36 = ((($1)) + 36|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($37|0)==(1);
      if ($38) {
       $39 = ((($1)) + 24|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = ($40|0)==(2);
       if ($41) {
        $42 = ((($1)) + 54|0);
        HEAP8[$42>>0] = 1;
        $$037$off039 = $$037$off038;
       } else {
        $$037$off039 = $$037$off038;
       }
      } else {
       $$037$off039 = $$037$off038;
      }
     }
     HEAP32[$19>>2] = $$037$off039;
     break;
    }
   }
   $16 = ($3|0)==(1);
   if ($16) {
    $17 = ((($1)) + 32|0);
    HEAP32[$17>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 } else {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viiii[$11 & 3]($8,$1,$2,$3);
 }
 return;
}
function __ZdlPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((6048|0),(6|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(3400,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 _free($0);
 $1 = HEAP32[1512]|0;
 $2 = (_pthread_setspecific(($1|0),(0|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 } else {
  _abort_message(3450,$vararg_buffer);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 48|0);
   $5 = $4;
   $6 = $5;
   $7 = HEAP32[$6>>2]|0;
   $8 = (($5) + 4)|0;
   $9 = $8;
   $10 = HEAP32[$9>>2]|0;
   $11 = $7 & -256;
   $12 = ($11|0)==(1126902528);
   $13 = ($10|0)==(1129074247);
   $14 = $12 & $13;
   if ($14) {
    $15 = ((($2)) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    __ZSt11__terminatePFvvE($16);
    // unreachable;
   }
  }
 }
 $17 = (__ZSt13get_terminatev()|0);
 __ZSt11__terminatePFvvE($17);
 // unreachable;
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 FUNCTION_TABLE_v[$0 & 3]();
 _abort_message(3503,$vararg_buffer);
 // unreachable;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZSt13get_terminatev() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[142]|0;
 $1 = (($0) + 0)|0;
 HEAP32[142] = $1;
 $2 = $0;
 return ($2|0);
}
function ___cxa_demangle($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$158 = 0, $$2 = 0, $$pr$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $or$cond = 0, $or$cond54 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4192|0;
 $4 = sp + 4176|0;
 $5 = sp;
 $6 = sp + 4112|0;
 $7 = ($0|0)==(0|0);
 if ($7) {
  label = 3;
 } else {
  $8 = ($1|0)!=(0|0);
  $9 = ($2|0)==(0|0);
  $or$cond = $8 & $9;
  if ($or$cond) {
   label = 3;
  } else {
   if ($8) {
    $11 = HEAP32[$2>>2]|0;
    $62 = $11;
   } else {
    $62 = 0;
   }
   __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EEC2Ev($5);
   __ZN10__cxxabiv112_GLOBAL__N_12DbC2ILj4096EEERNS0_5arenaIXT_EEE($6,$5);
   $12 = ((($6)) + 48|0);
   $13 = ((($6)) + 61|0);
   ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;HEAP8[$12+12>>0]=0|0;
   HEAP8[$13>>0] = 1;
   $14 = ((($6)) + 32|0);
   $15 = ((($6)) + 36|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($6)) + 40|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16>>>0)<($18>>>0);
   if ($19) {
    __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE($4,$5);
    HEAP32[$16>>2] = 0;
    $20 = ((($16)) + 4|0);
    HEAP32[$20>>2] = 0;
    $21 = ((($16)) + 8|0);
    $22 = HEAP32[$4>>2]|0;
    HEAP32[$21>>2] = 0;
    $23 = ((($16)) + 12|0);
    HEAP32[$23>>2] = $22;
    $24 = HEAP32[$15>>2]|0;
    $25 = ((($24)) + 16|0);
    HEAP32[$15>>2] = $25;
   } else {
    __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE24__emplace_back_slow_pathIJRNS2_5arenaILj4096EEEEEEvDpOT_($14,$5);
   }
   $26 = ((($6)) + 62|0);
   HEAP8[$26>>0] = 0;
   $27 = ((($6)) + 63|0);
   HEAP8[$27>>0] = 1;
   HEAP32[$4>>2] = 0;
   $28 = (_strlen($0)|0);
   $29 = (($0) + ($28)|0);
   __ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri($0,$29,$6,$4);
   $30 = HEAP32[$4>>2]|0;
   $31 = ($30|0)!=(0);
   $32 = HEAP8[$26>>0]|0;
   $33 = ($32<<24>>24)==(0);
   $or$cond54 = $31 | $33;
   do {
    if ($or$cond54) {
     $54 = $30;
     label = 22;
    } else {
     $34 = HEAP32[$14>>2]|0;
     $35 = HEAP32[$15>>2]|0;
     $36 = ($34|0)==($35|0);
     if ($36) {
      label = 23;
     } else {
      $37 = HEAP32[$34>>2]|0;
      $38 = ((($34)) + 4|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       label = 23;
      } else {
       HEAP8[$26>>0] = 0;
       HEAP8[$13>>0] = 0;
       $41 = HEAP32[$6>>2]|0;
       $42 = ((($6)) + 4|0);
       while(1) {
        $43 = HEAP32[$42>>2]|0;
        $44 = ($43|0)==($41|0);
        if ($44) {
         break;
        }
        $45 = ((($43)) + -24|0);
        HEAP32[$42>>2] = $45;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($45);
       }
       $46 = ((($6)) + 16|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = ((($6)) + 20|0);
       while(1) {
        $49 = HEAP32[$48>>2]|0;
        $50 = ($49|0)==($47|0);
        if ($50) {
         break;
        }
        $51 = ((($49)) + -16|0);
        HEAP32[$48>>2] = $51;
        __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($51);
       }
       __ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri($0,$29,$6,$4);
       $52 = HEAP8[$26>>0]|0;
       $53 = ($52<<24>>24)==(0);
       if ($53) {
        $$pr$pre = HEAP32[$4>>2]|0;
        $54 = $$pr$pre;
        label = 22;
        break;
       } else {
        HEAP32[$4>>2] = -2;
        $$2 = 0;$87 = -2;
        break;
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 22) {
    $55 = ($54|0)==(0);
    if ($55) {
     label = 23;
    } else {
     $$2 = 0;$87 = $54;
    }
   }
   do {
    if ((label|0) == 23) {
     $56 = ((($6)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ((($57)) + -24|0);
     $59 = (__ZNK10__cxxabiv112_GLOBAL__N_111string_pair4sizeEv($58)|0);
     $60 = (($59) + 1)|0;
     $61 = ($60>>>0)>($62>>>0);
     if ($61) {
      $63 = (_realloc($1,$60)|0);
      $64 = ($63|0)==(0|0);
      if ($64) {
       HEAP32[$4>>2] = -1;
       $$2 = 0;$87 = -1;
       break;
      }
      if ($9) {
       $$158 = $63;
      } else {
       HEAP32[$2>>2] = $60;
       $$158 = $63;
      }
     } else {
      $65 = ($1|0)==(0|0);
      if ($65) {
       $$2 = 0;$87 = 0;
       break;
      } else {
       $$158 = $1;
      }
     }
     $66 = HEAP32[$56>>2]|0;
     $67 = ((($66)) + -12|0);
     $68 = ((($66)) + -24|0);
     $69 = ((($67)) + 11|0);
     $70 = HEAP8[$69>>0]|0;
     $71 = ($70<<24>>24)<(0);
     $72 = HEAP32[$67>>2]|0;
     $73 = ((($66)) + -8|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = $70&255;
     $76 = $71 ? $72 : $67;
     $77 = $71 ? $74 : $75;
     (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($68,$76,$77)|0);
     $78 = HEAP32[$56>>2]|0;
     $79 = ((($78)) + -24|0);
     $80 = ((($79)) + 11|0);
     $81 = HEAP8[$80>>0]|0;
     $82 = ($81<<24>>24)<(0);
     if ($82) {
      $83 = HEAP32[$79>>2]|0;
      $84 = $83;
     } else {
      $84 = $79;
     }
     _memcpy(($$158|0),($84|0),($59|0))|0;
     $85 = (($$158) + ($59)|0);
     HEAP8[$85>>0] = 0;
     $$2 = $$158;$87 = 0;
    }
   } while(0);
   $86 = ($3|0)==(0|0);
   if (!($86)) {
    HEAP32[$3>>2] = $87;
   }
   __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev($6);
   __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EED2Ev($5);
   $$0 = $$2;
  }
 }
 if ((label|0) == 3) {
  $10 = ($3|0)==(0|0);
  if ($10) {
   $$0 = 0;
  } else {
   HEAP32[$3>>2] = -3;
   $$0 = 0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EEC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4096|0);
 HEAP32[$1>>2] = $0;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_12DbC2ILj4096EEERNS0_5arenaIXT_EEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EEC2ERNS0_5arenaILj4096EEE($2,$1);
 HEAP32[$0>>2] = 0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$2>>2]|0;
 HEAP32[$4>>2] = 0;
 $6 = ((($0)) + 12|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($0)) + 16|0);
 __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE($2,$1);
 __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEC2EjRKS6_RKS7_($7,$2);
 $8 = ((($0)) + 32|0);
 __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE($2,$1);
 __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEEC2EjRKS8_RKS9_($8,$2);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 return;
}
function __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE24__emplace_back_slow_pathIJRNS2_5arenaILj4096EEEEEEvDpOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp + 20|0;
 $3 = sp;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 4;
 $9 = (($8) + 1)|0;
 $10 = (__ZNKSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE8max_sizeEv($0)|0);
 $11 = ($10>>>0)<($9>>>0);
 if ($11) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $12 = ((($0)) + 12|0);
  $13 = ((($0)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$0>>2]|0;
  $16 = (($14) - ($15))|0;
  $17 = $16 >> 4;
  $18 = $10 >>> 1;
  $19 = ($17>>>0)<($18>>>0);
  $20 = $16 >> 3;
  $21 = ($20>>>0)<($9>>>0);
  $$sroa$speculated$i = $21 ? $9 : $20;
  $$sroa$speculated$$i = $19 ? $$sroa$speculated$i : $10;
  $22 = HEAP32[$4>>2]|0;
  $23 = (($22) - ($15))|0;
  $24 = $23 >> 4;
  __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_($3,$$sroa$speculated$$i,$24,$12);
  $25 = ((($3)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE($2,$1);
  HEAP32[$26>>2] = 0;
  $27 = ((($26)) + 4|0);
  HEAP32[$27>>2] = 0;
  $28 = ((($26)) + 8|0);
  $29 = HEAP32[$2>>2]|0;
  HEAP32[$28>>2] = 0;
  $30 = ((($26)) + 12|0);
  HEAP32[$30>>2] = $29;
  $31 = ((($26)) + 16|0);
  HEAP32[$25>>2] = $31;
  __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($0,$3);
  __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond56 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0>>>0)<($1>>>0);
 L1: do {
  if ($4) {
   $5 = HEAP8[$0>>0]|0;
   $6 = ($5<<24>>24)==(95);
   L3: do {
    if ($6) {
     $7 = $1;
     $8 = $0;
     $9 = (($7) - ($8))|0;
     $10 = ($9|0)>(3);
     if (!($10)) {
      HEAP32[$3>>2] = -2;
      break L1;
     }
     $11 = ((($0)) + 1|0);
     $12 = HEAP8[$11>>0]|0;
     switch ($12<<24>>24) {
     case 90:  {
      $13 = ((($0)) + 2|0);
      $14 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($13,$1,$2)|0);
      $15 = ($14|0)==($13|0);
      $16 = ($14|0)==($1|0);
      $or$cond = $15 | $16;
      if ($or$cond) {
       $$0 = $14;
      } else {
       $17 = HEAP8[$14>>0]|0;
       $18 = ($17<<24>>24)==(46);
       if ($18) {
        $19 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_dot_suffixINS0_2DbEEEPKcS4_S4_RT_($14,$1,$2)|0);
        $$0 = $19;
       } else {
        $$0 = $14;
       }
      }
      $20 = ($$0|0)==($1|0);
      if ($20) {
       break L3;
      }
      HEAP32[$3>>2] = -2;
      break L1;
      break;
     }
     case 95:  {
      $21 = ((($0)) + 2|0);
      $22 = HEAP8[$21>>0]|0;
      $23 = ($22<<24>>24)==(95);
      if ($23) {
       $24 = ((($0)) + 3|0);
       $25 = HEAP8[$24>>0]|0;
       $26 = ($25<<24>>24)==(90);
       if ($26) {
        $27 = ((($0)) + 4|0);
        $28 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($27,$1,$2)|0);
        $29 = ($28|0)==($27|0);
        $30 = ($28|0)==($1|0);
        $or$cond56 = $29 | $30;
        if (!($or$cond56)) {
         $31 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_block_invokeINS0_2DbEEEPKcS4_S4_RT_($28,$1,$2)|0);
         $32 = ($31|0)==($1|0);
         if ($32) {
          break L3;
         }
        }
        HEAP32[$3>>2] = -2;
        break L1;
       }
      }
      break;
     }
     default: {
     }
     }
     HEAP32[$3>>2] = -2;
     break L1;
    } else {
     $33 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
     $34 = ($33|0)==($1|0);
     if (!($34)) {
      HEAP32[$3>>2] = -2;
      break L1;
     }
    }
   } while(0);
   $$pr = HEAP32[$3>>2]|0;
   $35 = ($$pr|0)==(0);
   if ($35) {
    $36 = HEAP32[$2>>2]|0;
    $37 = ((($2)) + 4|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($36|0)==($38|0);
    if ($39) {
     HEAP32[$3>>2] = -2;
    }
   }
  } else {
   HEAP32[$3>>2] = -2;
  }
 } while(0);
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
 return;
}
function __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($0) {
 $0 = $0|0;
 var $$cast = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($0)) + 4|0);
  while(1) {
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($1|0);
   if ($5) {
    break;
   }
   $6 = ((($4)) + -24|0);
   HEAP32[$3>>2] = $6;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
  }
  $7 = ((($0)) + 12|0);
  $8 = HEAP32[$0>>2]|0;
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $$cast = $8;
  $11 = (($10) - ($$cast))|0;
  $12 = (($11|0) / 24)&-1;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE10deallocateEPS2_j($7,$8,$12);
 }
 return;
}
function __ZNK10__cxxabiv112_GLOBAL__N_111string_pair4sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)<(0);
 if ($3) {
  $4 = ((($0)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $15 = $5;
 } else {
  $6 = $2&255;
  $15 = $6;
 }
 $7 = ((($0)) + 12|0);
 $8 = ((($7)) + 11|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)<(0);
 if ($10) {
  $11 = ((($0)) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $16 = $12;
 } else {
  $13 = $9&255;
  $16 = $13;
 }
 $14 = (($16) + ($15))|0;
 return ($14|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 2147483647;
  $phitmp$i = (($9) + -1)|0;
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;$15 = $phitmp$i;
 } else {
  $12 = $5&255;
  $14 = $12;$15 = 10;
 }
 $13 = (($15) - ($14))|0;
 $16 = ($13>>>0)<($2>>>0);
 if ($16) {
  $27 = (($2) - ($15))|0;
  $28 = (($27) + ($14))|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$15,$28,$14,$14,0,$2,$1);
 } else {
  $17 = ($2|0)==(0);
  if (!($17)) {
   if ($6) {
    $18 = HEAP32[$0>>2]|0;
    $20 = $18;
   } else {
    $20 = $0;
   }
   $19 = (($20) + ($14)|0);
   (__ZNSt3__211char_traitsIcE4copyEPcPKcj($19,$1,$2)|0);
   $21 = (($14) + ($2))|0;
   $22 = HEAP8[$4>>0]|0;
   $23 = ($22<<24>>24)<(0);
   if ($23) {
    $24 = ((($0)) + 4|0);
    HEAP32[$24>>2] = $21;
   } else {
    $25 = $21&255;
    HEAP8[$4>>0] = $25;
   }
   $26 = (($20) + ($21)|0);
   HEAP8[$3>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($26,$3);
  }
 }
 STACKTOP = sp;return ($0|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 __ZNSt3__213__vector_baseINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEENS5_IS9_Lj4096EEEED2Ev($1);
 $2 = ((($0)) + 16|0);
 __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($2);
 __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($0);
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4096|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNSt3__213__vector_baseINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEENS5_IS9_Lj4096EEEED2Ev($0) {
 $0 = $0|0;
 var $$cast = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($0)) + 4|0);
  while(1) {
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($1|0);
   if ($5) {
    break;
   }
   $6 = ((($4)) + -16|0);
   HEAP32[$3>>2] = $6;
   __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($6);
  }
  $7 = ((($0)) + 12|0);
  $8 = HEAP32[$0>>2]|0;
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $$cast = $8;
  $11 = (($10) - ($$cast))|0;
  $12 = $11 >> 4;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EE10deallocateEPS8_j($7,$8,$12);
 }
 return;
}
function __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($0) {
 $0 = $0|0;
 var $$cast = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($0)) + 4|0);
  while(1) {
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($1|0);
   if ($5) {
    break;
   }
   $6 = ((($4)) + -16|0);
   HEAP32[$3>>2] = $6;
   __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($6);
  }
  $7 = ((($0)) + 12|0);
  $8 = HEAP32[$0>>2]|0;
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $$cast = $8;
  $11 = (($10) - ($$cast))|0;
  $12 = $11 >> 4;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EE10deallocateEPS6_j($7,$8,$12);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EE10deallocateEPS6_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $2 << 4;
 __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($3,$1,$4);
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE17pointer_in_bufferEPc($0,$1)|0);
 if ($3) {
  $4 = (__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8align_upEj($2)|0);
  $5 = (($1) + ($4)|0);
  $6 = ((($0)) + 4096|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)==($7|0);
  if ($8) {
   HEAP32[$6>>2] = $1;
  }
 } else {
  _free($1);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE17pointer_in_bufferEPc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0>>>0)<=($1>>>0);
 $3 = ((($0)) + 4096|0);
 $4 = ($3>>>0)>=($1>>>0);
 $5 = $2 & $4;
 return ($5|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8align_upEj($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + 15)|0;
 $2 = $1 & -16;
 return ($2|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EE10deallocateEPS8_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $2 << 4;
 __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($3,$1,$4);
 return;
}
function __ZNSt3__211char_traitsIcE4copyEPcPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _memcpy(($0|0),($1|0),($2|0))|0;
 }
 return ($0|0);
}
function __ZNSt3__211char_traitsIcE6assignERcRKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 HEAP8[$0>>0] = $2;
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $8 = sp;
 $9 = (-18 - ($1))|0;
 $10 = ($9>>>0)<($2>>>0);
 if ($10) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $11 = ((($0)) + 11|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)<(0);
 if ($13) {
  $14 = HEAP32[$0>>2]|0;
  $25 = $14;
 } else {
  $25 = $0;
 }
 $15 = ($1>>>0)<(2147483623);
 if ($15) {
  $16 = (($2) + ($1))|0;
  $17 = $1 << 1;
  $18 = ($16>>>0)<($17>>>0);
  $$sroa$speculated = $18 ? $17 : $16;
  $19 = ($$sroa$speculated>>>0)<(11);
  $20 = (($$sroa$speculated) + 16)|0;
  $21 = $20 & -16;
  $phitmp = $19 ? 11 : $21;
  $22 = $phitmp;
 } else {
  $22 = -17;
 }
 $23 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($22)|0);
 $24 = ($4|0)==(0);
 if (!($24)) {
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($23,$25,$4)|0);
 }
 $26 = ($6|0)==(0);
 if (!($26)) {
  $27 = (($23) + ($4)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($27,$7,$6)|0);
 }
 $28 = (($3) - ($5))|0;
 $29 = (($28) - ($4))|0;
 $30 = ($29|0)==(0);
 if (!($30)) {
  $31 = (($23) + ($4)|0);
  $32 = (($31) + ($6)|0);
  $33 = (($25) + ($4)|0);
  $34 = (($33) + ($5)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($32,$34,$29)|0);
 }
 $35 = ($1|0)==(10);
 if (!($35)) {
  __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj($25);
 }
 HEAP32[$0>>2] = $23;
 $36 = $22 | -2147483648;
 $37 = ((($0)) + 8|0);
 HEAP32[$37>>2] = $36;
 $38 = (($28) + ($6))|0;
 $39 = ((($0)) + 4|0);
 HEAP32[$39>>2] = $38;
 $40 = (($23) + ($38)|0);
 HEAP8[$8>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($40,$8);
 STACKTOP = sp;return;
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_malloc($0)|0);
 return ($1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE10deallocateEPS2_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($2*24)|0;
 __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($3,$1,$4);
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)<(0);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj($4);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i191 = 0, $$0$i$i196 = 0, $$0132 = 0, $$0141$off0$ph = 0, $$0168 = 0, $$11 = 0, $$1135 = 0, $$1169 = 0, $$1169$ph = 0, $$2136 = 0, $$3144$off0$ph = 0, $$3171 = 0, $$4158 = 0, $$5139 = 0, $$6140 = 0, $$6160 = 0, $$in = 0;
 var $$in205 = 0, $$pre = 0, $$pre$i = 0, $$pre$i187 = 0, $$pre240 = 0, $$pre241 = 0, $$pre242 = 0, $$pre243 = 0, $$pre244 = 0, $$pre245 = 0, $$pre246 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i192 = 0, $exitcond$i$i197 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $3 = sp + 48|0;
 $4 = sp + 40|0;
 $5 = sp + 32|0;
 $6 = sp + 24|0;
 $7 = sp + 12|0;
 $8 = sp;
 $9 = ($0|0)==($1|0);
 if ($9) {
  $$6140 = $0;
  label = 88;
 } else {
  $10 = ((($2)) + 56|0);
  __ZN10__cxxabiv112_GLOBAL__N_110save_valueIjEC2ERj($4,$10);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 1)|0;
  HEAP32[$10>>2] = $12;
  $13 = ((($2)) + 61|0);
  __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbEC2ERb($5,$13);
  $14 = HEAP32[$10>>2]|0;
  $15 = ($14>>>0)>(1);
  if ($15) {
   HEAP8[$13>>0] = 1;
  }
  $16 = HEAP8[$0>>0]|0;
  $17 = $16 << 24 >> 24;
  L6: do {
   switch ($17|0) {
   case 84: case 71:  {
    $18 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_special_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
    $$5139 = $18;$$6160 = 1;
    break;
   }
   default: {
    $19 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
    $20 = ((($2)) + 48|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ((($2)) + 52|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($19|0)==($0|0);
    L8: do {
     if ($24) {
      $$2136 = $0;
     } else {
      $25 = ($19|0)==($1|0);
      if ($25) {
       $$2136 = $1;
      } else {
       $26 = HEAP8[$19>>0]|0;
       switch ($26<<24>>24) {
       case 46: case 69:  {
        $$2136 = $19;
        break L8;
        break;
       }
       default: {
       }
       }
       __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbEC2ERb($6,$13);
       HEAP8[$13>>0] = 0;
       ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
       $$0$i$i196 = 0;
       while(1) {
        $exitcond$i$i197 = ($$0$i$i196|0)==(3);
        if ($exitcond$i$i197) {
         break;
        }
        $27 = (($7) + ($$0$i$i196<<2)|0);
        HEAP32[$27>>2] = 0;
        $28 = (($$0$i$i196) + 1)|0;
        $$0$i$i196 = $28;
       }
       $29 = HEAP32[$2>>2]|0;
       $30 = ((($2)) + 4|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = ($29|0)==($31|0);
       L16: do {
        if ($32) {
         $$1135 = $0;$$4158 = 0;
        } else {
         $33 = ((($31)) + -24|0);
         $34 = ((($33)) + 11|0);
         $35 = HEAP8[$34>>0]|0;
         $36 = ($35<<24>>24)<(0);
         if ($36) {
          $37 = ((($31)) + -20|0);
          $38 = HEAP32[$37>>2]|0;
          $40 = $38;
         } else {
          $39 = $35&255;
          $40 = $39;
         }
         $41 = ($40|0)==(0);
         if ($41) {
          $$1135 = $0;$$4158 = 0;
         } else {
          $42 = ((($2)) + 60|0);
          $43 = HEAP8[$42>>0]|0;
          $44 = ($43<<24>>24)==(0);
          if ($44) {
           if ($36) {
            $45 = HEAP32[$33>>2]|0;
            $46 = ((($31)) + -20|0);
            $47 = HEAP32[$46>>2]|0;
            $50 = $45;$51 = $47;
           } else {
            $48 = $35&255;
            $50 = $33;$51 = $48;
           }
           $49 = (($50) + ($51)|0);
           $52 = ((($49)) + -1|0);
           $53 = HEAP8[$52>>0]|0;
           $54 = ($53<<24>>24)==(62);
           if ($54) {
            if ($36) {
             $55 = ((($31)) + -20|0);
             $56 = HEAP32[$55>>2]|0;
             $57 = HEAP32[$33>>2]|0;
             $$in = $56;$61 = $57;
            } else {
             $58 = $35&255;
             $$in = $58;$61 = $33;
            }
            $59 = (($$in) + -2)|0;
            $60 = (($61) + ($59)|0);
            $62 = HEAP8[$60>>0]|0;
            $63 = ($62<<24>>24)==(45);
            if ($63) {
             $$0168 = $19;$115 = $31;
            } else {
             if ($36) {
              $64 = ((($31)) + -20|0);
              $65 = HEAP32[$64>>2]|0;
              $66 = HEAP32[$33>>2]|0;
              $$in205 = $65;$70 = $66;
             } else {
              $67 = $35&255;
              $$in205 = $67;$70 = $33;
             }
             $68 = (($$in205) + -2)|0;
             $69 = (($70) + ($68)|0);
             $71 = HEAP8[$69>>0]|0;
             $72 = ($71<<24>>24)==(62);
             if ($72) {
              $$0168 = $19;$115 = $31;
             } else {
              $73 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($19,$1,$2)|0);
              $74 = ($73|0)==($19|0);
              if ($74) {
               $$1135 = $0;$$4158 = 0;
               break;
              }
              $75 = HEAP32[$30>>2]|0;
              $76 = HEAP32[$2>>2]|0;
              $77 = (($75) - ($76))|0;
              $78 = (($77|0) / 24)&-1;
              $79 = ($78>>>0)<(2);
              $80 = $75;
              if ($79) {
               $$1135 = $0;$$4158 = 0;
               break;
              }
              $81 = ((($80)) + -24|0);
              ;HEAP32[$8>>2]=HEAP32[$81>>2]|0;HEAP32[$8+4>>2]=HEAP32[$81+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$81+8>>2]|0;
              $$0$i$i191 = 0;
              while(1) {
               $exitcond$i$i192 = ($$0$i$i191|0)==(3);
               if ($exitcond$i$i192) {
                break;
               }
               $82 = (($81) + ($$0$i$i191<<2)|0);
               HEAP32[$82>>2] = 0;
               $83 = (($$0$i$i191) + 1)|0;
               $$0$i$i191 = $83;
              }
              $84 = ((($80)) + -12|0);
              $85 = ((($7)) + 11|0);
              $86 = HEAP8[$85>>0]|0;
              $87 = ($86<<24>>24)<(0);
              if ($87) {
               $88 = HEAP32[$7>>2]|0;
               HEAP8[$3>>0] = 0;
               __ZNSt3__211char_traitsIcE6assignERcRKc($88,$3);
               $89 = ((($7)) + 4|0);
               HEAP32[$89>>2] = 0;
              } else {
               HEAP8[$3>>0] = 0;
               __ZNSt3__211char_traitsIcE6assignERcRKc($7,$3);
               HEAP8[$85>>0] = 0;
              }
              __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($7);
              ;HEAP32[$7>>2]=HEAP32[$84>>2]|0;HEAP32[$7+4>>2]=HEAP32[$84+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$84+8>>2]|0;
              $$0$i$i$i$i = 0;
              while(1) {
               $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
               if ($exitcond$i$i$i$i) {
                break;
               }
               $90 = (($84) + ($$0$i$i$i$i<<2)|0);
               HEAP32[$90>>2] = 0;
               $91 = (($$0$i$i$i$i) + 1)|0;
               $$0$i$i$i$i = $91;
              }
              $92 = HEAP8[$85>>0]|0;
              $93 = ($92<<24>>24)<(0);
              $94 = ((($7)) + 4|0);
              $95 = HEAP32[$94>>2]|0;
              $96 = $92&255;
              $97 = $93 ? $95 : $96;
              $98 = ($97|0)==(0);
              if ($98) {
               __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($8,32);
              }
              $99 = HEAP32[$30>>2]|0;
              $100 = ((($99)) + -24|0);
              $101 = $99;
              while(1) {
               $102 = ($101|0)==($100|0);
               if ($102) {
                break;
               }
               $103 = ((($101)) + -24|0);
               HEAP32[$30>>2] = $103;
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($103);
               $$pre$i187 = HEAP32[$30>>2]|0;
               $101 = $$pre$i187;
              }
              $104 = ((($99)) + -48|0);
              $105 = ((($8)) + 11|0);
              $106 = HEAP8[$105>>0]|0;
              $107 = ($106<<24>>24)<(0);
              $108 = HEAP32[$8>>2]|0;
              $109 = ((($8)) + 4|0);
              $110 = HEAP32[$109>>2]|0;
              $111 = $106&255;
              $112 = $107 ? $108 : $8;
              $113 = $107 ? $110 : $111;
              (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($104,0,$112,$113)|0);
              __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
              $$pre = HEAP32[$30>>2]|0;
              $$0168 = $73;$115 = $$pre;
             }
            }
           } else {
            $$0168 = $19;$115 = $31;
           }
          } else {
           $$0168 = $19;$115 = $31;
          }
          $114 = ((($115)) + -24|0);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($114,40);
          $116 = ($$0168|0)==($1|0);
          if ($116) {
           label = 49;
          } else {
           $117 = HEAP8[$$0168>>0]|0;
           $118 = ($117<<24>>24)==(118);
           if ($118) {
            $123 = ((($$0168)) + 1|0);
            $$pre245 = HEAP32[$2>>2]|0;
            $$pre246 = HEAP32[$30>>2]|0;
            $$3171 = $123;$182 = $$pre245;$184 = $$pre246;
           } else {
            label = 49;
           }
          }
          do {
           if ((label|0) == 49) {
            $119 = ((($3)) + 11|0);
            $120 = ((($3)) + 4|0);
            $121 = ((($8)) + 11|0);
            $122 = ((($8)) + 4|0);
            $$0141$off0$ph = 1;$$1169$ph = $$0168;
            L67: while(1) {
             $$pre240 = HEAP32[$30>>2]|0;
             $$pre241 = HEAP32[$2>>2]|0;
             $$1169 = $$1169$ph;$125 = $$pre241;$126 = $$pre240;
             while(1) {
              $124 = (($126) - ($125))|0;
              $127 = (($124|0) / 24)&-1;
              $128 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($$1169,$1,$2)|0);
              $129 = HEAP32[$30>>2]|0;
              $130 = HEAP32[$2>>2]|0;
              $131 = (($129) - ($130))|0;
              $132 = (($131|0) / 24)&-1;
              $133 = ($128|0)==($$1169|0);
              if ($133) {
               label = 72;
               break L67;
              }
              $134 = ($132>>>0)>($127>>>0);
              if ($134) {
               break;
              } else {
               $$1169 = $128;$125 = $130;$126 = $129;
              }
             }
             ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
             $$0$i$i = 0;
             while(1) {
              $exitcond$i$i = ($$0$i$i|0)==(3);
              if ($exitcond$i$i) {
               $$0132 = $127;
               break;
              }
              $135 = (($3) + ($$0$i$i<<2)|0);
              HEAP32[$135>>2] = 0;
              $136 = (($$0$i$i) + 1)|0;
              $$0$i$i = $136;
             }
             while(1) {
              $137 = ($$0132>>>0)<($132>>>0);
              if (!($137)) {
               $$0 = $127;
               break;
              }
              $138 = HEAP8[$119>>0]|0;
              $139 = ($138<<24>>24)<(0);
              $140 = HEAP32[$120>>2]|0;
              $141 = $138&255;
              $142 = $139 ? $140 : $141;
              $143 = ($142|0)==(0);
              if (!($143)) {
               (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3,3820)|0);
              }
              $144 = HEAP32[$2>>2]|0;
              $145 = (($144) + (($$0132*24)|0)|0);
              __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($8,$145);
              $146 = HEAP8[$121>>0]|0;
              $147 = ($146<<24>>24)<(0);
              $148 = HEAP32[$8>>2]|0;
              $149 = HEAP32[$122>>2]|0;
              $150 = $146&255;
              $151 = $147 ? $148 : $8;
              $152 = $147 ? $149 : $150;
              (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($3,$151,$152)|0);
              __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
              $153 = (($$0132) + 1)|0;
              $$0132 = $153;
             }
             while(1) {
              $154 = ($$0>>>0)<($132>>>0);
              if (!($154)) {
               break;
              }
              $161 = HEAP32[$30>>2]|0;
              $162 = ((($161)) + -24|0);
              $163 = $161;
              while(1) {
               $164 = ($163|0)==($162|0);
               if ($164) {
                break;
               }
               $165 = ((($163)) + -24|0);
               HEAP32[$30>>2] = $165;
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($165);
               $$pre$i = HEAP32[$30>>2]|0;
               $163 = $$pre$i;
              }
              $166 = (($$0) + 1)|0;
              $$0 = $166;
             }
             $155 = HEAP8[$119>>0]|0;
             $156 = ($155<<24>>24)<(0);
             $157 = HEAP32[$120>>2]|0;
             $158 = $155&255;
             $159 = $156 ? $157 : $158;
             $160 = ($159|0)==(0);
             if ($160) {
              $$3144$off0$ph = $$0141$off0$ph;
             } else {
              $167 = HEAP32[$2>>2]|0;
              $168 = HEAP32[$30>>2]|0;
              $169 = ($167|0)==($168|0);
              if ($169) {
               label = 84;
               break;
              }
              if ($$0141$off0$ph) {
               $172 = $168;$173 = $155;$178 = $157;
              } else {
               $170 = ((($168)) + -24|0);
               (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($170,3820)|0);
               $$pre242 = HEAP32[$30>>2]|0;
               $$pre243 = HEAP8[$119>>0]|0;
               $$pre244 = HEAP32[$120>>2]|0;
               $172 = $$pre242;$173 = $$pre243;$178 = $$pre244;
              }
              $171 = ((($172)) + -24|0);
              $174 = ($173<<24>>24)<(0);
              $175 = HEAP32[$3>>2]|0;
              $176 = $173&255;
              $177 = $174 ? $175 : $3;
              $179 = $174 ? $178 : $176;
              (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($171,$177,$179)|0);
              $$3144$off0$ph = 0;
             }
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
             $$0141$off0$ph = $$3144$off0$ph;$$1169$ph = $128;
            }
            if ((label|0) == 72) {
             $180 = $129;
             $181 = $130;
             $$3171 = $$1169;$182 = $181;$184 = $180;
             break;
            }
            else if ((label|0) == 84) {
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
             $$1135 = $0;$$4158 = 0;
             break L16;
            }
           }
          } while(0);
          $183 = ($182|0)==($184|0);
          if ($183) {
           $$1135 = $0;$$4158 = 0;
          } else {
           $185 = ((($184)) + -24|0);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($185,41);
           $186 = $21 & 1;
           $187 = ($186|0)==(0);
           if (!($187)) {
            $188 = HEAP32[$30>>2]|0;
            $189 = ((($188)) + -24|0);
            (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($189,3543)|0);
           }
           $190 = $21 & 2;
           $191 = ($190|0)==(0);
           if (!($191)) {
            $192 = HEAP32[$30>>2]|0;
            $193 = ((($192)) + -24|0);
            (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($193,3550)|0);
           }
           $194 = $21 & 4;
           $195 = ($194|0)==(0);
           if (!($195)) {
            $196 = HEAP32[$30>>2]|0;
            $197 = ((($196)) + -24|0);
            (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($197,3560)|0);
           }
           switch ($23|0) {
           case 1:  {
            $198 = HEAP32[$30>>2]|0;
            $199 = ((($198)) + -24|0);
            (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($199,5024)|0);
            break;
           }
           case 2:  {
            $200 = HEAP32[$30>>2]|0;
            $201 = ((($200)) + -24|0);
            (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($201,5027)|0);
            break;
           }
           default: {
           }
           }
           $202 = HEAP32[$30>>2]|0;
           $203 = ((($202)) + -24|0);
           $204 = ((($7)) + 11|0);
           $205 = HEAP8[$204>>0]|0;
           $206 = ($205<<24>>24)<(0);
           $207 = HEAP32[$7>>2]|0;
           $208 = ((($7)) + 4|0);
           $209 = HEAP32[$208>>2]|0;
           $210 = $205&255;
           $211 = $206 ? $207 : $7;
           $212 = $206 ? $209 : $210;
           (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($203,$211,$212)|0);
           $$1135 = $$3171;$$4158 = 1;
          }
         }
        }
       } while(0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
       __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbED2Ev($6);
       if ($$4158) {
        $$2136 = $$1135;
       } else {
        $$5139 = $$1135;$$6160 = 0;
        break L6;
       }
      }
     }
    } while(0);
    $$5139 = $$2136;$$6160 = 1;
   }
   }
  } while(0);
  __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbED2Ev($5);
  __ZN10__cxxabiv112_GLOBAL__N_110save_valueIjED2Ev($4);
  if ($$6160) {
   $$6140 = $$5139;
   label = 88;
  } else {
   $$11 = $0;
  }
 }
 if ((label|0) == 88) {
  $$11 = $$6140;
 }
 STACKTOP = sp;return ($$11|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_116parse_dot_suffixINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i16 = 0, $$014 = 0, $$021$i$i = 0, $$021$ph$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i17 = 0, $scevgep23$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $3 = sp + 36|0;
 $4 = sp + 24|0;
 $5 = sp + 12|0;
 $6 = sp;
 $7 = ($0|0)==($1|0);
 if ($7) {
  $$014 = $0;
 } else {
  $8 = HEAP8[$0>>0]|0;
  $9 = ($8<<24>>24)==(46);
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = ((($2)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($10|0)==($12|0);
   if ($13) {
    $$014 = $0;
   } else {
    ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
    $14 = $0;
    $15 = $1;
    $16 = (($15) - ($14))|0;
    $17 = ($16>>>0)>(4294967279);
    if ($17) {
     __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($6);
     // unreachable;
    }
    $18 = ($16>>>0)<(11);
    if ($18) {
     $19 = $16&255;
     $20 = ((($6)) + 11|0);
     HEAP8[$20>>0] = $19;
     $$021$ph$i$i = $6;
    } else {
     $21 = (($16) + 16)|0;
     $22 = $21 & -16;
     $23 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($22)|0);
     HEAP32[$6>>2] = $23;
     $24 = $22 | -2147483648;
     $25 = ((($6)) + 8|0);
     HEAP32[$25>>2] = $24;
     $26 = ((($6)) + 4|0);
     HEAP32[$26>>2] = $16;
     $$021$ph$i$i = $23;
    }
    $$0$i$i = $0;$$021$i$i = $$021$ph$i$i;
    while(1) {
     $27 = ($$0$i$i|0)==($1|0);
     if ($27) {
      break;
     }
     __ZNSt3__211char_traitsIcE6assignERcRKc($$021$i$i,$$0$i$i);
     $28 = ((($$0$i$i)) + 1|0);
     $29 = ((($$021$i$i)) + 1|0);
     $$0$i$i = $28;$$021$i$i = $29;
    }
    $scevgep23$i$i = (($$021$ph$i$i) + ($16)|0);
    HEAP8[$3>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($scevgep23$i$i,$3);
    $30 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6,0,3593)|0);
    ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
    $$0$i$i$i = 0;
    while(1) {
     $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
     if ($exitcond$i$i$i) {
      break;
     }
     $31 = (($6) + ($$0$i$i$i<<2)|0);
     HEAP32[$31>>2] = 0;
     $32 = (($$0$i$i$i) + 1)|0;
     $$0$i$i$i = $32;
    }
    $33 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5,3596)|0);
    ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
    $$0$i$i$i16 = 0;
    while(1) {
     $exitcond$i$i$i17 = ($$0$i$i$i16|0)==(3);
     if ($exitcond$i$i$i17) {
      break;
     }
     $34 = (($5) + ($$0$i$i$i16<<2)|0);
     HEAP32[$34>>2] = 0;
     $35 = (($$0$i$i$i16) + 1)|0;
     $$0$i$i$i16 = $35;
    }
    $36 = HEAP32[$11>>2]|0;
    $37 = ((($36)) + -24|0);
    $38 = ((($4)) + 11|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = ($39<<24>>24)<(0);
    $41 = HEAP32[$4>>2]|0;
    $42 = ((($4)) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = $39&255;
    $45 = $40 ? $41 : $4;
    $46 = $40 ? $43 : $44;
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($37,$45,$46)|0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    $$014 = $1;
   }
  } else {
   $$014 = $0;
  }
 }
 STACKTOP = sp;return ($$014|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_block_invokeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$031 = 0, $$032 = 0, $$133 = 0, $$2 = 0, $$236 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit40 = 0, $isdigittmp = 0, $isdigittmp39 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $0;
 $5 = (($3) - ($4))|0;
 $6 = ($5|0)>(12);
 L1: do {
  if ($6) {
   $$031 = 0;$$032 = $0;
   while(1) {
    $7 = ($$031|0)<(13);
    if (!($7)) {
     break;
    }
    $8 = HEAP8[$$032>>0]|0;
    $9 = (5229 + ($$031)|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($8<<24>>24)==($10<<24>>24);
    if (!($11)) {
     $$236 = $0;
     break L1;
    }
    $12 = (($$031) + 1)|0;
    $13 = ((($$032)) + 1|0);
    $$031 = $12;$$032 = $13;
   }
   $14 = ($$032|0)==($1|0);
   L7: do {
    if ($14) {
     $$2 = $1;
    } else {
     $15 = HEAP8[$$032>>0]|0;
     $16 = ($15<<24>>24)==(95);
     if ($16) {
      $17 = ((($$032)) + 1|0);
      $18 = ($17|0)==($1|0);
      if ($18) {
       $$236 = $0;
       break L1;
      }
      $19 = HEAP8[$17>>0]|0;
      $20 = $19 << 24 >> 24;
      $isdigittmp39 = (($20) + -48)|0;
      $isdigit40 = ($isdigittmp39>>>0)<(10);
      if (!($isdigit40)) {
       $$236 = $0;
       break L1;
      }
      $21 = ((($$032)) + 2|0);
      $$133 = $21;
     } else {
      $$133 = $$032;
     }
     while(1) {
      $22 = ($$133|0)==($1|0);
      if ($22) {
       $$2 = $1;
       break L7;
      }
      $23 = HEAP8[$$133>>0]|0;
      $24 = $23 << 24 >> 24;
      $isdigittmp = (($24) + -48)|0;
      $isdigit = ($isdigittmp>>>0)<(10);
      if (!($isdigit)) {
       $$2 = $$133;
       break L7;
      }
      $25 = ((($$133)) + 1|0);
      $$133 = $25;
     }
    }
   } while(0);
   $26 = HEAP32[$2>>2]|0;
   $27 = ((($2)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($26|0)==($28|0);
   if ($29) {
    $$236 = $0;
   } else {
    $30 = ((($28)) + -24|0);
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($30,0,5243)|0);
    $$236 = $$2;
   }
  } else {
   $$236 = $0;
  }
 } while(0);
 return ($$236|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$0$i = 0, $$0$i$i$i = 0, $$0$i$i$i568 = 0, $$0$i$i$i572 = 0, $$0$i$i$i575 = 0, $$0$i532 = 0, $$0$i539 = 0, $$0434 = 0, $$0435 = 0, $$0438 = 0, $$0444 = 0, $$0478 = 0, $$0479 = 0, $$1429 = 0, $$1436 = 0, $$2437 = 0, $$5 = 0, $$in = 0;
 var $$ph = 0, $$pre$i = 0, $$pre$i496 = 0, $$pre$i547 = 0, $$pre$i557 = 0, $$pre$i563 = 0, $$sroa$0$0$$sroa_idx$i = 0, $$sroa$0$0$$sroa_idx$i483 = 0, $$sroa$0$0$$sroa_idx$i487 = 0, $$sroa$0$0$$sroa_idx$i489 = 0, $$sroa$0$0$$sroa_idx$i493 = 0, $$sroa$0$0$$sroa_idx$i497 = 0, $$sroa$0$0$$sroa_idx$i503 = 0, $$sroa$0$0$$sroa_idx$i507 = 0, $$sroa$0$0$$sroa_idx$i511 = 0, $$sroa$0$0$$sroa_idx$i513 = 0, $$sroa$0$0$$sroa_idx$i517 = 0, $$sroa$0$0$$sroa_idx$i521 = 0, $$sroa$0$0$$sroa_idx$i525 = 0, $$sroa$0$0$$sroa_idx$i529 = 0;
 var $$sroa$0$0$$sroa_idx$i536 = 0, $$sroa$0$0$$sroa_idx$i543 = 0, $$sroa$0$0$$sroa_idx$i579 = 0, $$sroa$0$0$copyload$i484588 = 0, $$sroa$0$0$copyload$i488590 = 0, $$sroa$0$0$copyload$i490591 = 0, $$sroa$0$0$copyload$i494592 = 0, $$sroa$0$0$copyload$i498587 = 0, $$sroa$0$0$copyload$i504604 = 0, $$sroa$0$0$copyload$i508603 = 0, $$sroa$0$0$copyload$i512593 = 0, $$sroa$0$0$copyload$i514602 = 0, $$sroa$0$0$copyload$i518601 = 0, $$sroa$0$0$copyload$i522600 = 0, $$sroa$0$0$copyload$i526599 = 0, $$sroa$0$0$copyload$i530598 = 0, $$sroa$0$0$copyload$i537597 = 0, $$sroa$0$0$copyload$i544595 = 0, $$sroa$0$0$copyload$i552596 = 0, $$sroa$0$0$copyload$i580594 = 0;
 var $$sroa$0$0$copyload$i589 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0;
 var $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0;
 var $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0;
 var $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0;
 var $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0;
 var $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0;
 var $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0;
 var $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0;
 var $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i569 = 0, $exitcond$i$i$i573 = 0, $exitcond$i$i$i576 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $3 = sp + 128|0;
 $4 = sp + 104|0;
 $5 = sp + 40|0;
 $6 = sp + 88|0;
 $7 = sp + 24|0;
 $8 = sp + 76|0;
 $9 = sp + 12|0;
 $10 = sp;
 $11 = sp + 64|0;
 $12 = ($0|0)==($1|0);
 L1: do {
  if ($12) {
   $$5 = $0;
  } else {
   $13 = HEAP8[$0>>0]|0;
   $14 = $13 << 24 >> 24;
   switch ($14|0) {
   case 75: case 86: case 114:  {
    HEAP32[$3>>2] = 0;
    $15 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($0,$1,$3)|0);
    $16 = ($15|0)==($0|0);
    L5: do {
     if ($16) {
      $$1429 = $0;
     } else {
      $17 = HEAP8[$15>>0]|0;
      $18 = ($17<<24>>24)==(70);
      $19 = ((($2)) + 4|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = HEAP32[$2>>2]|0;
      $22 = (($20) - ($21))|0;
      $23 = (($22|0) / 24)&-1;
      $24 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($15,$1,$2)|0);
      $25 = HEAP32[$19>>2]|0;
      $26 = HEAP32[$2>>2]|0;
      $27 = (($25) - ($26))|0;
      $28 = (($27|0) / 24)&-1;
      $29 = ($24|0)==($15|0);
      if ($29) {
       $$1429 = $0;
      } else {
       $30 = ((($2)) + 20|0);
       $31 = HEAP32[$30>>2]|0;
       L8: do {
        if ($18) {
         $32 = ((($31)) + -16|0);
         $33 = $31;
         while(1) {
          $34 = ($33|0)==($32|0);
          if ($34) {
           $38 = $32;
           break L8;
          }
          $35 = ((($33)) + -16|0);
          HEAP32[$30>>2] = $35;
          __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($35);
          $$pre$i496 = HEAP32[$30>>2]|0;
          $33 = $$pre$i496;
         }
        } else {
         $38 = $31;
        }
       } while(0);
       $$sroa$0$0$$sroa_idx$i497 = ((($2)) + 12|0);
       $$sroa$0$0$copyload$i498587 = HEAP32[$$sroa$0$0$$sroa_idx$i497>>2]|0;
       HEAP32[$4>>2] = $$sroa$0$0$copyload$i498587;
       $36 = ((($2)) + 24|0);
       $37 = HEAP32[$36>>2]|0;
       $39 = ($38>>>0)<($37>>>0);
       if ($39) {
        HEAP32[$38>>2] = 0;
        $40 = ((($38)) + 4|0);
        HEAP32[$40>>2] = 0;
        $41 = ((($38)) + 8|0);
        $42 = HEAP32[$4>>2]|0;
        HEAP32[$41>>2] = 0;
        $43 = ((($38)) + 12|0);
        HEAP32[$43>>2] = $42;
        $44 = HEAP32[$30>>2]|0;
        $45 = ((($44)) + 16|0);
        HEAP32[$30>>2] = $45;
       } else {
        $46 = ((($2)) + 16|0);
        __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($46,$4);
       }
       $47 = HEAP32[$3>>2]|0;
       $48 = $47 & 1;
       $49 = ($48|0)==(0);
       $50 = $47 & 2;
       $51 = ($50|0)==(0);
       $52 = $47 & 4;
       $53 = ($52|0)==(0);
       $$0434 = $23;
       while(1) {
        $54 = ($$0434>>>0)<($28>>>0);
        if (!($54)) {
         $$1429 = $24;
         break L5;
        }
        if ($18) {
         $55 = HEAP32[$2>>2]|0;
         $56 = (((($55) + (($$0434*24)|0)|0)) + 12|0);
         $57 = ((($56)) + 11|0);
         $58 = HEAP8[$57>>0]|0;
         $59 = ($58<<24>>24)<(0);
         if ($59) {
          $60 = (((($55) + (($$0434*24)|0)|0)) + 16|0);
          $61 = HEAP32[$60>>2]|0;
          $62 = HEAP32[$56>>2]|0;
          $$in = $61;$66 = $62;
         } else {
          $63 = $58&255;
          $$in = $63;$66 = $56;
         }
         $64 = (($$in) + -2)|0;
         $65 = (($66) + ($64)|0);
         $67 = HEAP8[$65>>0]|0;
         $68 = ($67<<24>>24)==(38);
         if ($68) {
          $69 = (($$in) + -3)|0;
          $$0435 = $69;
         } else {
          if ($59) {
           $70 = HEAP32[$56>>2]|0;
           $71 = (((($55) + (($$0434*24)|0)|0)) + 16|0);
           $72 = HEAP32[$71>>2]|0;
           $75 = $70;$76 = $72;
          } else {
           $73 = $58&255;
           $75 = $56;$76 = $73;
          }
          $74 = (($75) + ($76)|0);
          $77 = ((($74)) + -1|0);
          $78 = HEAP8[$77>>0]|0;
          $79 = ($78<<24>>24)==(38);
          $$ = $79 ? $64 : $$in;
          $$0435 = $$;
         }
         if ($49) {
          $$1436 = $$0435;
         } else {
          $80 = (($$0435) + 6)|0;
          (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($56,$$0435,3543)|0);
          $$1436 = $80;
         }
         if ($51) {
          $$2437 = $$1436;
         } else {
          $81 = (($$1436) + 9)|0;
          $82 = HEAP32[$2>>2]|0;
          $83 = (((($82) + (($$0434*24)|0)|0)) + 12|0);
          (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($83,$$1436,3550)|0);
          $$2437 = $81;
         }
         if (!($53)) {
          $84 = HEAP32[$2>>2]|0;
          $85 = (((($84) + (($$0434*24)|0)|0)) + 12|0);
          (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($85,$$2437,3560)|0);
         }
        } else {
         if (!($49)) {
          $86 = HEAP32[$2>>2]|0;
          $87 = (($86) + (($$0434*24)|0)|0);
          (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($87,3543)|0);
         }
         if (!($51)) {
          $88 = HEAP32[$2>>2]|0;
          $89 = (($88) + (($$0434*24)|0)|0);
          (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($89,3550)|0);
         }
         if (!($53)) {
          $90 = HEAP32[$2>>2]|0;
          $91 = (($90) + (($$0434*24)|0)|0);
          (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($91,3560)|0);
         }
        }
        $92 = HEAP32[$30>>2]|0;
        $93 = HEAP32[$2>>2]|0;
        $94 = (($93) + (($$0434*24)|0)|0);
        $95 = ((($92)) + -12|0);
        $96 = HEAP32[$95>>2]|0;
        $97 = ((($92)) + -8|0);
        $98 = HEAP32[$97>>2]|0;
        $99 = ($96|0)==($98|0);
        if ($99) {
         $102 = ((($92)) + -16|0);
         __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($102,$94);
        } else {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($96,$94);
         $100 = HEAP32[$95>>2]|0;
         $101 = ((($100)) + 24|0);
         HEAP32[$95>>2] = $101;
        }
        $103 = (($$0434) + 1)|0;
        $$0434 = $103;
       }
      }
     }
    } while(0);
    $$5 = $$1429;
    break L1;
    break;
   }
   default: {
   }
   }
   $104 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
   $105 = ($104|0)==($0|0);
   if ($105) {
    $106 = HEAP8[$0>>0]|0;
    $107 = $106 << 24 >> 24;
    L58: do {
     switch ($107|0) {
     case 65:  {
      $108 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_array_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $109 = ($108|0)==($0|0);
      if ($109) {
       $$5 = $0;
       break L1;
      }
      $110 = HEAP32[$2>>2]|0;
      $111 = ((($2)) + 4|0);
      $112 = HEAP32[$111>>2]|0;
      $113 = ($110|0)==($112|0);
      if ($113) {
       $$5 = $0;
       break L1;
      }
      $114 = ((($112)) + -24|0);
      $$sroa$0$0$$sroa_idx$i503 = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i504604 = HEAP32[$$sroa$0$0$$sroa_idx$i503>>2]|0;
      HEAP32[$4>>2] = $$sroa$0$0$copyload$i504604;
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3,$114,$4);
      $115 = ((($2)) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ((($2)) + 24|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = ($116>>>0)<($118>>>0);
      if ($119) {
       $120 = ((($3)) + 12|0);
       HEAP32[$116>>2] = 0;
       $121 = ((($116)) + 4|0);
       HEAP32[$121>>2] = 0;
       $122 = ((($116)) + 8|0);
       $123 = HEAP32[$120>>2]|0;
       HEAP32[$122>>2] = 0;
       $124 = ((($116)) + 12|0);
       HEAP32[$124>>2] = $123;
       $125 = HEAP32[$3>>2]|0;
       HEAP32[$116>>2] = $125;
       $126 = ((($3)) + 4|0);
       $127 = HEAP32[$126>>2]|0;
       HEAP32[$121>>2] = $127;
       $128 = ((($3)) + 8|0);
       $129 = HEAP32[$128>>2]|0;
       $130 = ((($116)) + 8|0);
       HEAP32[$130>>2] = $129;
       HEAP32[$128>>2] = 0;
       HEAP32[$126>>2] = 0;
       HEAP32[$3>>2] = 0;
       $131 = HEAP32[$115>>2]|0;
       $132 = ((($131)) + 16|0);
       HEAP32[$115>>2] = $132;
      } else {
       $133 = ((($2)) + 16|0);
       __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($133,$3);
      }
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
      $$5 = $108;
      break L1;
      break;
     }
     case 67:  {
      $134 = ((($0)) + 1|0);
      $135 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($134,$1,$2)|0);
      $136 = ($135|0)==($134|0);
      if ($136) {
       $$5 = $0;
       break L1;
      }
      $137 = HEAP32[$2>>2]|0;
      $138 = ((($2)) + 4|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($137|0)==($139|0);
      if ($140) {
       $$5 = $0;
       break L1;
      }
      $141 = ((($139)) + -24|0);
      (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($141,3570)|0);
      $142 = HEAP32[$138>>2]|0;
      $143 = ((($142)) + -24|0);
      $$sroa$0$0$$sroa_idx$i507 = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i508603 = HEAP32[$$sroa$0$0$$sroa_idx$i507>>2]|0;
      HEAP32[$4>>2] = $$sroa$0$0$copyload$i508603;
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3,$143,$4);
      $144 = ((($2)) + 20|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = ((($2)) + 24|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($145>>>0)<($147>>>0);
      if ($148) {
       $149 = ((($3)) + 12|0);
       HEAP32[$145>>2] = 0;
       $150 = ((($145)) + 4|0);
       HEAP32[$150>>2] = 0;
       $151 = ((($145)) + 8|0);
       $152 = HEAP32[$149>>2]|0;
       HEAP32[$151>>2] = 0;
       $153 = ((($145)) + 12|0);
       HEAP32[$153>>2] = $152;
       $154 = HEAP32[$3>>2]|0;
       HEAP32[$145>>2] = $154;
       $155 = ((($3)) + 4|0);
       $156 = HEAP32[$155>>2]|0;
       HEAP32[$150>>2] = $156;
       $157 = ((($3)) + 8|0);
       $158 = HEAP32[$157>>2]|0;
       $159 = ((($145)) + 8|0);
       HEAP32[$159>>2] = $158;
       HEAP32[$157>>2] = 0;
       HEAP32[$155>>2] = 0;
       HEAP32[$3>>2] = 0;
       $160 = HEAP32[$144>>2]|0;
       $161 = ((($160)) + 16|0);
       HEAP32[$144>>2] = $161;
      } else {
       $162 = ((($2)) + 16|0);
       __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($162,$3);
      }
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
      $$5 = $135;
      break L1;
      break;
     }
     case 70:  {
      $163 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_function_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $164 = ($163|0)==($0|0);
      if ($164) {
       $$5 = $0;
       break L1;
      }
      $165 = HEAP32[$2>>2]|0;
      $166 = ((($2)) + 4|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($165|0)==($167|0);
      if ($168) {
       $$5 = $0;
       break L1;
      }
      $169 = ((($167)) + -24|0);
      $$sroa$0$0$$sroa_idx$i513 = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i514602 = HEAP32[$$sroa$0$0$$sroa_idx$i513>>2]|0;
      HEAP32[$4>>2] = $$sroa$0$0$copyload$i514602;
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3,$169,$4);
      $170 = ((($2)) + 20|0);
      $171 = HEAP32[$170>>2]|0;
      $172 = ((($2)) + 24|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($171>>>0)<($173>>>0);
      if ($174) {
       $175 = ((($3)) + 12|0);
       HEAP32[$171>>2] = 0;
       $176 = ((($171)) + 4|0);
       HEAP32[$176>>2] = 0;
       $177 = ((($171)) + 8|0);
       $178 = HEAP32[$175>>2]|0;
       HEAP32[$177>>2] = 0;
       $179 = ((($171)) + 12|0);
       HEAP32[$179>>2] = $178;
       $180 = HEAP32[$3>>2]|0;
       HEAP32[$171>>2] = $180;
       $181 = ((($3)) + 4|0);
       $182 = HEAP32[$181>>2]|0;
       HEAP32[$176>>2] = $182;
       $183 = ((($3)) + 8|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ((($171)) + 8|0);
       HEAP32[$185>>2] = $184;
       HEAP32[$183>>2] = 0;
       HEAP32[$181>>2] = 0;
       HEAP32[$3>>2] = 0;
       $186 = HEAP32[$170>>2]|0;
       $187 = ((($186)) + 16|0);
       HEAP32[$170>>2] = $187;
      } else {
       $188 = ((($2)) + 16|0);
       __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($188,$3);
      }
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
      $$5 = $163;
      break L1;
      break;
     }
     case 71:  {
      $189 = ((($0)) + 1|0);
      $190 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($189,$1,$2)|0);
      $191 = ($190|0)==($189|0);
      if ($191) {
       $$5 = $0;
       break L1;
      }
      $192 = HEAP32[$2>>2]|0;
      $193 = ((($2)) + 4|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = ($192|0)==($194|0);
      if ($195) {
       $$5 = $0;
       break L1;
      }
      $196 = ((($194)) + -24|0);
      (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($196,3579)|0);
      $197 = HEAP32[$193>>2]|0;
      $198 = ((($197)) + -24|0);
      $$sroa$0$0$$sroa_idx$i517 = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i518601 = HEAP32[$$sroa$0$0$$sroa_idx$i517>>2]|0;
      HEAP32[$4>>2] = $$sroa$0$0$copyload$i518601;
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3,$198,$4);
      $199 = ((($2)) + 20|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = ((($2)) + 24|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($200>>>0)<($202>>>0);
      if ($203) {
       $204 = ((($3)) + 12|0);
       HEAP32[$200>>2] = 0;
       $205 = ((($200)) + 4|0);
       HEAP32[$205>>2] = 0;
       $206 = ((($200)) + 8|0);
       $207 = HEAP32[$204>>2]|0;
       HEAP32[$206>>2] = 0;
       $208 = ((($200)) + 12|0);
       HEAP32[$208>>2] = $207;
       $209 = HEAP32[$3>>2]|0;
       HEAP32[$200>>2] = $209;
       $210 = ((($3)) + 4|0);
       $211 = HEAP32[$210>>2]|0;
       HEAP32[$205>>2] = $211;
       $212 = ((($3)) + 8|0);
       $213 = HEAP32[$212>>2]|0;
       $214 = ((($200)) + 8|0);
       HEAP32[$214>>2] = $213;
       HEAP32[$212>>2] = 0;
       HEAP32[$210>>2] = 0;
       HEAP32[$3>>2] = 0;
       $215 = HEAP32[$199>>2]|0;
       $216 = ((($215)) + 16|0);
       HEAP32[$199>>2] = $216;
      } else {
       $217 = ((($2)) + 16|0);
       __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($217,$3);
      }
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
      $$5 = $190;
      break L1;
      break;
     }
     case 77:  {
      $218 = (__ZN10__cxxabiv112_GLOBAL__N_128parse_pointer_to_member_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $219 = ($218|0)==($0|0);
      if ($219) {
       $$5 = $0;
       break L1;
      }
      $220 = HEAP32[$2>>2]|0;
      $221 = ((($2)) + 4|0);
      $222 = HEAP32[$221>>2]|0;
      $223 = ($220|0)==($222|0);
      if ($223) {
       $$5 = $0;
       break L1;
      }
      $224 = ((($222)) + -24|0);
      $$sroa$0$0$$sroa_idx$i521 = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i522600 = HEAP32[$$sroa$0$0$$sroa_idx$i521>>2]|0;
      HEAP32[$4>>2] = $$sroa$0$0$copyload$i522600;
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3,$224,$4);
      $225 = ((($2)) + 20|0);
      $226 = HEAP32[$225>>2]|0;
      $227 = ((($2)) + 24|0);
      $228 = HEAP32[$227>>2]|0;
      $229 = ($226>>>0)<($228>>>0);
      if ($229) {
       $230 = ((($3)) + 12|0);
       HEAP32[$226>>2] = 0;
       $231 = ((($226)) + 4|0);
       HEAP32[$231>>2] = 0;
       $232 = ((($226)) + 8|0);
       $233 = HEAP32[$230>>2]|0;
       HEAP32[$232>>2] = 0;
       $234 = ((($226)) + 12|0);
       HEAP32[$234>>2] = $233;
       $235 = HEAP32[$3>>2]|0;
       HEAP32[$226>>2] = $235;
       $236 = ((($3)) + 4|0);
       $237 = HEAP32[$236>>2]|0;
       HEAP32[$231>>2] = $237;
       $238 = ((($3)) + 8|0);
       $239 = HEAP32[$238>>2]|0;
       $240 = ((($226)) + 8|0);
       HEAP32[$240>>2] = $239;
       HEAP32[$238>>2] = 0;
       HEAP32[$236>>2] = 0;
       HEAP32[$3>>2] = 0;
       $241 = HEAP32[$225>>2]|0;
       $242 = ((($241)) + 16|0);
       HEAP32[$225>>2] = $242;
      } else {
       $243 = ((($2)) + 16|0);
       __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($243,$3);
      }
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
      $$5 = $218;
      break L1;
      break;
     }
     case 79:  {
      $244 = ((($2)) + 4|0);
      $245 = HEAP32[$244>>2]|0;
      $246 = HEAP32[$2>>2]|0;
      $247 = (($245) - ($246))|0;
      $248 = (($247|0) / 24)&-1;
      $249 = ((($0)) + 1|0);
      $250 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($249,$1,$2)|0);
      $251 = HEAP32[$244>>2]|0;
      $252 = HEAP32[$2>>2]|0;
      $253 = (($251) - ($252))|0;
      $254 = (($253|0) / 24)&-1;
      $255 = ($250|0)==($249|0);
      if ($255) {
       $$5 = $0;
       break L1;
      }
      $$sroa$0$0$$sroa_idx$i525 = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i526599 = HEAP32[$$sroa$0$0$$sroa_idx$i525>>2]|0;
      HEAP32[$3>>2] = $$sroa$0$0$copyload$i526599;
      $256 = ((($2)) + 20|0);
      $257 = HEAP32[$256>>2]|0;
      $258 = ((($2)) + 24|0);
      $259 = HEAP32[$258>>2]|0;
      $260 = ($257>>>0)<($259>>>0);
      if ($260) {
       HEAP32[$257>>2] = 0;
       $261 = ((($257)) + 4|0);
       HEAP32[$261>>2] = 0;
       $262 = ((($257)) + 8|0);
       HEAP32[$262>>2] = 0;
       $263 = ((($257)) + 12|0);
       HEAP32[$263>>2] = $$sroa$0$0$copyload$i526599;
       $264 = HEAP32[$256>>2]|0;
       $265 = ((($264)) + 16|0);
       HEAP32[$256>>2] = $265;
      } else {
       $266 = ((($2)) + 16|0);
       __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($266,$3);
      }
      $267 = ((($3)) + 11|0);
      $268 = ((($3)) + 4|0);
      $$0479 = $248;
      while(1) {
       $269 = ($$0479>>>0)<($254>>>0);
       if (!($269)) {
        $$5 = $250;
        break L1;
       }
       $270 = HEAP32[$2>>2]|0;
       $271 = (((($270) + (($$0479*24)|0)|0)) + 12|0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($3,$271,2);
       $272 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3590)|0);
       $273 = HEAP8[$267>>0]|0;
       $274 = ($273<<24>>24)<(0);
       $275 = HEAP32[$268>>2]|0;
       $276 = $273&255;
       $277 = $274 ? $275 : $276;
       $278 = ($272|0)==($277|0);
       if ($278) {
        $279 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($3,3590,$272)|0);
        $280 = ($279|0)==(0);
        $$0$i = $280;
       } else {
        $$0$i = 0;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $281 = HEAP32[$2>>2]|0;
       if ($$0$i) {
        $282 = (($281) + (($$0479*24)|0)|0);
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($282,3593)|0);
        $283 = HEAP32[$2>>2]|0;
        $284 = (((($283) + (($$0479*24)|0)|0)) + 12|0);
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($284,0,3596)|0);
       } else {
        $285 = (((($281) + (($$0479*24)|0)|0)) + 12|0);
        $286 = ((($285)) + 11|0);
        $287 = HEAP8[$286>>0]|0;
        $288 = ($287<<24>>24)<(0);
        if ($288) {
         $289 = HEAP32[$285>>2]|0;
         $291 = $289;
        } else {
         $291 = $285;
        }
        $290 = HEAP8[$291>>0]|0;
        $292 = ($290<<24>>24)==(40);
        if ($292) {
         $293 = (($281) + (($$0479*24)|0)|0);
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($293,3598)|0);
         $294 = HEAP32[$2>>2]|0;
         $295 = (((($294) + (($$0479*24)|0)|0)) + 12|0);
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($295,0,3596)|0);
        }
       }
       $296 = HEAP32[$2>>2]|0;
       $297 = (($296) + (($$0479*24)|0)|0);
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($297,3600)|0);
       $298 = HEAP32[$256>>2]|0;
       $299 = HEAP32[$2>>2]|0;
       $300 = (($299) + (($$0479*24)|0)|0);
       $301 = ((($298)) + -12|0);
       $302 = HEAP32[$301>>2]|0;
       $303 = ((($298)) + -8|0);
       $304 = HEAP32[$303>>2]|0;
       $305 = ($302|0)==($304|0);
       if ($305) {
        $308 = ((($298)) + -16|0);
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($308,$300);
       } else {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($302,$300);
        $306 = HEAP32[$301>>2]|0;
        $307 = ((($306)) + 24|0);
        HEAP32[$301>>2] = $307;
       }
       $309 = (($$0479) + 1)|0;
       $$0479 = $309;
      }
      break;
     }
     case 80:  {
      $310 = ((($2)) + 4|0);
      $311 = HEAP32[$310>>2]|0;
      $312 = HEAP32[$2>>2]|0;
      $313 = (($311) - ($312))|0;
      $314 = (($313|0) / 24)&-1;
      $315 = ((($0)) + 1|0);
      $316 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($315,$1,$2)|0);
      $317 = HEAP32[$310>>2]|0;
      $318 = HEAP32[$2>>2]|0;
      $319 = (($317) - ($318))|0;
      $320 = (($319|0) / 24)&-1;
      $321 = ($316|0)==($315|0);
      if ($321) {
       $$5 = $0;
       break L1;
      }
      $$sroa$0$0$$sroa_idx$i529 = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i530598 = HEAP32[$$sroa$0$0$$sroa_idx$i529>>2]|0;
      HEAP32[$3>>2] = $$sroa$0$0$copyload$i530598;
      $322 = ((($2)) + 20|0);
      $323 = HEAP32[$322>>2]|0;
      $324 = ((($2)) + 24|0);
      $325 = HEAP32[$324>>2]|0;
      $326 = ($323>>>0)<($325>>>0);
      if ($326) {
       HEAP32[$323>>2] = 0;
       $327 = ((($323)) + 4|0);
       HEAP32[$327>>2] = 0;
       $328 = ((($323)) + 8|0);
       HEAP32[$328>>2] = 0;
       $329 = ((($323)) + 12|0);
       HEAP32[$329>>2] = $$sroa$0$0$copyload$i530598;
       $330 = HEAP32[$322>>2]|0;
       $331 = ((($330)) + 16|0);
       HEAP32[$322>>2] = $331;
      } else {
       $332 = ((($2)) + 16|0);
       __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($332,$3);
      }
      $333 = ((($3)) + 11|0);
      $334 = ((($3)) + 4|0);
      $335 = ((($3)) + 11|0);
      $336 = ((($3)) + 4|0);
      $$0478 = $314;
      while(1) {
       $337 = ($$0478>>>0)<($320>>>0);
       if (!($337)) {
        $$5 = $316;
        break L1;
       }
       $338 = HEAP32[$2>>2]|0;
       $339 = (((($338) + (($$0478*24)|0)|0)) + 12|0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($3,$339,2);
       $340 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3590)|0);
       $341 = HEAP8[$333>>0]|0;
       $342 = ($341<<24>>24)<(0);
       $343 = HEAP32[$334>>2]|0;
       $344 = $341&255;
       $345 = $342 ? $343 : $344;
       $346 = ($340|0)==($345|0);
       if ($346) {
        $347 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($3,3590,$340)|0);
        $348 = ($347|0)==(0);
        $$0$i532 = $348;
       } else {
        $$0$i532 = 0;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $349 = HEAP32[$2>>2]|0;
       if ($$0$i532) {
        $350 = (($349) + (($$0478*24)|0)|0);
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($350,3593)|0);
        $351 = HEAP32[$2>>2]|0;
        $352 = (((($351) + (($$0478*24)|0)|0)) + 12|0);
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($352,0,3596)|0);
       } else {
        $353 = (((($349) + (($$0478*24)|0)|0)) + 12|0);
        $354 = ((($353)) + 11|0);
        $355 = HEAP8[$354>>0]|0;
        $356 = ($355<<24>>24)<(0);
        if ($356) {
         $357 = HEAP32[$353>>2]|0;
         $359 = $357;
        } else {
         $359 = $353;
        }
        $358 = HEAP8[$359>>0]|0;
        $360 = ($358<<24>>24)==(40);
        if ($360) {
         $361 = (($349) + (($$0478*24)|0)|0);
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($361,3598)|0);
         $362 = HEAP32[$2>>2]|0;
         $363 = (((($362) + (($$0478*24)|0)|0)) + 12|0);
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($363,0,3596)|0);
        }
       }
       $364 = HEAP8[$315>>0]|0;
       $365 = ($364<<24>>24)==(85);
       if ($365) {
        $368 = HEAP32[$2>>2]|0;
        $369 = (($368) + (($$0478*24)|0)|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($3,$369,12);
        $370 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3603)|0);
        $371 = HEAP8[$335>>0]|0;
        $372 = ($371<<24>>24)<(0);
        $373 = HEAP32[$336>>2]|0;
        $374 = $371&255;
        $375 = $372 ? $373 : $374;
        $376 = ($370|0)==($375|0);
        if ($376) {
         $377 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($3,3603,$370)|0);
         $378 = ($377|0)!=(0);
         $$ph = $378;
        } else {
         $$ph = 1;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
        $379 = HEAP32[$2>>2]|0;
        $380 = (($379) + (($$0478*24)|0)|0);
        if ($$ph) {
         $381 = $380;
         label = 112;
        } else {
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEjjPKc($380);
        }
       } else {
        $366 = HEAP32[$2>>2]|0;
        $367 = (($366) + (($$0478*24)|0)|0);
        $381 = $367;
        label = 112;
       }
       if ((label|0) == 112) {
        label = 0;
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($381,3616)|0);
       }
       $382 = HEAP32[$322>>2]|0;
       $383 = HEAP32[$2>>2]|0;
       $384 = (($383) + (($$0478*24)|0)|0);
       $385 = ((($382)) + -12|0);
       $386 = HEAP32[$385>>2]|0;
       $387 = ((($382)) + -8|0);
       $388 = HEAP32[$387>>2]|0;
       $389 = ($386|0)==($388|0);
       if ($389) {
        $392 = ((($382)) + -16|0);
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($392,$384);
       } else {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($386,$384);
        $390 = HEAP32[$385>>2]|0;
        $391 = ((($390)) + 24|0);
        HEAP32[$385>>2] = $391;
       }
       $393 = (($$0478) + 1)|0;
       $$0478 = $393;
      }
      break;
     }
     case 82:  {
      $394 = ((($2)) + 4|0);
      $395 = HEAP32[$394>>2]|0;
      $396 = HEAP32[$2>>2]|0;
      $397 = (($395) - ($396))|0;
      $398 = (($397|0) / 24)&-1;
      $399 = ((($0)) + 1|0);
      $400 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($399,$1,$2)|0);
      $401 = HEAP32[$394>>2]|0;
      $402 = HEAP32[$2>>2]|0;
      $403 = (($401) - ($402))|0;
      $404 = (($403|0) / 24)&-1;
      $405 = ($400|0)==($399|0);
      if ($405) {
       $$5 = $0;
       break L1;
      }
      $$sroa$0$0$$sroa_idx$i536 = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i537597 = HEAP32[$$sroa$0$0$$sroa_idx$i536>>2]|0;
      HEAP32[$3>>2] = $$sroa$0$0$copyload$i537597;
      $406 = ((($2)) + 20|0);
      $407 = HEAP32[$406>>2]|0;
      $408 = ((($2)) + 24|0);
      $409 = HEAP32[$408>>2]|0;
      $410 = ($407>>>0)<($409>>>0);
      if ($410) {
       HEAP32[$407>>2] = 0;
       $411 = ((($407)) + 4|0);
       HEAP32[$411>>2] = 0;
       $412 = ((($407)) + 8|0);
       HEAP32[$412>>2] = 0;
       $413 = ((($407)) + 12|0);
       HEAP32[$413>>2] = $$sroa$0$0$copyload$i537597;
       $414 = HEAP32[$406>>2]|0;
       $415 = ((($414)) + 16|0);
       HEAP32[$406>>2] = $415;
      } else {
       $416 = ((($2)) + 16|0);
       __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($416,$3);
      }
      $417 = ((($3)) + 11|0);
      $418 = ((($3)) + 4|0);
      $$0444 = $398;
      while(1) {
       $419 = ($$0444>>>0)<($404>>>0);
       if (!($419)) {
        $$5 = $400;
        break L1;
       }
       $420 = HEAP32[$2>>2]|0;
       $421 = (((($420) + (($$0444*24)|0)|0)) + 12|0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($3,$421,2);
       $422 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3590)|0);
       $423 = HEAP8[$417>>0]|0;
       $424 = ($423<<24>>24)<(0);
       $425 = HEAP32[$418>>2]|0;
       $426 = $423&255;
       $427 = $424 ? $425 : $426;
       $428 = ($422|0)==($427|0);
       if ($428) {
        $429 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($3,3590,$422)|0);
        $430 = ($429|0)==(0);
        $$0$i539 = $430;
       } else {
        $$0$i539 = 0;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $431 = HEAP32[$2>>2]|0;
       if ($$0$i539) {
        $432 = (($431) + (($$0444*24)|0)|0);
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($432,3593)|0);
        $433 = HEAP32[$2>>2]|0;
        $434 = (((($433) + (($$0444*24)|0)|0)) + 12|0);
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($434,0,3596)|0);
       } else {
        $435 = (((($431) + (($$0444*24)|0)|0)) + 12|0);
        $436 = ((($435)) + 11|0);
        $437 = HEAP8[$436>>0]|0;
        $438 = ($437<<24>>24)<(0);
        if ($438) {
         $439 = HEAP32[$435>>2]|0;
         $441 = $439;
        } else {
         $441 = $435;
        }
        $440 = HEAP8[$441>>0]|0;
        $442 = ($440<<24>>24)==(40);
        if ($442) {
         $443 = (($431) + (($$0444*24)|0)|0);
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($443,3598)|0);
         $444 = HEAP32[$2>>2]|0;
         $445 = (((($444) + (($$0444*24)|0)|0)) + 12|0);
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($445,0,3596)|0);
        }
       }
       $446 = HEAP32[$2>>2]|0;
       $447 = (($446) + (($$0444*24)|0)|0);
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($447,3618)|0);
       $448 = HEAP32[$406>>2]|0;
       $449 = HEAP32[$2>>2]|0;
       $450 = (($449) + (($$0444*24)|0)|0);
       $451 = ((($448)) + -12|0);
       $452 = HEAP32[$451>>2]|0;
       $453 = ((($448)) + -8|0);
       $454 = HEAP32[$453>>2]|0;
       $455 = ($452|0)==($454|0);
       if ($455) {
        $458 = ((($448)) + -16|0);
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($458,$450);
       } else {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($452,$450);
        $456 = HEAP32[$451>>2]|0;
        $457 = ((($456)) + 24|0);
        HEAP32[$451>>2] = $457;
       }
       $459 = (($$0444) + 1)|0;
       $$0444 = $459;
      }
      break;
     }
     case 84:  {
      $460 = ((($2)) + 4|0);
      $461 = HEAP32[$460>>2]|0;
      $462 = HEAP32[$2>>2]|0;
      $463 = (($461) - ($462))|0;
      $464 = (($463|0) / 24)&-1;
      $465 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $466 = HEAP32[$460>>2]|0;
      $467 = HEAP32[$2>>2]|0;
      $468 = (($466) - ($467))|0;
      $469 = (($468|0) / 24)&-1;
      $470 = ($465|0)==($0|0);
      if ($470) {
       $$5 = $0;
       break L1;
      }
      $471 = ((($2)) + 16|0);
      $$sroa$0$0$$sroa_idx$i543 = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i544595 = HEAP32[$$sroa$0$0$$sroa_idx$i543>>2]|0;
      HEAP32[$3>>2] = $$sroa$0$0$copyload$i544595;
      $472 = ((($2)) + 20|0);
      $473 = HEAP32[$472>>2]|0;
      $474 = ((($2)) + 24|0);
      $475 = HEAP32[$474>>2]|0;
      $476 = ($473>>>0)<($475>>>0);
      if ($476) {
       HEAP32[$473>>2] = 0;
       $477 = ((($473)) + 4|0);
       HEAP32[$477>>2] = 0;
       $478 = ((($473)) + 8|0);
       HEAP32[$478>>2] = 0;
       $479 = ((($473)) + 12|0);
       HEAP32[$479>>2] = $$sroa$0$0$copyload$i544595;
       $480 = HEAP32[$472>>2]|0;
       $481 = ((($480)) + 16|0);
       HEAP32[$472>>2] = $481;
      } else {
       __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($471,$3);
      }
      $$0438 = $464;
      while(1) {
       $482 = ($$0438>>>0)<($469>>>0);
       if (!($482)) {
        break;
       }
       $488 = HEAP32[$472>>2]|0;
       $489 = HEAP32[$2>>2]|0;
       $490 = (($489) + (($$0438*24)|0)|0);
       $491 = ((($488)) + -12|0);
       $492 = HEAP32[$491>>2]|0;
       $493 = ((($488)) + -8|0);
       $494 = HEAP32[$493>>2]|0;
       $495 = ($492|0)==($494|0);
       if ($495) {
        $498 = ((($488)) + -16|0);
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($498,$490);
       } else {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($492,$490);
        $496 = HEAP32[$491>>2]|0;
        $497 = ((($496)) + 24|0);
        HEAP32[$491>>2] = $497;
       }
       $499 = (($$0438) + 1)|0;
       $$0438 = $499;
      }
      $483 = ((($2)) + 63|0);
      $484 = HEAP8[$483>>0]|0;
      $485 = ($484<<24>>24)!=(0);
      $486 = (($464) + 1)|0;
      $487 = ($469|0)==($486|0);
      $or$cond = $487 & $485;
      if (!($or$cond)) {
       $$5 = $465;
       break L1;
      }
      $500 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($465,$1,$2)|0);
      $501 = ($500|0)==($465|0);
      if ($501) {
       $$5 = $465;
       break L1;
      }
      $502 = HEAP32[$460>>2]|0;
      $503 = ((($502)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$503);
      $504 = HEAP32[$460>>2]|0;
      $505 = ((($504)) + -24|0);
      $506 = $504;
      while(1) {
       $507 = ($506|0)==($505|0);
       if ($507) {
        break;
       }
       $508 = ((($506)) + -24|0);
       HEAP32[$460>>2] = $508;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($508);
       $$pre$i547 = HEAP32[$460>>2]|0;
       $506 = $$pre$i547;
      }
      $509 = ((($504)) + -48|0);
      $510 = ((($3)) + 11|0);
      $511 = HEAP8[$510>>0]|0;
      $512 = ($511<<24>>24)<(0);
      $513 = HEAP32[$3>>2]|0;
      $514 = ((($3)) + 4|0);
      $515 = HEAP32[$514>>2]|0;
      $516 = $511&255;
      $517 = $512 ? $513 : $3;
      $518 = $512 ? $515 : $516;
      (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($509,$517,$518)|0);
      $519 = HEAP32[$460>>2]|0;
      $520 = ((($519)) + -24|0);
      $$sroa$0$0$copyload$i552596 = HEAP32[$$sroa$0$0$$sroa_idx$i543>>2]|0;
      HEAP32[$5>>2] = $$sroa$0$0$copyload$i552596;
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($4,$520,$5);
      $521 = HEAP32[$472>>2]|0;
      $522 = HEAP32[$474>>2]|0;
      $523 = ($521>>>0)<($522>>>0);
      if ($523) {
       $524 = ((($4)) + 12|0);
       HEAP32[$521>>2] = 0;
       $525 = ((($521)) + 4|0);
       HEAP32[$525>>2] = 0;
       $526 = ((($521)) + 8|0);
       $527 = HEAP32[$524>>2]|0;
       HEAP32[$526>>2] = 0;
       $528 = ((($521)) + 12|0);
       HEAP32[$528>>2] = $527;
       $529 = HEAP32[$4>>2]|0;
       HEAP32[$521>>2] = $529;
       $530 = ((($4)) + 4|0);
       $531 = HEAP32[$530>>2]|0;
       HEAP32[$525>>2] = $531;
       $532 = ((($4)) + 8|0);
       $533 = HEAP32[$532>>2]|0;
       $534 = ((($521)) + 8|0);
       HEAP32[$534>>2] = $533;
       HEAP32[$532>>2] = 0;
       HEAP32[$530>>2] = 0;
       HEAP32[$4>>2] = 0;
       $535 = HEAP32[$472>>2]|0;
       $536 = ((($535)) + 16|0);
       HEAP32[$472>>2] = $536;
      } else {
       __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($471,$4);
      }
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$5 = $500;
      break L1;
      break;
     }
     case 85:  {
      $537 = ((($0)) + 1|0);
      $538 = ($537|0)==($1|0);
      if ($538) {
       $$5 = $0;
       break L1;
      }
      $539 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($537,$1,$2)|0);
      $540 = ($539|0)==($537|0);
      if ($540) {
       $$5 = $0;
       break L1;
      }
      $541 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($539,$1,$2)|0);
      $542 = ($541|0)==($539|0);
      if ($542) {
       $$5 = $0;
       break L1;
      }
      $543 = ((($2)) + 4|0);
      $544 = HEAP32[$543>>2]|0;
      $545 = HEAP32[$2>>2]|0;
      $546 = (($544) - ($545))|0;
      $547 = (($546|0) / 24)&-1;
      $548 = ($547>>>0)<(2);
      if ($548) {
       $$5 = $0;
       break L1;
      }
      $549 = $544;
      $550 = ((($549)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$550);
      $551 = HEAP32[$543>>2]|0;
      $552 = ((($551)) + -24|0);
      $553 = $551;
      while(1) {
       $554 = ($553|0)==($552|0);
       if ($554) {
        break;
       }
       $555 = ((($553)) + -24|0);
       HEAP32[$543>>2] = $555;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($555);
       $$pre$i557 = HEAP32[$543>>2]|0;
       $553 = $$pre$i557;
      }
      $556 = ((($551)) + -48|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($4,$556,9);
      $557 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3620)|0);
      $558 = ((($4)) + 11|0);
      $559 = HEAP8[$558>>0]|0;
      $560 = ($559<<24>>24)<(0);
      $561 = ((($4)) + 4|0);
      $562 = HEAP32[$561>>2]|0;
      $563 = $559&255;
      $564 = $560 ? $562 : $563;
      $565 = ($557|0)==($564|0);
      if ($565) {
       $566 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($4,3620,$557)|0);
       $567 = ($566|0)==(0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
       if ($567) {
        $584 = HEAP32[$543>>2]|0;
        $585 = ((($584)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4,$585);
        $586 = HEAP32[$543>>2]|0;
        $587 = ((($586)) + -24|0);
        $588 = $586;
        while(1) {
         $589 = ($588|0)==($587|0);
         if ($589) {
          break;
         }
         $590 = ((($588)) + -24|0);
         HEAP32[$543>>2] = $590;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($590);
         $$pre$i563 = HEAP32[$543>>2]|0;
         $588 = $$pre$i563;
        }
        $591 = ((($4)) + 11|0);
        $592 = HEAP8[$591>>0]|0;
        $593 = ($592<<24>>24)<(0);
        $594 = HEAP32[$4>>2]|0;
        $595 = ((($594)) + 9|0);
        $596 = ((($4)) + 9|0);
        $597 = $593 ? $595 : $596;
        $598 = $593 ? $594 : $4;
        $599 = ((($4)) + 4|0);
        $600 = HEAP32[$599>>2]|0;
        $601 = $592&255;
        $602 = $593 ? $600 : $601;
        $603 = (($598) + ($602)|0);
        $604 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($597,$603,$2)|0);
        $605 = HEAP8[$591>>0]|0;
        $606 = ($605<<24>>24)<(0);
        $607 = HEAP32[$4>>2]|0;
        $608 = $606 ? $607 : $4;
        $609 = ((($608)) + 9|0);
        $610 = ($604|0)==($609|0);
        if ($610) {
         __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($7,$3,3630);
         $630 = HEAP8[$591>>0]|0;
         $631 = ($630<<24>>24)<(0);
         $632 = HEAP32[$4>>2]|0;
         $633 = HEAP32[$599>>2]|0;
         $634 = $630&255;
         $635 = $631 ? $632 : $4;
         $636 = $631 ? $633 : $634;
         $637 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($7,$635,$636)|0);
         ;HEAP32[$11>>2]=HEAP32[$7>>2]|0;HEAP32[$11+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$7+8>>2]|0;
         $$0$i$i$i575 = 0;
         while(1) {
          $exitcond$i$i$i576 = ($$0$i$i$i575|0)==(3);
          if ($exitcond$i$i$i576) {
           break;
          }
          $638 = (($7) + ($$0$i$i$i575<<2)|0);
          HEAP32[$638>>2] = 0;
          $639 = (($$0$i$i$i575) + 1)|0;
          $$0$i$i$i575 = $639;
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($5,$11);
         $640 = HEAP32[$543>>2]|0;
         $641 = ((($2)) + 8|0);
         $642 = HEAP32[$641>>2]|0;
         $643 = ($640>>>0)<($642>>>0);
         if ($643) {
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($640,$5);
          $644 = HEAP32[$543>>2]|0;
          $645 = ((($644)) + 24|0);
          HEAP32[$543>>2] = $645;
         } else {
          __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$5);
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
        } else {
         __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($9,$3,3632);
         $611 = HEAP32[$543>>2]|0;
         $612 = ((($611)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($10,$612);
         $613 = ((($10)) + 11|0);
         $614 = HEAP8[$613>>0]|0;
         $615 = ($614<<24>>24)<(0);
         $616 = HEAP32[$10>>2]|0;
         $617 = ((($10)) + 4|0);
         $618 = HEAP32[$617>>2]|0;
         $619 = $614&255;
         $620 = $615 ? $616 : $10;
         $621 = $615 ? $618 : $619;
         $622 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($9,$620,$621)|0);
         ;HEAP32[$7>>2]=HEAP32[$9>>2]|0;HEAP32[$7+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$9+8>>2]|0;
         $$0$i$i$i568 = 0;
         while(1) {
          $exitcond$i$i$i569 = ($$0$i$i$i568|0)==(3);
          if ($exitcond$i$i$i569) {
           break;
          }
          $623 = (($9) + ($$0$i$i$i568<<2)|0);
          HEAP32[$623>>2] = 0;
          $624 = (($$0$i$i$i568) + 1)|0;
          $$0$i$i$i568 = $624;
         }
         $625 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($7,3634)|0);
         ;HEAP32[$8>>2]=HEAP32[$7>>2]|0;HEAP32[$8+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$7+8>>2]|0;
         $$0$i$i$i572 = 0;
         while(1) {
          $exitcond$i$i$i573 = ($$0$i$i$i572|0)==(3);
          if ($exitcond$i$i$i573) {
           break;
          }
          $626 = (($7) + ($$0$i$i$i572<<2)|0);
          HEAP32[$626>>2] = 0;
          $627 = (($$0$i$i$i572) + 1)|0;
          $$0$i$i$i572 = $627;
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($5,$8);
         $628 = HEAP32[$543>>2]|0;
         $629 = ((($628)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($629,$5);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
       } else {
        label = 166;
       }
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
       label = 166;
      }
      if ((label|0) == 166) {
       __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($5,$3,3630);
       $568 = HEAP32[$543>>2]|0;
       $569 = ((($568)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($7,$569);
       $570 = ((($7)) + 11|0);
       $571 = HEAP8[$570>>0]|0;
       $572 = ($571<<24>>24)<(0);
       $573 = HEAP32[$7>>2]|0;
       $574 = ((($7)) + 4|0);
       $575 = HEAP32[$574>>2]|0;
       $576 = $571&255;
       $577 = $572 ? $573 : $7;
       $578 = $572 ? $575 : $576;
       $579 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($5,$577,$578)|0);
       ;HEAP32[$6>>2]=HEAP32[$5>>2]|0;HEAP32[$6+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$5+8>>2]|0;
       $$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $580 = (($5) + ($$0$i$i$i<<2)|0);
        HEAP32[$580>>2] = 0;
        $581 = (($$0$i$i$i) + 1)|0;
        $$0$i$i$i = $581;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4,$6);
       $582 = HEAP32[$543>>2]|0;
       $583 = ((($582)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($583,$4);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      }
      $646 = HEAP32[$543>>2]|0;
      $647 = ((($646)) + -24|0);
      $$sroa$0$0$$sroa_idx$i579 = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i580594 = HEAP32[$$sroa$0$0$$sroa_idx$i579>>2]|0;
      HEAP32[$5>>2] = $$sroa$0$0$copyload$i580594;
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($4,$647,$5);
      $648 = ((($2)) + 20|0);
      $649 = HEAP32[$648>>2]|0;
      $650 = ((($2)) + 24|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = ($649>>>0)<($651>>>0);
      if ($652) {
       $653 = ((($4)) + 12|0);
       HEAP32[$649>>2] = 0;
       $654 = ((($649)) + 4|0);
       HEAP32[$654>>2] = 0;
       $655 = ((($649)) + 8|0);
       $656 = HEAP32[$653>>2]|0;
       HEAP32[$655>>2] = 0;
       $657 = ((($649)) + 12|0);
       HEAP32[$657>>2] = $656;
       $658 = HEAP32[$4>>2]|0;
       HEAP32[$649>>2] = $658;
       $659 = ((($4)) + 4|0);
       $660 = HEAP32[$659>>2]|0;
       HEAP32[$654>>2] = $660;
       $661 = ((($4)) + 8|0);
       $662 = HEAP32[$661>>2]|0;
       $663 = ((($649)) + 8|0);
       HEAP32[$663>>2] = $662;
       HEAP32[$661>>2] = 0;
       HEAP32[$659>>2] = 0;
       HEAP32[$4>>2] = 0;
       $664 = HEAP32[$648>>2]|0;
       $665 = ((($664)) + 16|0);
       HEAP32[$648>>2] = $665;
      } else {
       $666 = ((($2)) + 16|0);
       __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($666,$4);
      }
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$5 = $541;
      break L1;
      break;
     }
     case 83:  {
      $667 = ((($0)) + 1|0);
      $668 = ($667|0)==($1|0);
      if (!($668)) {
       $669 = HEAP8[$667>>0]|0;
       $670 = ($669<<24>>24)==(116);
       if ($670) {
        $671 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
        $672 = ($671|0)==($0|0);
        if ($672) {
         $$5 = $0;
         break L1;
        }
        $673 = HEAP32[$2>>2]|0;
        $674 = ((($2)) + 4|0);
        $675 = HEAP32[$674>>2]|0;
        $676 = ($673|0)==($675|0);
        if ($676) {
         $$5 = $0;
         break L1;
        }
        $677 = ((($675)) + -24|0);
        $$sroa$0$0$$sroa_idx$i511 = ((($2)) + 12|0);
        $$sroa$0$0$copyload$i512593 = HEAP32[$$sroa$0$0$$sroa_idx$i511>>2]|0;
        HEAP32[$4>>2] = $$sroa$0$0$copyload$i512593;
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3,$677,$4);
        $678 = ((($2)) + 20|0);
        $679 = HEAP32[$678>>2]|0;
        $680 = ((($2)) + 24|0);
        $681 = HEAP32[$680>>2]|0;
        $682 = ($679>>>0)<($681>>>0);
        if ($682) {
         $683 = ((($3)) + 12|0);
         HEAP32[$679>>2] = 0;
         $684 = ((($679)) + 4|0);
         HEAP32[$684>>2] = 0;
         $685 = ((($679)) + 8|0);
         $686 = HEAP32[$683>>2]|0;
         HEAP32[$685>>2] = 0;
         $687 = ((($679)) + 12|0);
         HEAP32[$687>>2] = $686;
         $688 = HEAP32[$3>>2]|0;
         HEAP32[$679>>2] = $688;
         $689 = ((($3)) + 4|0);
         $690 = HEAP32[$689>>2]|0;
         HEAP32[$684>>2] = $690;
         $691 = ((($3)) + 8|0);
         $692 = HEAP32[$691>>2]|0;
         $693 = ((($679)) + 8|0);
         HEAP32[$693>>2] = $692;
         HEAP32[$691>>2] = 0;
         HEAP32[$689>>2] = 0;
         HEAP32[$3>>2] = 0;
         $694 = HEAP32[$678>>2]|0;
         $695 = ((($694)) + 16|0);
         HEAP32[$678>>2] = $695;
        } else {
         $696 = ((($2)) + 16|0);
         __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($696,$3);
        }
        __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
        $$5 = $671;
        break L1;
       }
      }
      $697 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $698 = ($697|0)==($0|0);
      if ($698) {
       $$5 = $0;
       break L1;
      }
      $699 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($697,$1,$2)|0);
      $700 = ($699|0)==($697|0);
      if ($700) {
       $$5 = $697;
       break L1;
      }
      $701 = ((($2)) + 4|0);
      $702 = HEAP32[$701>>2]|0;
      $703 = HEAP32[$2>>2]|0;
      $704 = (($702) - ($703))|0;
      $705 = (($704|0) / 24)&-1;
      $706 = ($705>>>0)<(2);
      if ($706) {
       $$5 = $697;
       break L1;
      }
      $707 = $702;
      $708 = ((($707)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$708);
      $709 = HEAP32[$701>>2]|0;
      $710 = ((($709)) + -24|0);
      $711 = $709;
      while(1) {
       $712 = ($711|0)==($710|0);
       if ($712) {
        break;
       }
       $713 = ((($711)) + -24|0);
       HEAP32[$701>>2] = $713;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($713);
       $$pre$i = HEAP32[$701>>2]|0;
       $711 = $$pre$i;
      }
      $714 = ((($709)) + -48|0);
      $715 = ((($3)) + 11|0);
      $716 = HEAP8[$715>>0]|0;
      $717 = ($716<<24>>24)<(0);
      $718 = HEAP32[$3>>2]|0;
      $719 = ((($3)) + 4|0);
      $720 = HEAP32[$719>>2]|0;
      $721 = $716&255;
      $722 = $717 ? $718 : $3;
      $723 = $717 ? $720 : $721;
      (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($714,$722,$723)|0);
      $724 = HEAP32[$701>>2]|0;
      $725 = ((($724)) + -24|0);
      $$sroa$0$0$$sroa_idx$i493 = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i494592 = HEAP32[$$sroa$0$0$$sroa_idx$i493>>2]|0;
      HEAP32[$5>>2] = $$sroa$0$0$copyload$i494592;
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($4,$725,$5);
      $726 = ((($2)) + 20|0);
      $727 = HEAP32[$726>>2]|0;
      $728 = ((($2)) + 24|0);
      $729 = HEAP32[$728>>2]|0;
      $730 = ($727>>>0)<($729>>>0);
      if ($730) {
       $731 = ((($4)) + 12|0);
       HEAP32[$727>>2] = 0;
       $732 = ((($727)) + 4|0);
       HEAP32[$732>>2] = 0;
       $733 = ((($727)) + 8|0);
       $734 = HEAP32[$731>>2]|0;
       HEAP32[$733>>2] = 0;
       $735 = ((($727)) + 12|0);
       HEAP32[$735>>2] = $734;
       $736 = HEAP32[$4>>2]|0;
       HEAP32[$727>>2] = $736;
       $737 = ((($4)) + 4|0);
       $738 = HEAP32[$737>>2]|0;
       HEAP32[$732>>2] = $738;
       $739 = ((($4)) + 8|0);
       $740 = HEAP32[$739>>2]|0;
       $741 = ((($727)) + 8|0);
       HEAP32[$741>>2] = $740;
       HEAP32[$739>>2] = 0;
       HEAP32[$737>>2] = 0;
       HEAP32[$4>>2] = 0;
       $742 = HEAP32[$726>>2]|0;
       $743 = ((($742)) + 16|0);
       HEAP32[$726>>2] = $743;
      } else {
       $744 = ((($2)) + 16|0);
       __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($744,$4);
      }
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$5 = $699;
      break L1;
      break;
     }
     case 68:  {
      $745 = ((($0)) + 1|0);
      $746 = ($745|0)==($1|0);
      if (!($746)) {
       $747 = HEAP8[$745>>0]|0;
       $748 = $747 << 24 >> 24;
       switch ($748|0) {
       case 112:  {
        $749 = ((($2)) + 4|0);
        $750 = HEAP32[$749>>2]|0;
        $751 = HEAP32[$2>>2]|0;
        $752 = (($750) - ($751))|0;
        $753 = (($752|0) / 24)&-1;
        $754 = ((($0)) + 2|0);
        $755 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($754,$1,$2)|0);
        $756 = HEAP32[$749>>2]|0;
        $757 = HEAP32[$2>>2]|0;
        $758 = (($756) - ($757))|0;
        $759 = (($758|0) / 24)&-1;
        $760 = ($755|0)==($754|0);
        if ($760) {
         break L58;
        }
        $$sroa$0$0$$sroa_idx$i489 = ((($2)) + 12|0);
        $$sroa$0$0$copyload$i490591 = HEAP32[$$sroa$0$0$$sroa_idx$i489>>2]|0;
        HEAP32[$3>>2] = $$sroa$0$0$copyload$i490591;
        $761 = ((($2)) + 20|0);
        $762 = HEAP32[$761>>2]|0;
        $763 = ((($2)) + 24|0);
        $764 = HEAP32[$763>>2]|0;
        $765 = ($762>>>0)<($764>>>0);
        if ($765) {
         HEAP32[$762>>2] = 0;
         $766 = ((($762)) + 4|0);
         HEAP32[$766>>2] = 0;
         $767 = ((($762)) + 8|0);
         HEAP32[$767>>2] = 0;
         $768 = ((($762)) + 12|0);
         HEAP32[$768>>2] = $$sroa$0$0$copyload$i490591;
         $769 = HEAP32[$761>>2]|0;
         $770 = ((($769)) + 16|0);
         HEAP32[$761>>2] = $770;
        } else {
         $771 = ((($2)) + 16|0);
         __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($771,$3);
        }
        $$0 = $753;
        while(1) {
         $772 = ($$0>>>0)<($759>>>0);
         if (!($772)) {
          $$5 = $755;
          break L1;
         }
         $773 = HEAP32[$761>>2]|0;
         $774 = HEAP32[$2>>2]|0;
         $775 = (($774) + (($$0*24)|0)|0);
         $776 = ((($773)) + -12|0);
         $777 = HEAP32[$776>>2]|0;
         $778 = ((($773)) + -8|0);
         $779 = HEAP32[$778>>2]|0;
         $780 = ($777|0)==($779|0);
         if ($780) {
          $783 = ((($773)) + -16|0);
          __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($783,$775);
         } else {
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($777,$775);
          $781 = HEAP32[$776>>2]|0;
          $782 = ((($781)) + 24|0);
          HEAP32[$776>>2] = $782;
         }
         $784 = (($$0) + 1)|0;
         $$0 = $784;
        }
        break;
       }
       case 84: case 116:  {
        $785 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
        $786 = ($785|0)==($0|0);
        if ($786) {
         break L58;
        }
        $787 = HEAP32[$2>>2]|0;
        $788 = ((($2)) + 4|0);
        $789 = HEAP32[$788>>2]|0;
        $790 = ($787|0)==($789|0);
        if ($790) {
         $$5 = $0;
         break L1;
        }
        $791 = ((($789)) + -24|0);
        $$sroa$0$0$$sroa_idx$i487 = ((($2)) + 12|0);
        $$sroa$0$0$copyload$i488590 = HEAP32[$$sroa$0$0$$sroa_idx$i487>>2]|0;
        HEAP32[$4>>2] = $$sroa$0$0$copyload$i488590;
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3,$791,$4);
        $792 = ((($2)) + 20|0);
        $793 = HEAP32[$792>>2]|0;
        $794 = ((($2)) + 24|0);
        $795 = HEAP32[$794>>2]|0;
        $796 = ($793>>>0)<($795>>>0);
        if ($796) {
         $797 = ((($3)) + 12|0);
         HEAP32[$793>>2] = 0;
         $798 = ((($793)) + 4|0);
         HEAP32[$798>>2] = 0;
         $799 = ((($793)) + 8|0);
         $800 = HEAP32[$797>>2]|0;
         HEAP32[$799>>2] = 0;
         $801 = ((($793)) + 12|0);
         HEAP32[$801>>2] = $800;
         $802 = HEAP32[$3>>2]|0;
         HEAP32[$793>>2] = $802;
         $803 = ((($3)) + 4|0);
         $804 = HEAP32[$803>>2]|0;
         HEAP32[$798>>2] = $804;
         $805 = ((($3)) + 8|0);
         $806 = HEAP32[$805>>2]|0;
         $807 = ((($793)) + 8|0);
         HEAP32[$807>>2] = $806;
         HEAP32[$805>>2] = 0;
         HEAP32[$803>>2] = 0;
         HEAP32[$3>>2] = 0;
         $808 = HEAP32[$792>>2]|0;
         $809 = ((($808)) + 16|0);
         HEAP32[$792>>2] = $809;
        } else {
         $810 = ((($2)) + 16|0);
         __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($810,$3);
        }
        __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
        $$5 = $785;
        break L1;
        break;
       }
       case 118:  {
        $811 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_vector_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
        $812 = ($811|0)==($0|0);
        if ($812) {
         break L58;
        }
        $813 = HEAP32[$2>>2]|0;
        $814 = ((($2)) + 4|0);
        $815 = HEAP32[$814>>2]|0;
        $816 = ($813|0)==($815|0);
        if ($816) {
         $$5 = $0;
         break L1;
        }
        $817 = ((($815)) + -24|0);
        $$sroa$0$0$$sroa_idx$i483 = ((($2)) + 12|0);
        $$sroa$0$0$copyload$i484588 = HEAP32[$$sroa$0$0$$sroa_idx$i483>>2]|0;
        HEAP32[$4>>2] = $$sroa$0$0$copyload$i484588;
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3,$817,$4);
        $818 = ((($2)) + 20|0);
        $819 = HEAP32[$818>>2]|0;
        $820 = ((($2)) + 24|0);
        $821 = HEAP32[$820>>2]|0;
        $822 = ($819>>>0)<($821>>>0);
        if ($822) {
         $823 = ((($3)) + 12|0);
         HEAP32[$819>>2] = 0;
         $824 = ((($819)) + 4|0);
         HEAP32[$824>>2] = 0;
         $825 = ((($819)) + 8|0);
         $826 = HEAP32[$823>>2]|0;
         HEAP32[$825>>2] = 0;
         $827 = ((($819)) + 12|0);
         HEAP32[$827>>2] = $826;
         $828 = HEAP32[$3>>2]|0;
         HEAP32[$819>>2] = $828;
         $829 = ((($3)) + 4|0);
         $830 = HEAP32[$829>>2]|0;
         HEAP32[$824>>2] = $830;
         $831 = ((($3)) + 8|0);
         $832 = HEAP32[$831>>2]|0;
         $833 = ((($819)) + 8|0);
         HEAP32[$833>>2] = $832;
         HEAP32[$831>>2] = 0;
         HEAP32[$829>>2] = 0;
         HEAP32[$3>>2] = 0;
         $834 = HEAP32[$818>>2]|0;
         $835 = ((($834)) + 16|0);
         HEAP32[$818>>2] = $835;
        } else {
         $836 = ((($2)) + 16|0);
         __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($836,$3);
        }
        __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
        $$5 = $811;
        break L1;
        break;
       }
       default: {
        break L58;
       }
       }
      }
      break;
     }
     default: {
     }
     }
    } while(0);
    $837 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
    $838 = ($837|0)==($0|0);
    if ($838) {
     $839 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
     $840 = ($839|0)==($0|0);
     if ($840) {
      $$5 = $0;
     } else {
      $841 = HEAP32[$2>>2]|0;
      $842 = ((($2)) + 4|0);
      $843 = HEAP32[$842>>2]|0;
      $844 = ($841|0)==($843|0);
      if ($844) {
       $$5 = $0;
      } else {
       $845 = ((($843)) + -24|0);
       $$sroa$0$0$$sroa_idx$i = ((($2)) + 12|0);
       $$sroa$0$0$copyload$i589 = HEAP32[$$sroa$0$0$$sroa_idx$i>>2]|0;
       HEAP32[$4>>2] = $$sroa$0$0$copyload$i589;
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3,$845,$4);
       $846 = ((($2)) + 20|0);
       $847 = HEAP32[$846>>2]|0;
       $848 = ((($2)) + 24|0);
       $849 = HEAP32[$848>>2]|0;
       $850 = ($847>>>0)<($849>>>0);
       if ($850) {
        $851 = ((($3)) + 12|0);
        HEAP32[$847>>2] = 0;
        $852 = ((($847)) + 4|0);
        HEAP32[$852>>2] = 0;
        $853 = ((($847)) + 8|0);
        $854 = HEAP32[$851>>2]|0;
        HEAP32[$853>>2] = 0;
        $855 = ((($847)) + 12|0);
        HEAP32[$855>>2] = $854;
        $856 = HEAP32[$3>>2]|0;
        HEAP32[$847>>2] = $856;
        $857 = ((($3)) + 4|0);
        $858 = HEAP32[$857>>2]|0;
        HEAP32[$852>>2] = $858;
        $859 = ((($3)) + 8|0);
        $860 = HEAP32[$859>>2]|0;
        $861 = ((($847)) + 8|0);
        HEAP32[$861>>2] = $860;
        HEAP32[$859>>2] = 0;
        HEAP32[$857>>2] = 0;
        HEAP32[$3>>2] = 0;
        $862 = HEAP32[$846>>2]|0;
        $863 = ((($862)) + 16|0);
        HEAP32[$846>>2] = $863;
       } else {
        $864 = ((($2)) + 16|0);
        __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($864,$3);
       }
       __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
       $$5 = $839;
      }
     }
    } else {
     $$5 = $837;
    }
   } else {
    $$5 = $104;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$5|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $$pr = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = 0;
 $3 = ($0|0)==($1|0);
 if ($3) {
  $$2 = $0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = ($4<<24>>24)==(114);
  if ($5) {
   HEAP32[$2>>2] = 4;
   $6 = ((($0)) + 1|0);
   $$pr = HEAP8[$6>>0]|0;
   $$0 = $6;$10 = 4;$7 = $$pr;
  } else {
   $$0 = $0;$10 = 0;$7 = $4;
  }
  $8 = ($7<<24>>24)==(86);
  if ($8) {
   $9 = $10 | 2;
   HEAP32[$2>>2] = $9;
   $11 = ((($$0)) + 1|0);
   $$pre = HEAP8[$11>>0]|0;
   $$1 = $11;$12 = $$pre;$15 = $9;
  } else {
   $$1 = $$0;$12 = $7;$15 = $10;
  }
  $13 = ($12<<24>>24)==(75);
  if ($13) {
   $14 = $15 | 1;
   HEAP32[$2>>2] = $14;
   $16 = ((($$1)) + 1|0);
   $$2 = $16;
  } else {
   $$2 = $$1;
  }
 }
 return ($$2|0);
}
function __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 4;
 $8 = (($7) + 1)|0;
 $9 = (__ZNKSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE8max_sizeEv($0)|0);
 $10 = ($9>>>0)<($8>>>0);
 if ($10) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $11 = ((($0)) + 12|0);
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($13) - ($14))|0;
  $16 = $15 >> 4;
  $17 = $9 >>> 1;
  $18 = ($16>>>0)<($17>>>0);
  $19 = $15 >> 3;
  $20 = ($19>>>0)<($8>>>0);
  $$sroa$speculated$i = $20 ? $8 : $19;
  $$sroa$speculated$$i = $18 ? $$sroa$speculated$i : $9;
  $21 = HEAP32[$3>>2]|0;
  $22 = (($21) - ($14))|0;
  $23 = $22 >> 4;
  __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($2,$$sroa$speculated$$i,$23,$11);
  $24 = ((($2)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  HEAP32[$25>>2] = 0;
  $26 = ((($25)) + 4|0);
  HEAP32[$26>>2] = 0;
  $27 = ((($25)) + 8|0);
  $28 = HEAP32[$1>>2]|0;
  HEAP32[$27>>2] = 0;
  $29 = ((($25)) + 12|0);
  HEAP32[$29>>2] = $28;
  $30 = ((($25)) + 16|0);
  HEAP32[$24>>2] = $30;
  __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($0,$2);
  __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZNSt3__211char_traitsIcE6lengthEPKc($2)|0);
 $4 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($0,$1,$2,$3)|0);
 return ($4|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIcE6lengthEPKc($1)|0);
 $3 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($0,$1,$2)|0);
 return ($3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($0,$1);
 $2 = ((($0)) + 12|0);
 $3 = ((($1)) + 12|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($2,$3);
 return;
}
function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = (($6|0) / 24)&-1;
 $8 = (($7) + 1)|0;
 $9 = (__ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8max_sizeEv($0)|0);
 $10 = ($9>>>0)<($8>>>0);
 if ($10) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $11 = ((($0)) + 12|0);
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($13) - ($14))|0;
  $16 = (($15|0) / 24)&-1;
  $17 = $9 >>> 1;
  $18 = ($16>>>0)<($17>>>0);
  $19 = $16 << 1;
  $20 = ($19>>>0)<($8>>>0);
  $$sroa$speculated$i = $20 ? $8 : $19;
  $$sroa$speculated$$i = $18 ? $$sroa$speculated$i : $9;
  $21 = HEAP32[$3>>2]|0;
  $22 = (($21) - ($14))|0;
  $23 = (($22|0) / 24)&-1;
  __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($2,$$sroa$speculated$$i,$23,$11);
  $24 = ((($2)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($25,$1);
  $26 = ((($25)) + 24|0);
  HEAP32[$24>>2] = $26;
  __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0,$2);
  __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $3 = sp;
 $4 = ($0|0)==($1|0);
 L1: do {
  if ($4) {
   $$1 = $0;
  } else {
   $5 = HEAP8[$0>>0]|0;
   $6 = $5 << 24 >> 24;
   do {
    switch ($6|0) {
    case 118:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($3,5035);
     $7 = ((($2)) + 4|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = ((($2)) + 8|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = ($8>>>0)<($10>>>0);
     if ($11) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($8,$3);
      $12 = HEAP32[$7>>2]|0;
      $13 = ((($12)) + 24|0);
      HEAP32[$7>>2] = $13;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $14 = ((($0)) + 1|0);
     $$1 = $14;
     break L1;
     break;
    }
    case 119:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj8EEERAT__Kc($3);
     $15 = ((($2)) + 4|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ((($2)) + 8|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16>>>0)<($18>>>0);
     if ($19) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($16,$3);
      $20 = HEAP32[$15>>2]|0;
      $21 = ((($20)) + 24|0);
      HEAP32[$15>>2] = $21;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $22 = ((($0)) + 1|0);
     $$1 = $22;
     break L1;
     break;
    }
    case 98:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($3,5040);
     $23 = ((($2)) + 4|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($2)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($24>>>0)<($26>>>0);
     if ($27) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($24,$3);
      $28 = HEAP32[$23>>2]|0;
      $29 = ((($28)) + 24|0);
      HEAP32[$23>>2] = $29;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $30 = ((($0)) + 1|0);
     $$1 = $30;
     break L1;
     break;
    }
    case 99:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($3,4809);
     $31 = ((($2)) + 4|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ((($2)) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($32>>>0)<($34>>>0);
     if ($35) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($32,$3);
      $36 = HEAP32[$31>>2]|0;
      $37 = ((($36)) + 24|0);
      HEAP32[$31>>2] = $37;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $38 = ((($0)) + 1|0);
     $$1 = $38;
     break L1;
     break;
    }
    case 97:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($3,4814);
     $39 = ((($2)) + 4|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ((($2)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($40>>>0)<($42>>>0);
     if ($43) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($40,$3);
      $44 = HEAP32[$39>>2]|0;
      $45 = ((($44)) + 24|0);
      HEAP32[$39>>2] = $45;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $46 = ((($0)) + 1|0);
     $$1 = $46;
     break L1;
     break;
    }
    case 104:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($3,4826);
     $47 = ((($2)) + 4|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ((($2)) + 8|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($48>>>0)<($50>>>0);
     if ($51) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($48,$3);
      $52 = HEAP32[$47>>2]|0;
      $53 = ((($52)) + 24|0);
      HEAP32[$47>>2] = $53;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $54 = ((($0)) + 1|0);
     $$1 = $54;
     break L1;
     break;
    }
    case 115:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($3,4840);
     $55 = ((($2)) + 4|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ((($2)) + 8|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($56>>>0)<($58>>>0);
     if ($59) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($56,$3);
      $60 = HEAP32[$55>>2]|0;
      $61 = ((($60)) + 24|0);
      HEAP32[$55>>2] = $61;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $62 = ((($0)) + 1|0);
     $$1 = $62;
     break L1;
     break;
    }
    case 116:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($3,4846);
     $63 = ((($2)) + 4|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ((($2)) + 8|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = ($64>>>0)<($66>>>0);
     if ($67) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($64,$3);
      $68 = HEAP32[$63>>2]|0;
      $69 = ((($68)) + 24|0);
      HEAP32[$63>>2] = $69;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $70 = ((($0)) + 1|0);
     $$1 = $70;
     break L1;
     break;
    }
    case 105:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj4EEERAT__Kc($3,5045);
     $71 = ((($2)) + 4|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = ((($2)) + 8|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = ($72>>>0)<($74>>>0);
     if ($75) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($72,$3);
      $76 = HEAP32[$71>>2]|0;
      $77 = ((($76)) + 24|0);
      HEAP32[$71>>2] = $77;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $78 = ((($0)) + 1|0);
     $$1 = $78;
     break L1;
     break;
    }
    case 106:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($3,5049);
     $79 = ((($2)) + 4|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = ((($2)) + 8|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = ($80>>>0)<($82>>>0);
     if ($83) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($80,$3);
      $84 = HEAP32[$79>>2]|0;
      $85 = ((($84)) + 24|0);
      HEAP32[$79>>2] = $85;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $86 = ((($0)) + 1|0);
     $$1 = $86;
     break L1;
     break;
    }
    case 108:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($3,5062);
     $87 = ((($2)) + 4|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = ((($2)) + 8|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ($88>>>0)<($90>>>0);
     if ($91) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($88,$3);
      $92 = HEAP32[$87>>2]|0;
      $93 = ((($92)) + 24|0);
      HEAP32[$87>>2] = $93;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $94 = ((($0)) + 1|0);
     $$1 = $94;
     break L1;
     break;
    }
    case 109:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($3,5067);
     $95 = ((($2)) + 4|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = ((($2)) + 8|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = ($96>>>0)<($98>>>0);
     if ($99) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($96,$3);
      $100 = HEAP32[$95>>2]|0;
      $101 = ((($100)) + 24|0);
      HEAP32[$95>>2] = $101;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $102 = ((($0)) + 1|0);
     $$1 = $102;
     break L1;
     break;
    }
    case 120:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3,5081);
     $103 = ((($2)) + 4|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ((($2)) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($104>>>0)<($106>>>0);
     if ($107) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($104,$3);
      $108 = HEAP32[$103>>2]|0;
      $109 = ((($108)) + 24|0);
      HEAP32[$103>>2] = $109;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $110 = ((($0)) + 1|0);
     $$1 = $110;
     break L1;
     break;
    }
    case 121:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj19EEERAT__Kc($3);
     $111 = ((($2)) + 4|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ((($2)) + 8|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = ($112>>>0)<($114>>>0);
     if ($115) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($112,$3);
      $116 = HEAP32[$111>>2]|0;
      $117 = ((($116)) + 24|0);
      HEAP32[$111>>2] = $117;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $118 = ((($0)) + 1|0);
     $$1 = $118;
     break L1;
     break;
    }
    case 110:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($3,4875);
     $119 = ((($2)) + 4|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = ((($2)) + 8|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = ($120>>>0)<($122>>>0);
     if ($123) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($120,$3);
      $124 = HEAP32[$119>>2]|0;
      $125 = ((($124)) + 24|0);
      HEAP32[$119>>2] = $125;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $126 = ((($0)) + 1|0);
     $$1 = $126;
     break L1;
     break;
    }
    case 111:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($3,4884);
     $127 = ((($2)) + 4|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ((($2)) + 8|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128>>>0)<($130>>>0);
     if ($131) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($128,$3);
      $132 = HEAP32[$127>>2]|0;
      $133 = ((($132)) + 24|0);
      HEAP32[$127>>2] = $133;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $134 = ((($0)) + 1|0);
     $$1 = $134;
     break L1;
     break;
    }
    case 102:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($3,5091);
     $135 = ((($2)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = ((($2)) + 8|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($136>>>0)<($138>>>0);
     if ($139) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($136,$3);
      $140 = HEAP32[$135>>2]|0;
      $141 = ((($140)) + 24|0);
      HEAP32[$135>>2] = $141;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $142 = ((($0)) + 1|0);
     $$1 = $142;
     break L1;
     break;
    }
    case 100:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj7EEERAT__Kc($3);
     $143 = ((($2)) + 4|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = ((($2)) + 8|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($144>>>0)<($146>>>0);
     if ($147) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($144,$3);
      $148 = HEAP32[$143>>2]|0;
      $149 = ((($148)) + 24|0);
      HEAP32[$143>>2] = $149;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $150 = ((($0)) + 1|0);
     $$1 = $150;
     break L1;
     break;
    }
    case 101:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($3,5097);
     $151 = ((($2)) + 4|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ((($2)) + 8|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($152,$3);
      $156 = HEAP32[$151>>2]|0;
      $157 = ((($156)) + 24|0);
      HEAP32[$151>>2] = $157;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $158 = ((($0)) + 1|0);
     $$1 = $158;
     break L1;
     break;
    }
    case 103:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3,5109);
     $159 = ((($2)) + 4|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ((($2)) + 8|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = ($160>>>0)<($162>>>0);
     if ($163) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($160,$3);
      $164 = HEAP32[$159>>2]|0;
      $165 = ((($164)) + 24|0);
      HEAP32[$159>>2] = $165;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $166 = ((($0)) + 1|0);
     $$1 = $166;
     break L1;
     break;
    }
    case 122:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj4EEERAT__Kc($3,5120);
     $167 = ((($2)) + 4|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = ((($2)) + 8|0);
     $170 = HEAP32[$169>>2]|0;
     $171 = ($168>>>0)<($170>>>0);
     if ($171) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($168,$3);
      $172 = HEAP32[$167>>2]|0;
      $173 = ((($172)) + 24|0);
      HEAP32[$167>>2] = $173;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $174 = ((($0)) + 1|0);
     $$1 = $174;
     break L1;
     break;
    }
    case 117:  {
     $175 = ((($0)) + 1|0);
     $176 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($175,$1,$2)|0);
     $177 = ($176|0)==($175|0);
     $$ = $177 ? $0 : $176;
     $$1 = $$;
     break L1;
     break;
    }
    case 68:  {
     $178 = ((($0)) + 1|0);
     $179 = ($178|0)==($1|0);
     if ($179) {
      $$1 = $0;
      break L1;
     }
     $180 = HEAP8[$178>>0]|0;
     $181 = $180 << 24 >> 24;
     switch ($181|0) {
     case 100:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3,5124);
      $182 = ((($2)) + 4|0);
      $183 = HEAP32[$182>>2]|0;
      $184 = ((($2)) + 8|0);
      $185 = HEAP32[$184>>2]|0;
      $186 = ($183>>>0)<($185>>>0);
      if ($186) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($183,$3);
       $187 = HEAP32[$182>>2]|0;
       $188 = ((($187)) + 24|0);
       HEAP32[$182>>2] = $188;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $189 = ((($0)) + 2|0);
      $$1 = $189;
      break L1;
      break;
     }
     case 101:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3,5134);
      $190 = ((($2)) + 4|0);
      $191 = HEAP32[$190>>2]|0;
      $192 = ((($2)) + 8|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($191>>>0)<($193>>>0);
      if ($194) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($191,$3);
       $195 = HEAP32[$190>>2]|0;
       $196 = ((($195)) + 24|0);
       HEAP32[$190>>2] = $196;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $197 = ((($0)) + 2|0);
      $$1 = $197;
      break L1;
      break;
     }
     case 102:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3,5145);
      $198 = ((($2)) + 4|0);
      $199 = HEAP32[$198>>2]|0;
      $200 = ((($2)) + 8|0);
      $201 = HEAP32[$200>>2]|0;
      $202 = ($199>>>0)<($201>>>0);
      if ($202) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($199,$3);
       $203 = HEAP32[$198>>2]|0;
       $204 = ((($203)) + 24|0);
       HEAP32[$198>>2] = $204;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $205 = ((($0)) + 2|0);
      $$1 = $205;
      break L1;
      break;
     }
     case 104:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3,5155);
      $206 = ((($2)) + 4|0);
      $207 = HEAP32[$206>>2]|0;
      $208 = ((($2)) + 8|0);
      $209 = HEAP32[$208>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($207,$3);
       $211 = HEAP32[$206>>2]|0;
       $212 = ((($211)) + 24|0);
       HEAP32[$206>>2] = $212;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $213 = ((($0)) + 2|0);
      $$1 = $213;
      break L1;
      break;
     }
     case 105:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($3,5165);
      $214 = ((($2)) + 4|0);
      $215 = HEAP32[$214>>2]|0;
      $216 = ((($2)) + 8|0);
      $217 = HEAP32[$216>>2]|0;
      $218 = ($215>>>0)<($217>>>0);
      if ($218) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($215,$3);
       $219 = HEAP32[$214>>2]|0;
       $220 = ((($219)) + 24|0);
       HEAP32[$214>>2] = $220;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $221 = ((($0)) + 2|0);
      $$1 = $221;
      break L1;
      break;
     }
     case 115:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($3,5174);
      $222 = ((($2)) + 4|0);
      $223 = HEAP32[$222>>2]|0;
      $224 = ((($2)) + 8|0);
      $225 = HEAP32[$224>>2]|0;
      $226 = ($223>>>0)<($225>>>0);
      if ($226) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($223,$3);
       $227 = HEAP32[$222>>2]|0;
       $228 = ((($227)) + 24|0);
       HEAP32[$222>>2] = $228;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $229 = ((($0)) + 2|0);
      $$1 = $229;
      break L1;
      break;
     }
     case 97:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($3,5183);
      $230 = ((($2)) + 4|0);
      $231 = HEAP32[$230>>2]|0;
      $232 = ((($2)) + 8|0);
      $233 = HEAP32[$232>>2]|0;
      $234 = ($231>>>0)<($233>>>0);
      if ($234) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($231,$3);
       $235 = HEAP32[$230>>2]|0;
       $236 = ((($235)) + 24|0);
       HEAP32[$230>>2] = $236;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $237 = ((($0)) + 2|0);
      $$1 = $237;
      break L1;
      break;
     }
     case 110:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($3,5188);
      $238 = ((($2)) + 4|0);
      $239 = HEAP32[$238>>2]|0;
      $240 = ((($2)) + 8|0);
      $241 = HEAP32[$240>>2]|0;
      $242 = ($239>>>0)<($241>>>0);
      if ($242) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($239,$3);
       $243 = HEAP32[$238>>2]|0;
       $244 = ((($243)) + 24|0);
       HEAP32[$238>>2] = $244;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $245 = ((($0)) + 2|0);
      $$1 = $245;
      break L1;
      break;
     }
     default: {
      $$1 = $0;
      break L1;
     }
     }
     break;
    }
    default: {
     $$1 = $0;
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_116parse_array_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i132 = 0, $$0$i$i$i112 = 0, $$0$i$i$i119 = 0, $$0$i$i$i123 = 0, $$0$i$i$i127 = 0, $$021$i$i = 0, $$021$ph$i$i = 0, $$7 = 0, $$off = 0, $$pre$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0;
 var $exitcond$i$i$i$i = 0, $exitcond$i$i$i$i133 = 0, $exitcond$i$i$i113 = 0, $exitcond$i$i$i120 = 0, $exitcond$i$i$i124 = 0, $exitcond$i$i$i128 = 0, $or$cond109 = 0, $scevgep23$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $3 = sp + 96|0;
 $4 = sp + 72|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 $10 = ($0|0)==($1|0);
 do {
  if ($10) {
   $$7 = $0;
  } else {
   $11 = HEAP8[$0>>0]|0;
   $12 = ($11<<24>>24)==(65);
   if ($12) {
    $13 = ((($0)) + 1|0);
    $14 = ($13|0)==($1|0);
    if ($14) {
     $$7 = $0;
    } else {
     $15 = HEAP8[$13>>0]|0;
     $16 = ($15<<24>>24)==(95);
     if ($16) {
      $17 = ((($0)) + 2|0);
      $18 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($17,$1,$2)|0);
      $19 = ($18|0)==($17|0);
      if ($19) {
       $$7 = $0;
       break;
      }
      $20 = HEAP32[$2>>2]|0;
      $21 = ((($2)) + 4|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ($20|0)==($22|0);
      if ($23) {
       $$7 = $0;
       break;
      }
      $24 = ((($22)) + -12|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($3,$24,2);
      $25 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3590)|0);
      $26 = ((($3)) + 11|0);
      $27 = HEAP8[$26>>0]|0;
      $28 = ($27<<24>>24)<(0);
      $29 = ((($3)) + 4|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = $27&255;
      $32 = $28 ? $30 : $31;
      $33 = ($25|0)==($32|0);
      if ($33) {
       $34 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($3,3590,$25)|0);
       $35 = ($34|0)==(0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       if ($35) {
        $36 = HEAP32[$21>>2]|0;
        $37 = ((($36)) + -12|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($37);
       }
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      }
      $38 = HEAP32[$21>>2]|0;
      $39 = ((($38)) + -12|0);
      (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($39,0,5031)|0);
      $$7 = $18;
      break;
     }
     $$off = (($15) + -49)<<24>>24;
     $40 = ($$off&255)<(9);
     if ($40) {
      $41 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($13,$1)|0);
      $42 = ($41|0)==($1|0);
      if ($42) {
       $$7 = $0;
       break;
      }
      $43 = HEAP8[$41>>0]|0;
      $44 = ($43<<24>>24)==(95);
      if (!($44)) {
       $$7 = $0;
       break;
      }
      $45 = ((($41)) + 1|0);
      $46 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($45,$1,$2)|0);
      $47 = ($46|0)==($45|0);
      if ($47) {
       $$7 = $0;
       break;
      }
      $48 = HEAP32[$2>>2]|0;
      $49 = ((($2)) + 4|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = ($48|0)==($50|0);
      if ($51) {
       $$7 = $0;
       break;
      }
      $52 = ((($50)) + -12|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($3,$52,2);
      $53 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3590)|0);
      $54 = ((($3)) + 11|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = ($55<<24>>24)<(0);
      $57 = ((($3)) + 4|0);
      $58 = HEAP32[$57>>2]|0;
      $59 = $55&255;
      $60 = $56 ? $58 : $59;
      $61 = ($53|0)==($60|0);
      if ($61) {
       $62 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($3,3590,$53)|0);
       $63 = ($62|0)==(0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       if ($63) {
        $64 = HEAP32[$49>>2]|0;
        $65 = ((($64)) + -12|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($65);
       }
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      }
      $66 = HEAP32[$49>>2]|0;
      $67 = ((($66)) + -12|0);
      ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
      $68 = $13;
      $69 = $41;
      $70 = (($69) - ($68))|0;
      $71 = ($70>>>0)>(4294967279);
      if ($71) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($6);
       // unreachable;
      }
      $72 = ($70>>>0)<(11);
      if ($72) {
       $73 = $70&255;
       $74 = ((($6)) + 11|0);
       HEAP8[$74>>0] = $73;
       $$021$ph$i$i = $6;
      } else {
       $75 = (($70) + 16)|0;
       $76 = $75 & -16;
       $77 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($76)|0);
       HEAP32[$6>>2] = $77;
       $78 = $76 | -2147483648;
       $79 = ((($6)) + 8|0);
       HEAP32[$79>>2] = $78;
       $80 = ((($6)) + 4|0);
       HEAP32[$80>>2] = $70;
       $$021$ph$i$i = $77;
      }
      $$0$i$i = $13;$$021$i$i = $$021$ph$i$i;
      while(1) {
       $81 = ($$0$i$i|0)==($41|0);
       if ($81) {
        break;
       }
       __ZNSt3__211char_traitsIcE6assignERcRKc($$021$i$i,$$0$i$i);
       $82 = ((($$0$i$i)) + 1|0);
       $83 = ((($$021$i$i)) + 1|0);
       $$0$i$i = $82;$$021$i$i = $83;
      }
      $scevgep23$i$i = (($$021$ph$i$i) + ($70)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($scevgep23$i$i,$3);
      $84 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6,0,3590)|0);
      ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
      $$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $85 = (($6) + ($$0$i$i$i<<2)|0);
       HEAP32[$85>>2] = 0;
       $86 = (($$0$i$i$i) + 1)|0;
       $$0$i$i$i = $86;
      }
      $87 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5,3645)|0);
      ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
      $$0$i$i$i112 = 0;
      while(1) {
       $exitcond$i$i$i113 = ($$0$i$i$i112|0)==(3);
       if ($exitcond$i$i$i113) {
        break;
       }
       $88 = (($5) + ($$0$i$i$i112<<2)|0);
       HEAP32[$88>>2] = 0;
       $89 = (($$0$i$i$i112) + 1)|0;
       $$0$i$i$i112 = $89;
      }
      $90 = ((($4)) + 11|0);
      $91 = HEAP8[$90>>0]|0;
      $92 = ($91<<24>>24)<(0);
      $93 = HEAP32[$4>>2]|0;
      $94 = ((($4)) + 4|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = $91&255;
      $97 = $92 ? $93 : $4;
      $98 = $92 ? $95 : $96;
      (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($67,0,$97,$98)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      $$7 = $46;
      break;
     }
     $99 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($13,$1,$2)|0);
     $100 = ($99|0)==($13|0);
     $101 = ($99|0)==($1|0);
     $or$cond109 = $100 | $101;
     if ($or$cond109) {
      $$7 = $0;
     } else {
      $102 = HEAP8[$99>>0]|0;
      $103 = ($102<<24>>24)==(95);
      if ($103) {
       $104 = ((($99)) + 1|0);
       $105 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($104,$1,$2)|0);
       $106 = ($105|0)==($104|0);
       if ($106) {
        $$7 = $0;
       } else {
        $107 = ((($2)) + 4|0);
        $108 = HEAP32[$107>>2]|0;
        $109 = HEAP32[$2>>2]|0;
        $110 = (($108) - ($109))|0;
        $111 = (($110|0) / 24)&-1;
        $112 = ($111>>>0)<(2);
        if ($112) {
         $$7 = $0;
        } else {
         $113 = $108;
         $114 = ((($113)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($4,$114);
         $115 = HEAP32[$107>>2]|0;
         $116 = ((($115)) + -24|0);
         $117 = $115;
         while(1) {
          $118 = ($117|0)==($116|0);
          if ($118) {
           break;
          }
          $119 = ((($117)) + -24|0);
          HEAP32[$107>>2] = $119;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($119);
          $$pre$i = HEAP32[$107>>2]|0;
          $117 = $$pre$i;
         }
         $120 = ((($115)) + -48|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($5,$120);
         $121 = HEAP32[$107>>2]|0;
         $122 = ((($121)) + -24|0);
         $123 = ((($122)) + 11|0);
         $124 = HEAP8[$123>>0]|0;
         $125 = ($124<<24>>24)<(0);
         if ($125) {
          $126 = HEAP32[$122>>2]|0;
          HEAP8[$3>>0] = 0;
          __ZNSt3__211char_traitsIcE6assignERcRKc($126,$3);
          $127 = ((($121)) + -20|0);
          HEAP32[$127>>2] = 0;
         } else {
          HEAP8[$3>>0] = 0;
          __ZNSt3__211char_traitsIcE6assignERcRKc($122,$3);
          HEAP8[$123>>0] = 0;
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($122);
         ;HEAP32[$122>>2]=HEAP32[$4>>2]|0;HEAP32[$122+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$122+8>>2]=HEAP32[$4+8>>2]|0;
         $$0$i$i$i$i = 0;
         while(1) {
          $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
          if ($exitcond$i$i$i$i) {
           break;
          }
          $128 = (($4) + ($$0$i$i$i$i<<2)|0);
          HEAP32[$128>>2] = 0;
          $129 = (($$0$i$i$i$i) + 1)|0;
          $$0$i$i$i$i = $129;
         }
         $130 = ((($4)) + 12|0);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($3,$130,2);
         $131 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3590)|0);
         $132 = ((($3)) + 11|0);
         $133 = HEAP8[$132>>0]|0;
         $134 = ($133<<24>>24)<(0);
         $135 = ((($3)) + 4|0);
         $136 = HEAP32[$135>>2]|0;
         $137 = $133&255;
         $138 = $134 ? $136 : $137;
         $139 = ($131|0)==($138|0);
         if ($139) {
          $140 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($3,3590,$131)|0);
          $141 = ($140|0)==(0);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
          if ($141) {
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($130);
          }
         } else {
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9,$5);
         $142 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($9,0,3590)|0);
         ;HEAP32[$8>>2]=HEAP32[$9>>2]|0;HEAP32[$8+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$9+8>>2]|0;
         $$0$i$i$i119 = 0;
         while(1) {
          $exitcond$i$i$i120 = ($$0$i$i$i119|0)==(3);
          if ($exitcond$i$i$i120) {
           break;
          }
          $143 = (($9) + ($$0$i$i$i119<<2)|0);
          HEAP32[$143>>2] = 0;
          $144 = (($$0$i$i$i119) + 1)|0;
          $$0$i$i$i119 = $144;
         }
         $145 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8,3645)|0);
         ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;
         $$0$i$i$i123 = 0;
         while(1) {
          $exitcond$i$i$i124 = ($$0$i$i$i123|0)==(3);
          if ($exitcond$i$i$i124) {
           break;
          }
          $146 = (($8) + ($$0$i$i$i123<<2)|0);
          HEAP32[$146>>2] = 0;
          $147 = (($$0$i$i$i123) + 1)|0;
          $$0$i$i$i123 = $147;
         }
         $148 = ((($130)) + 11|0);
         $149 = HEAP8[$148>>0]|0;
         $150 = ($149<<24>>24)<(0);
         $151 = HEAP32[$130>>2]|0;
         $152 = ((($4)) + 16|0);
         $153 = HEAP32[$152>>2]|0;
         $154 = $149&255;
         $155 = $150 ? $151 : $130;
         $156 = $150 ? $153 : $154;
         $157 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($7,$155,$156)|0);
         ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
         $$0$i$i$i127 = 0;
         while(1) {
          $exitcond$i$i$i128 = ($$0$i$i$i127|0)==(3);
          if ($exitcond$i$i$i128) {
           break;
          }
          $158 = (($7) + ($$0$i$i$i127<<2)|0);
          HEAP32[$158>>2] = 0;
          $159 = (($$0$i$i$i127) + 1)|0;
          $$0$i$i$i127 = $159;
         }
         $160 = HEAP32[$107>>2]|0;
         $161 = ((($160)) + -12|0);
         $162 = ((($161)) + 11|0);
         $163 = HEAP8[$162>>0]|0;
         $164 = ($163<<24>>24)<(0);
         if ($164) {
          $165 = HEAP32[$161>>2]|0;
          HEAP8[$3>>0] = 0;
          __ZNSt3__211char_traitsIcE6assignERcRKc($165,$3);
          $166 = ((($160)) + -8|0);
          HEAP32[$166>>2] = 0;
         } else {
          HEAP8[$3>>0] = 0;
          __ZNSt3__211char_traitsIcE6assignERcRKc($161,$3);
          HEAP8[$162>>0] = 0;
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($161);
         ;HEAP32[$161>>2]=HEAP32[$6>>2]|0;HEAP32[$161+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$161+8>>2]=HEAP32[$6+8>>2]|0;
         $$0$i$i$i$i132 = 0;
         while(1) {
          $exitcond$i$i$i$i133 = ($$0$i$i$i$i132|0)==(3);
          if ($exitcond$i$i$i$i133) {
           break;
          }
          $167 = (($6) + ($$0$i$i$i$i132<<2)|0);
          HEAP32[$167>>2] = 0;
          $168 = (($$0$i$i$i$i132) + 1)|0;
          $$0$i$i$i$i132 = $168;
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
         $$7 = $105;
        }
       }
      } else {
       $$7 = $0;
      }
     }
    }
   } else {
    $$7 = $0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$7|0);
}
function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$2>>2]|0;
 HEAP32[$4>>2] = 0;
 $6 = ((($0)) + 12|0);
 HEAP32[$6>>2] = $5;
 __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8allocateEj($0);
 $7 = HEAP32[$3>>2]|0;
 __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($7,$1);
 $8 = HEAP32[$3>>2]|0;
 $9 = ((($8)) + 24|0);
 HEAP32[$3>>2] = $9;
 return;
}
function __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 4;
 $8 = (($7) + 1)|0;
 $9 = (__ZNKSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE8max_sizeEv($0)|0);
 $10 = ($9>>>0)<($8>>>0);
 if ($10) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $11 = ((($0)) + 12|0);
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($13) - ($14))|0;
  $16 = $15 >> 4;
  $17 = $9 >>> 1;
  $18 = ($16>>>0)<($17>>>0);
  $19 = $15 >> 3;
  $20 = ($19>>>0)<($8>>>0);
  $$sroa$speculated$i = $20 ? $8 : $19;
  $$sroa$speculated$$i = $18 ? $$sroa$speculated$i : $9;
  $21 = HEAP32[$3>>2]|0;
  $22 = (($21) - ($14))|0;
  $23 = $22 >> 4;
  __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($2,$$sroa$speculated$$i,$23,$11);
  $24 = ((($2)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($1)) + 12|0);
  HEAP32[$25>>2] = 0;
  $27 = ((($25)) + 4|0);
  HEAP32[$27>>2] = 0;
  $28 = ((($25)) + 8|0);
  $29 = HEAP32[$26>>2]|0;
  HEAP32[$28>>2] = 0;
  $30 = ((($25)) + 12|0);
  HEAP32[$30>>2] = $29;
  $31 = HEAP32[$1>>2]|0;
  HEAP32[$25>>2] = $31;
  $32 = ((($1)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  HEAP32[$27>>2] = $33;
  $34 = ((($1)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($25)) + 8|0);
  HEAP32[$36>>2] = $35;
  HEAP32[$34>>2] = 0;
  HEAP32[$32>>2] = 0;
  HEAP32[$1>>2] = 0;
  $37 = ((($25)) + 16|0);
  HEAP32[$24>>2] = $37;
  __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($0,$2);
  __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_function_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i$i = 0, $$0105$ph = 0, $$0105$ph$clear = 0, $$0111 = 0, $$088 = 0, $$1112 = 0, $$1112$ph = 0, $$8 = 0, $$pre$i = 0, $$pre$i115 = 0, $$pre$phi158Z2D = 0, $$pre$phi160Z2D = 0, $$pre157 = 0, $$pre159 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $3 = sp + 12|0;
 $4 = sp;
 $5 = ($0|0)==($1|0);
 L1: do {
  if ($5) {
   $$8 = $0;
  } else {
   $6 = HEAP8[$0>>0]|0;
   $7 = ($6<<24>>24)==(70);
   if ($7) {
    $8 = ((($0)) + 1|0);
    $9 = ($8|0)==($1|0);
    if ($9) {
     $$8 = $0;
    } else {
     $10 = HEAP8[$8>>0]|0;
     $11 = ($10<<24>>24)==(89);
     if ($11) {
      $12 = ((($0)) + 2|0);
      $13 = ($12|0)==($1|0);
      if ($13) {
       $$8 = $0;
       break;
      } else {
       $$0111 = $12;
      }
     } else {
      $$0111 = $8;
     }
     $14 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($$0111,$1,$2)|0);
     $15 = ($14|0)==($$0111|0);
     if ($15) {
      $$8 = $0;
     } else {
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $16 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3598)|0);
      $17 = ($16>>>0)>(4294967279);
      if ($17) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $18 = ($16>>>0)<(11);
      if ($18) {
       $19 = $16&255;
       $20 = ((($4)) + 11|0);
       HEAP8[$20>>0] = $19;
       $$pre159 = ((($4)) + 4|0);
       $$0$i$i = $4;$$pre$phi158Z2D = $20;$$pre$phi160Z2D = $$pre159;
      } else {
       $21 = (($16) + 16)|0;
       $22 = $21 & -16;
       $23 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($22)|0);
       HEAP32[$4>>2] = $23;
       $24 = $22 | -2147483648;
       $25 = ((($4)) + 8|0);
       HEAP32[$25>>2] = $24;
       $26 = ((($4)) + 4|0);
       HEAP32[$26>>2] = $16;
       $$pre157 = ((($4)) + 11|0);
       $$0$i$i = $23;$$pre$phi158Z2D = $$pre157;$$pre$phi160Z2D = $26;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i,3598,$16)|0);
      $27 = (($$0$i$i) + ($16)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($27,$3);
      $28 = ((($2)) + 4|0);
      $29 = ((($3)) + 11|0);
      $30 = ((($3)) + 4|0);
      $$0105$ph = 0;$$1112$ph = $14;
      L16: while(1) {
       $$1112 = $$1112$ph;
       L18: while(1) {
        $31 = ($$1112|0)==($1|0);
        if ($31) {
         label = 15;
         break L16;
        }
        $37 = HEAP8[$$1112>>0]|0;
        switch ($37<<24>>24) {
        case 69:  {
         label = 19;
         break L16;
         break;
        }
        case 118:  {
         $39 = ((($$1112)) + 1|0);
         $$1112 = $39;
         continue L18;
         break;
        }
        case 82:  {
         $40 = ((($$1112)) + 1|0);
         $41 = ($40|0)==($1|0);
         if (!($41)) {
          $42 = HEAP8[$40>>0]|0;
          $43 = ($42<<24>>24)==(69);
          if ($43) {
           $$0105$ph = 1;$$1112$ph = $40;
           continue L16;
          }
         }
         break;
        }
        case 79:  {
         $44 = ((($$1112)) + 1|0);
         $45 = ($44|0)==($1|0);
         if (!($45)) {
          $46 = HEAP8[$44>>0]|0;
          $47 = ($46<<24>>24)==(69);
          if ($47) {
           $$0105$ph = 2;$$1112$ph = $44;
           continue L16;
          }
         }
         break;
        }
        default: {
        }
        }
        $48 = HEAP32[$28>>2]|0;
        $49 = HEAP32[$2>>2]|0;
        $50 = (($48) - ($49))|0;
        $51 = (($50|0) / 24)&-1;
        $52 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($$1112,$1,$2)|0);
        $53 = HEAP32[$28>>2]|0;
        $54 = HEAP32[$2>>2]|0;
        $55 = (($53) - ($54))|0;
        $56 = (($55|0) / 24)&-1;
        $57 = ($52|0)==($$1112|0);
        $58 = ($52|0)==($1|0);
        $or$cond = $57 | $58;
        if ($or$cond) {
         break L16;
        } else {
         $$088 = $51;
        }
        while(1) {
         $59 = ($$088>>>0)<($56>>>0);
         if (!($59)) {
          $$0 = $51;
          break;
         }
         $60 = HEAP8[$$pre$phi158Z2D>>0]|0;
         $61 = ($60<<24>>24)<(0);
         $62 = HEAP32[$$pre$phi160Z2D>>2]|0;
         $63 = $60&255;
         $64 = $61 ? $62 : $63;
         $65 = ($64>>>0)>(1);
         if ($65) {
          (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4,3820)|0);
         }
         $66 = HEAP32[$2>>2]|0;
         $67 = (($66) + (($$088*24)|0)|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$67);
         $68 = HEAP8[$29>>0]|0;
         $69 = ($68<<24>>24)<(0);
         $70 = HEAP32[$3>>2]|0;
         $71 = HEAP32[$30>>2]|0;
         $72 = $68&255;
         $73 = $69 ? $70 : $3;
         $74 = $69 ? $71 : $72;
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($4,$73,$74)|0);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
         $75 = (($$088) + 1)|0;
         $$088 = $75;
        }
        while(1) {
         $76 = ($$0>>>0)<($56>>>0);
         if (!($76)) {
          $$1112 = $52;
          continue L18;
         }
         $77 = HEAP32[$28>>2]|0;
         $78 = ((($77)) + -24|0);
         $79 = $77;
         while(1) {
          $80 = ($79|0)==($78|0);
          if ($80) {
           break;
          }
          $81 = ((($79)) + -24|0);
          HEAP32[$28>>2] = $81;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($81);
          $$pre$i115 = HEAP32[$28>>2]|0;
          $79 = $$pre$i115;
         }
         $82 = (($$0) + 1)|0;
         $$0 = $82;
        }
       }
      }
      L41: do {
       if ((label|0) == 15) {
        $32 = HEAP32[$28>>2]|0;
        $33 = ((($32)) + -24|0);
        $34 = $32;
        while(1) {
         $35 = ($34|0)==($33|0);
         if ($35) {
          break L41;
         }
         $36 = ((($34)) + -24|0);
         HEAP32[$28>>2] = $36;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($36);
         $$pre$i = HEAP32[$28>>2]|0;
         $34 = $$pre$i;
        }
       }
       else if ((label|0) == 19) {
        $38 = ((($$1112)) + 1|0);
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4,3596)|0);
        $$0105$ph$clear = $$0105$ph & 3;
        switch ($$0105$ph$clear<<24>>24) {
        case 1:  {
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4,5024)|0);
         break;
        }
        case 2:  {
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4,5027)|0);
         break;
        }
        default: {
        }
        }
        $83 = HEAP32[$2>>2]|0;
        $84 = HEAP32[$28>>2]|0;
        $85 = ($83|0)==($84|0);
        if (!($85)) {
         $86 = ((($84)) + -24|0);
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($86,3630)|0);
         $87 = HEAP32[$28>>2]|0;
         $88 = ((($87)) + -12|0);
         $89 = HEAP8[$$pre$phi158Z2D>>0]|0;
         $90 = ($89<<24>>24)<(0);
         $91 = HEAP32[$4>>2]|0;
         $92 = HEAP32[$$pre$phi160Z2D>>2]|0;
         $93 = $89&255;
         $94 = $90 ? $91 : $4;
         $95 = $90 ? $92 : $93;
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($88,0,$94,$95)|0);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
         $$8 = $38;
         break L1;
        }
       }
      } while(0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $$8 = $0;
     }
    }
   } else {
    $$8 = $0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$8|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_128parse_pointer_to_member_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i63 = 0, $$0$i$i$i$i80 = 0, $$0$i$i$i$i85 = 0, $$0$i$i$i51 = 0, $$0$i$i$i54 = 0, $$0$i$i$i58 = 0, $$0$i$i$i66 = 0, $$0$i$i$i70 = 0, $$0$i$i$i74 = 0, $$345 = 0, $$pre$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i$i64 = 0, $exitcond$i$i$i$i81 = 0, $exitcond$i$i$i$i86 = 0, $exitcond$i$i$i52 = 0, $exitcond$i$i$i55 = 0, $exitcond$i$i$i59 = 0, $exitcond$i$i$i67 = 0, $exitcond$i$i$i71 = 0, $exitcond$i$i$i75 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $3 = sp + 96|0;
 $4 = sp + 72|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 $10 = ($0|0)==($1|0);
 if ($10) {
  $$345 = $0;
 } else {
  $11 = HEAP8[$0>>0]|0;
  $12 = ($11<<24>>24)==(77);
  if ($12) {
   $13 = ((($0)) + 1|0);
   $14 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($13,$1,$2)|0);
   $15 = ($14|0)==($13|0);
   if ($15) {
    $$345 = $0;
   } else {
    $16 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($14,$1,$2)|0);
    $17 = ($16|0)==($14|0);
    if ($17) {
     $$345 = $0;
    } else {
     $18 = ((($2)) + 4|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = HEAP32[$2>>2]|0;
     $21 = (($19) - ($20))|0;
     $22 = (($21|0) / 24)&-1;
     $23 = ($22>>>0)<(2);
     if ($23) {
      $$345 = $0;
     } else {
      $24 = $19;
      $25 = ((($24)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($4,$25);
      $26 = HEAP32[$18>>2]|0;
      $27 = ((($26)) + -24|0);
      $28 = $26;
      while(1) {
       $29 = ($28|0)==($27|0);
       if ($29) {
        break;
       }
       $30 = ((($28)) + -24|0);
       HEAP32[$18>>2] = $30;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($30);
       $$pre$i = HEAP32[$18>>2]|0;
       $28 = $$pre$i;
      }
      $31 = ((($26)) + -48|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($5,$31);
      $32 = ((($4)) + 12|0);
      $33 = ((($32)) + 11|0);
      $34 = HEAP8[$33>>0]|0;
      $35 = ($34<<24>>24)<(0);
      $36 = HEAP32[$32>>2]|0;
      $37 = $35 ? $36 : $32;
      $38 = HEAP8[$37>>0]|0;
      $39 = ($38<<24>>24)==(40);
      L11: do {
       if ($39) {
        $40 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4,3598)|0);
        ;HEAP32[$8>>2]=HEAP32[$4>>2]|0;HEAP32[$8+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$4+8>>2]|0;
        $$0$i$i$i = 0;
        while(1) {
         $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
         if ($exitcond$i$i$i) {
          break;
         }
         $41 = (($4) + ($$0$i$i$i<<2)|0);
         HEAP32[$41>>2] = 0;
         $42 = (($$0$i$i$i) + 1)|0;
         $$0$i$i$i = $42;
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9,$5);
        $43 = ((($9)) + 11|0);
        $44 = HEAP8[$43>>0]|0;
        $45 = ($44<<24>>24)<(0);
        $46 = HEAP32[$9>>2]|0;
        $47 = ((($9)) + 4|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = $44&255;
        $50 = $45 ? $46 : $9;
        $51 = $45 ? $48 : $49;
        $52 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($8,$50,$51)|0);
        ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;
        $$0$i$i$i51 = 0;
        while(1) {
         $exitcond$i$i$i52 = ($$0$i$i$i51|0)==(3);
         if ($exitcond$i$i$i52) {
          break;
         }
         $53 = (($8) + ($$0$i$i$i51<<2)|0);
         HEAP32[$53>>2] = 0;
         $54 = (($$0$i$i$i51) + 1)|0;
         $$0$i$i$i51 = $54;
        }
        $55 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($7,5020)|0);
        ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
        $$0$i$i$i54 = 0;
        while(1) {
         $exitcond$i$i$i55 = ($$0$i$i$i54|0)==(3);
         if ($exitcond$i$i$i55) {
          break;
         }
         $56 = (($7) + ($$0$i$i$i54<<2)|0);
         HEAP32[$56>>2] = 0;
         $57 = (($$0$i$i$i54) + 1)|0;
         $$0$i$i$i54 = $57;
        }
        $58 = HEAP32[$18>>2]|0;
        $59 = ((($58)) + -24|0);
        $60 = ((($59)) + 11|0);
        $61 = HEAP8[$60>>0]|0;
        $62 = ($61<<24>>24)<(0);
        if ($62) {
         $63 = HEAP32[$59>>2]|0;
         HEAP8[$3>>0] = 0;
         __ZNSt3__211char_traitsIcE6assignERcRKc($63,$3);
         $64 = ((($58)) + -20|0);
         HEAP32[$64>>2] = 0;
        } else {
         HEAP8[$3>>0] = 0;
         __ZNSt3__211char_traitsIcE6assignERcRKc($59,$3);
         HEAP8[$60>>0] = 0;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($59);
        ;HEAP32[$59>>2]=HEAP32[$6>>2]|0;HEAP32[$59+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$59+8>>2]=HEAP32[$6+8>>2]|0;
        $$0$i$i$i$i = 0;
        while(1) {
         $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
         if ($exitcond$i$i$i$i) {
          break;
         }
         $65 = (($6) + ($$0$i$i$i$i<<2)|0);
         HEAP32[$65>>2] = 0;
         $66 = (($$0$i$i$i$i) + 1)|0;
         $$0$i$i$i$i = $66;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
        $67 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($32,0,3596)|0);
        ;HEAP32[$6>>2]=HEAP32[$32>>2]|0;HEAP32[$6+4>>2]=HEAP32[$32+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$32+8>>2]|0;
        $$0$i$i$i58 = 0;
        while(1) {
         $exitcond$i$i$i59 = ($$0$i$i$i58|0)==(3);
         if ($exitcond$i$i$i59) {
          break;
         }
         $68 = (($32) + ($$0$i$i$i58<<2)|0);
         HEAP32[$68>>2] = 0;
         $69 = (($$0$i$i$i58) + 1)|0;
         $$0$i$i$i58 = $69;
        }
        $70 = HEAP32[$18>>2]|0;
        $71 = ((($70)) + -12|0);
        $72 = ((($71)) + 11|0);
        $73 = HEAP8[$72>>0]|0;
        $74 = ($73<<24>>24)<(0);
        if ($74) {
         $75 = HEAP32[$71>>2]|0;
         HEAP8[$3>>0] = 0;
         __ZNSt3__211char_traitsIcE6assignERcRKc($75,$3);
         $76 = ((($70)) + -8|0);
         HEAP32[$76>>2] = 0;
        } else {
         HEAP8[$3>>0] = 0;
         __ZNSt3__211char_traitsIcE6assignERcRKc($71,$3);
         HEAP8[$72>>0] = 0;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($71);
        ;HEAP32[$71>>2]=HEAP32[$6>>2]|0;HEAP32[$71+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$71+8>>2]=HEAP32[$6+8>>2]|0;
        $$0$i$i$i$i63 = 0;
        while(1) {
         $exitcond$i$i$i$i64 = ($$0$i$i$i$i63|0)==(3);
         if ($exitcond$i$i$i$i64) {
          break;
         }
         $77 = (($6) + ($$0$i$i$i$i63<<2)|0);
         HEAP32[$77>>2] = 0;
         $78 = (($$0$i$i$i$i63) + 1)|0;
         $$0$i$i$i$i63 = $78;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
       } else {
        $79 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4,3630)|0);
        ;HEAP32[$8>>2]=HEAP32[$4>>2]|0;HEAP32[$8+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$4+8>>2]|0;
        $$0$i$i$i66 = 0;
        while(1) {
         $exitcond$i$i$i67 = ($$0$i$i$i66|0)==(3);
         if ($exitcond$i$i$i67) {
          break;
         }
         $80 = (($4) + ($$0$i$i$i66<<2)|0);
         HEAP32[$80>>2] = 0;
         $81 = (($$0$i$i$i66) + 1)|0;
         $$0$i$i$i66 = $81;
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9,$5);
        $82 = ((($9)) + 11|0);
        $83 = HEAP8[$82>>0]|0;
        $84 = ($83<<24>>24)<(0);
        $85 = HEAP32[$9>>2]|0;
        $86 = ((($9)) + 4|0);
        $87 = HEAP32[$86>>2]|0;
        $88 = $83&255;
        $89 = $84 ? $85 : $9;
        $90 = $84 ? $87 : $88;
        $91 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($8,$89,$90)|0);
        ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;
        $$0$i$i$i70 = 0;
        while(1) {
         $exitcond$i$i$i71 = ($$0$i$i$i70|0)==(3);
         if ($exitcond$i$i$i71) {
          break;
         }
         $92 = (($8) + ($$0$i$i$i70<<2)|0);
         HEAP32[$92>>2] = 0;
         $93 = (($$0$i$i$i70) + 1)|0;
         $$0$i$i$i70 = $93;
        }
        $94 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($7,5020)|0);
        ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
        $$0$i$i$i74 = 0;
        while(1) {
         $exitcond$i$i$i75 = ($$0$i$i$i74|0)==(3);
         if ($exitcond$i$i$i75) {
          break;
         }
         $95 = (($7) + ($$0$i$i$i74<<2)|0);
         HEAP32[$95>>2] = 0;
         $96 = (($$0$i$i$i74) + 1)|0;
         $$0$i$i$i74 = $96;
        }
        $97 = HEAP32[$18>>2]|0;
        $98 = ((($97)) + -24|0);
        $99 = ((($98)) + 11|0);
        $100 = HEAP8[$99>>0]|0;
        $101 = ($100<<24>>24)<(0);
        if ($101) {
         $102 = HEAP32[$98>>2]|0;
         HEAP8[$3>>0] = 0;
         __ZNSt3__211char_traitsIcE6assignERcRKc($102,$3);
         $103 = ((($97)) + -20|0);
         HEAP32[$103>>2] = 0;
        } else {
         HEAP8[$3>>0] = 0;
         __ZNSt3__211char_traitsIcE6assignERcRKc($98,$3);
         HEAP8[$99>>0] = 0;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($98);
        ;HEAP32[$98>>2]=HEAP32[$6>>2]|0;HEAP32[$98+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$98+8>>2]=HEAP32[$6+8>>2]|0;
        $$0$i$i$i$i80 = 0;
        while(1) {
         $exitcond$i$i$i$i81 = ($$0$i$i$i$i80|0)==(3);
         if ($exitcond$i$i$i$i81) {
          break;
         }
         $104 = (($6) + ($$0$i$i$i$i80<<2)|0);
         HEAP32[$104>>2] = 0;
         $105 = (($$0$i$i$i$i80) + 1)|0;
         $$0$i$i$i$i80 = $105;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
        $106 = HEAP32[$18>>2]|0;
        $107 = ((($106)) + -12|0);
        $108 = ((($107)) + 11|0);
        $109 = HEAP8[$108>>0]|0;
        $110 = ($109<<24>>24)<(0);
        if ($110) {
         $111 = HEAP32[$107>>2]|0;
         HEAP8[$3>>0] = 0;
         __ZNSt3__211char_traitsIcE6assignERcRKc($111,$3);
         $112 = ((($106)) + -8|0);
         HEAP32[$112>>2] = 0;
        } else {
         HEAP8[$3>>0] = 0;
         __ZNSt3__211char_traitsIcE6assignERcRKc($107,$3);
         HEAP8[$108>>0] = 0;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($107);
        ;HEAP32[$107>>2]=HEAP32[$32>>2]|0;HEAP32[$107+4>>2]=HEAP32[$32+4>>2]|0;HEAP32[$107+8>>2]=HEAP32[$32+8>>2]|0;
        $$0$i$i$i$i85 = 0;
        while(1) {
         $exitcond$i$i$i$i86 = ($$0$i$i$i$i85|0)==(3);
         if ($exitcond$i$i$i$i86) {
          break L11;
         }
         $113 = (($32) + ($$0$i$i$i$i85<<2)|0);
         HEAP32[$113>>2] = 0;
         $114 = (($$0$i$i$i$i85) + 1)|0;
         $$0$i$i$i$i85 = $114;
        }
       }
      } while(0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
      $$345 = $16;
     }
    }
   }
  } else {
   $$345 = $0;
  }
 }
 STACKTOP = sp;return ($$345|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $4 = ((($1)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 $7 = ((($1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$1>>2]|0;
 $10 = $5&255;
 $11 = $6 ? $8 : $10;
 $12 = $6 ? $9 : $1;
 $13 = ($11>>>0)<($2>>>0);
 $$sroa$speculated = $13 ? $11 : $2;
 $14 = ($$sroa$speculated>>>0)>(4294967279);
 if ($14) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $15 = ($$sroa$speculated>>>0)<(11);
 if ($15) {
  $16 = $$sroa$speculated&255;
  $17 = ((($0)) + 11|0);
  HEAP8[$17>>0] = $16;
  $$0$i = $0;
 } else {
  $18 = (($$sroa$speculated) + 16)|0;
  $19 = $18 & -16;
  $20 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($19)|0);
  HEAP32[$0>>2] = $20;
  $21 = $19 | -2147483648;
  $22 = ((($0)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($0)) + 4|0);
  HEAP32[$23>>2] = $$sroa$speculated;
  $$0$i = $20;
 }
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i,$12,$$sroa$speculated)|0);
 $24 = (($$0$i) + ($$sroa$speculated)|0);
 HEAP8[$3>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($24,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__211char_traitsIcE6lengthEPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 return ($1|0);
}
function __ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$ = 0, $$sroa$speculated8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $11 = $7;
 } else {
  $8 = $4&255;
  $11 = $8;
 }
 $9 = ($2|0)==(-1);
 if ($9) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0);
  // unreachable;
 }
 if ($5) {
  $10 = HEAP32[$0>>2]|0;
  $13 = $10;
 } else {
  $13 = $0;
 }
 $12 = ($11>>>0)>($2>>>0);
 $$sroa$speculated8 = $12 ? $2 : $11;
 $14 = (__ZNSt3__211char_traitsIcE7compareEPKcS3_j($13,$1,$$sroa$speculated8)|0);
 $15 = ($14|0)==(0);
 if ($15) {
  $16 = ($11>>>0)<($2>>>0);
  $$ = $12&1;
  $$$ = $16 ? -1 : $$;
  return ($$$|0);
 } else {
  return ($14|0);
 }
 return (0)|0;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEjjPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__211char_traitsIcE6lengthEPKc(5017)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEjjPKcj($0,$1);
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $$021$i$i = 0, $$021$ph$i$i = 0, $$067 = 0, $$068 = 0, $$1 = 0, $$sroa$077$0 = 0, $$sroa$083$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $isdigit = 0, $isdigit72 = 0, $isdigittmp = 0, $isdigittmp71 = 0, $scevgep23$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $3 = sp + 40|0;
 $4 = sp;
 $5 = sp + 24|0;
 $6 = $1;
 $7 = $0;
 $8 = (($6) - ($7))|0;
 $9 = ($8|0)>(1);
 L1: do {
  if ($9) {
   $10 = HEAP8[$0>>0]|0;
   $11 = ($10<<24>>24)==(84);
   if ($11) {
    $12 = ((($0)) + 1|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = ($13<<24>>24)==(95);
    if ($14) {
     $15 = ((($2)) + 32|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ((($2)) + 36|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $$1 = $0;
      break;
     }
     $20 = ((($18)) + -16|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ((($18)) + -12|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = ($21|0)==($23|0);
     if ($24) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj3EEERAT__Kc($3);
      $38 = ((($2)) + 4|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($2)) + 8|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39>>>0)<($41>>>0);
      if ($42) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($39,$3);
       $43 = HEAP32[$38>>2]|0;
       $44 = ((($43)) + 24|0);
       HEAP32[$38>>2] = $44;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $45 = ((($0)) + 2|0);
      $46 = ((($2)) + 62|0);
      HEAP8[$46>>0] = 1;
      $$1 = $45;
      break;
     }
     $25 = HEAP32[$21>>2]|0;
     $26 = ((($21)) + 4|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = ((($2)) + 4|0);
     $29 = ((($2)) + 8|0);
     $$sroa$083$0 = $25;
     while(1) {
      $30 = ($$sroa$083$0|0)==($27|0);
      if ($30) {
       break;
      }
      $32 = HEAP32[$28>>2]|0;
      $33 = HEAP32[$29>>2]|0;
      $34 = ($32|0)==($33|0);
      if ($34) {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($2,$$sroa$083$0);
      } else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($32,$$sroa$083$0);
       $35 = HEAP32[$28>>2]|0;
       $36 = ((($35)) + 24|0);
       HEAP32[$28>>2] = $36;
      }
      $37 = ((($$sroa$083$0)) + 24|0);
      $$sroa$083$0 = $37;
     }
     $31 = ((($0)) + 2|0);
     $$1 = $31;
     break;
    }
    $47 = $13 << 24 >> 24;
    $isdigittmp = (($47) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    if ($isdigit) {
     $48 = ((($0)) + 2|0);
     $$067 = $isdigittmp;$$068 = $48;
     while(1) {
      $49 = ($$068|0)==($1|0);
      if ($49) {
       $$1 = $0;
       break L1;
      }
      $50 = HEAP8[$$068>>0]|0;
      $51 = $50 << 24 >> 24;
      $isdigittmp71 = (($51) + -48)|0;
      $isdigit72 = ($isdigittmp71>>>0)<(10);
      if (!($isdigit72)) {
       break;
      }
      $52 = ($$067*10)|0;
      $53 = (($isdigittmp71) + ($52))|0;
      $54 = ((($$068)) + 1|0);
      $$067 = $53;$$068 = $54;
     }
     $55 = ($50<<24>>24)==(95);
     if ($55) {
      $56 = ((($2)) + 32|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ((($2)) + 36|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = ($57|0)==($59|0);
      if ($60) {
       $$1 = $0;
      } else {
       $61 = (($$067) + 1)|0;
       $62 = ((($59)) + -16|0);
       $63 = ((($59)) + -12|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = HEAP32[$62>>2]|0;
       $66 = (($64) - ($65))|0;
       $67 = $66 >> 4;
       $68 = ($61>>>0)<($67>>>0);
       $69 = $65;
       if ($68) {
        $70 = (($69) + ($61<<4)|0);
        $71 = HEAP32[$70>>2]|0;
        $72 = (((($69) + ($61<<4)|0)) + 4|0);
        $73 = HEAP32[$72>>2]|0;
        $74 = ((($2)) + 4|0);
        $75 = ((($2)) + 8|0);
        $$sroa$077$0 = $71;
        while(1) {
         $76 = ($$sroa$077$0|0)==($73|0);
         if ($76) {
          break;
         }
         $78 = HEAP32[$74>>2]|0;
         $79 = HEAP32[$75>>2]|0;
         $80 = ($78|0)==($79|0);
         if ($80) {
          __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($2,$$sroa$077$0);
         } else {
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($78,$$sroa$077$0);
          $81 = HEAP32[$74>>2]|0;
          $82 = ((($81)) + 24|0);
          HEAP32[$74>>2] = $82;
         }
         $83 = ((($$sroa$077$0)) + 24|0);
         $$sroa$077$0 = $83;
        }
        $77 = ((($$068)) + 1|0);
        $$1 = $77;
        break;
       }
       $84 = ((($$068)) + 1|0);
       ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
       $85 = $84;
       $86 = (($85) - ($7))|0;
       $87 = ($86>>>0)>(4294967279);
       if ($87) {
        __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($5);
        // unreachable;
       }
       $88 = ($86>>>0)<(11);
       if ($88) {
        $89 = $86&255;
        $90 = ((($5)) + 11|0);
        HEAP8[$90>>0] = $89;
        $$021$ph$i$i = $5;
       } else {
        $91 = (($86) + 16)|0;
        $92 = $91 & -16;
        $93 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($92)|0);
        HEAP32[$5>>2] = $93;
        $94 = $92 | -2147483648;
        $95 = ((($5)) + 8|0);
        HEAP32[$95>>2] = $94;
        $96 = ((($5)) + 4|0);
        HEAP32[$96>>2] = $86;
        $$021$ph$i$i = $93;
       }
       $$0$i$i = $0;$$021$i$i = $$021$ph$i$i;
       while(1) {
        $97 = ($$0$i$i|0)==($84|0);
        if ($97) {
         break;
        }
        __ZNSt3__211char_traitsIcE6assignERcRKc($$021$i$i,$$0$i$i);
        $98 = ((($$0$i$i)) + 1|0);
        $99 = ((($$021$i$i)) + 1|0);
        $$0$i$i = $98;$$021$i$i = $99;
       }
       $scevgep23$i$i = (($$021$ph$i$i) + ($86)|0);
       HEAP8[$3>>0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($scevgep23$i$i,$3);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4,$5);
       $100 = ((($2)) + 4|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = ((($2)) + 8|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = ($101>>>0)<($103>>>0);
       if ($104) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($101,$4);
        $105 = HEAP32[$100>>2]|0;
        $106 = ((($105)) + 24|0);
        HEAP32[$100>>2] = $106;
       } else {
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$4);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
       $107 = ((($2)) + 62|0);
       HEAP8[$107>>0] = 1;
       $$1 = $84;
      }
     } else {
      $$1 = $0;
     }
    } else {
     $$1 = $0;
    }
   } else {
    $$1 = $0;
   }
  } else {
   $$1 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i97 = 0, $$067 = 0, $$069 = 0, $$083 = 0, $$3 = 0, $$pre$i = 0, $$pre$i92 = 0, $$pre$phi124Z2D = 0, $$pre$phi126Z2D = 0, $$pre123 = 0, $$pre125 = 0, $$sroa$0$0$$sroa_idx$i85 = 0, $$sroa$0$0$copyload$i100 = 0, $$sroa$0$0$copyload$i86101 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $exitcond$i$i = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $3 = sp + 32|0;
 $4 = sp + 16|0;
 $5 = sp;
 $6 = sp + 4|0;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)>(1);
 do {
  if ($10) {
   $11 = HEAP8[$0>>0]|0;
   $12 = ($11<<24>>24)==(73);
   if ($12) {
    $13 = ((($2)) + 61|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = ($14<<24>>24)==(0);
    L4: do {
     if (!($15)) {
      $16 = ((($2)) + 36|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = ((($17)) + -16|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = ((($17)) + -12|0);
      while(1) {
       $21 = HEAP32[$20>>2]|0;
       $22 = ($21|0)==($19|0);
       if ($22) {
        break L4;
       }
       $23 = ((($21)) + -16|0);
       HEAP32[$20>>2] = $23;
       __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($23);
      }
     }
    } while(0);
    $24 = ((($0)) + 1|0);
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    $25 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3632)|0);
    $26 = ($25>>>0)>(4294967279);
    if ($26) {
     __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
     // unreachable;
    }
    $27 = ($25>>>0)<(11);
    if ($27) {
     $28 = $25&255;
     $29 = ((($4)) + 11|0);
     HEAP8[$29>>0] = $28;
     $$pre125 = ((($4)) + 4|0);
     $$0$i$i = $4;$$pre$phi124Z2D = $29;$$pre$phi126Z2D = $$pre125;
    } else {
     $30 = (($25) + 16)|0;
     $31 = $30 & -16;
     $32 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($31)|0);
     HEAP32[$4>>2] = $32;
     $33 = $31 | -2147483648;
     $34 = ((($4)) + 8|0);
     HEAP32[$34>>2] = $33;
     $35 = ((($4)) + 4|0);
     HEAP32[$35>>2] = $25;
     $$pre123 = ((($4)) + 11|0);
     $$0$i$i = $32;$$pre$phi124Z2D = $$pre123;$$pre$phi126Z2D = $35;
    }
    (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i,3632,$25)|0);
    $36 = (($$0$i$i) + ($25)|0);
    HEAP8[$3>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($36,$3);
    $37 = ((($2)) + 4|0);
    $38 = ((($2)) + 36|0);
    $$sroa$0$0$$sroa_idx$i85 = ((($2)) + 12|0);
    $39 = ((($3)) + 11|0);
    $40 = ((($3)) + 4|0);
    $41 = ((($2)) + 40|0);
    $42 = ((($2)) + 32|0);
    $$083 = $24;
    L17: while(1) {
     $43 = HEAP8[$$083>>0]|0;
     $44 = ($43<<24>>24)==(69);
     if ($44) {
      break;
     }
     $45 = HEAP8[$13>>0]|0;
     $46 = ($45<<24>>24)==(0);
     if (!($46)) {
      $$sroa$0$0$copyload$i100 = HEAP32[$$sroa$0$0$$sroa_idx$i85>>2]|0;
      HEAP32[$5>>2] = $$sroa$0$0$copyload$i100;
      $47 = HEAP32[$38>>2]|0;
      $48 = HEAP32[$41>>2]|0;
      $49 = ($47>>>0)<($48>>>0);
      if ($49) {
       __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2IS4_EERKNS1_IT_Lj4096EEE($3,$5);
       HEAP32[$47>>2] = 0;
       $50 = ((($47)) + 4|0);
       HEAP32[$50>>2] = 0;
       $51 = ((($47)) + 8|0);
       $52 = HEAP32[$3>>2]|0;
       HEAP32[$51>>2] = 0;
       $53 = ((($47)) + 12|0);
       HEAP32[$53>>2] = $52;
       $54 = HEAP32[$38>>2]|0;
       $55 = ((($54)) + 16|0);
       HEAP32[$38>>2] = $55;
      } else {
       __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($42,$5);
      }
     }
     $56 = HEAP32[$37>>2]|0;
     $57 = HEAP32[$2>>2]|0;
     $58 = (($56) - ($57))|0;
     $59 = (($58|0) / 24)&-1;
     $60 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($$083,$1,$2)|0);
     $61 = HEAP32[$37>>2]|0;
     $62 = HEAP32[$2>>2]|0;
     $63 = (($61) - ($62))|0;
     $64 = (($63|0) / 24)&-1;
     $65 = HEAP8[$13>>0]|0;
     $66 = ($65<<24>>24)==(0);
     L27: do {
      if (!($66)) {
       $67 = HEAP32[$38>>2]|0;
       $68 = ((($67)) + -16|0);
       $69 = $67;
       while(1) {
        $70 = ($69|0)==($68|0);
        if ($70) {
         break L27;
        }
        $71 = ((($69)) + -16|0);
        HEAP32[$38>>2] = $71;
        __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($71);
        $$pre$i = HEAP32[$38>>2]|0;
        $69 = $$pre$i;
       }
      }
     } while(0);
     $72 = ($60|0)==($$083|0);
     $73 = ($60|0)==($1|0);
     $or$cond = $72 | $73;
     if ($or$cond) {
      label = 53;
      break;
     }
     $74 = HEAP8[$13>>0]|0;
     $75 = ($74<<24>>24)==(0);
     L34: do {
      if ($75) {
       $$0 = $59;
      } else {
       $76 = HEAP32[$38>>2]|0;
       $$sroa$0$0$copyload$i86101 = HEAP32[$$sroa$0$0$$sroa_idx$i85>>2]|0;
       HEAP32[$3>>2] = $$sroa$0$0$copyload$i86101;
       $77 = ((($76)) + -12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ((($76)) + -8|0);
       $80 = HEAP32[$79>>2]|0;
       $81 = ($78>>>0)<($80>>>0);
       if ($81) {
        HEAP32[$78>>2] = 0;
        $82 = ((($78)) + 4|0);
        HEAP32[$82>>2] = 0;
        $83 = ((($78)) + 8|0);
        HEAP32[$83>>2] = 0;
        $84 = ((($78)) + 12|0);
        HEAP32[$84>>2] = $$sroa$0$0$copyload$i86101;
        $85 = HEAP32[$77>>2]|0;
        $86 = ((($85)) + 16|0);
        HEAP32[$77>>2] = $86;
       } else {
        $87 = ((($76)) + -16|0);
        __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($87,$3);
       }
       $$067 = $59;
       while(1) {
        $88 = ($$067>>>0)<($64>>>0);
        if (!($88)) {
         $$0 = $59;
         break L34;
        }
        $89 = HEAP32[$38>>2]|0;
        $90 = ((($89)) + -12|0);
        $91 = HEAP32[$90>>2]|0;
        $92 = HEAP32[$2>>2]|0;
        $93 = (($92) + (($$067*24)|0)|0);
        $94 = ((($91)) + -12|0);
        $95 = HEAP32[$94>>2]|0;
        $96 = ((($91)) + -8|0);
        $97 = HEAP32[$96>>2]|0;
        $98 = ($95|0)==($97|0);
        if ($98) {
         $101 = ((($91)) + -16|0);
         __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($101,$93);
        } else {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($95,$93);
         $99 = HEAP32[$94>>2]|0;
         $100 = ((($99)) + 24|0);
         HEAP32[$94>>2] = $100;
        }
        $102 = (($$067) + 1)|0;
        $$067 = $102;
       }
      }
     } while(0);
     while(1) {
      $103 = ($$0>>>0)<($64>>>0);
      if (!($103)) {
       $$069 = $64;
       break;
      }
      $104 = HEAP8[$$pre$phi124Z2D>>0]|0;
      $105 = ($104<<24>>24)<(0);
      $106 = HEAP32[$$pre$phi126Z2D>>2]|0;
      $107 = $104&255;
      $108 = $105 ? $106 : $107;
      $109 = ($108>>>0)>(1);
      if ($109) {
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4,3820)|0);
      }
      $110 = HEAP32[$2>>2]|0;
      $111 = (($110) + (($$0*24)|0)|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$111);
      $112 = HEAP8[$39>>0]|0;
      $113 = ($112<<24>>24)<(0);
      $114 = HEAP32[$3>>2]|0;
      $115 = HEAP32[$40>>2]|0;
      $116 = $112&255;
      $117 = $113 ? $114 : $3;
      $118 = $113 ? $115 : $116;
      (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($4,$117,$118)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $119 = (($$0) + 1)|0;
      $$0 = $119;
     }
     while(1) {
      $120 = ($$069|0)==($59|0);
      if ($120) {
       $$083 = $60;
       continue L17;
      }
      $121 = HEAP32[$37>>2]|0;
      $122 = ((($121)) + -24|0);
      $123 = $121;
      while(1) {
       $124 = ($123|0)==($122|0);
       if ($124) {
        break;
       }
       $125 = ((($123)) + -24|0);
       HEAP32[$37>>2] = $125;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($125);
       $$pre$i92 = HEAP32[$37>>2]|0;
       $123 = $$pre$i92;
      }
      $126 = (($$069) + -1)|0;
      $$069 = $126;
     }
    }
    if ((label|0) == 53) {
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     $$3 = $0;
     break;
    }
    $127 = ((($$083)) + 1|0);
    $128 = HEAP8[$$pre$phi124Z2D>>0]|0;
    $129 = ($128<<24>>24)<(0);
    $130 = HEAP32[$4>>2]|0;
    $131 = HEAP32[$$pre$phi126Z2D>>2]|0;
    $132 = $128&255;
    $133 = $129 ? $130 : $4;
    $134 = $129 ? $131 : $132;
    $135 = (($133) + ($134)|0);
    $136 = ((($135)) + -1|0);
    $137 = HEAP8[$136>>0]|0;
    $138 = ($137<<24>>24)==(62);
    if ($138) {
     (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4,5011)|0);
    } else {
     (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4,3634)|0);
    }
    ;HEAP32[$6>>2]=HEAP32[$4>>2]|0;HEAP32[$6+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$4+8>>2]|0;
    $$0$i$i97 = 0;
    while(1) {
     $exitcond$i$i = ($$0$i$i97|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $139 = (($4) + ($$0$i$i97<<2)|0);
     HEAP32[$139>>2] = 0;
     $140 = (($$0$i$i97) + 1)|0;
     $$0$i$i97 = $140;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$6);
    $141 = HEAP32[$37>>2]|0;
    $142 = ((($2)) + 8|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($141>>>0)<($143>>>0);
    if ($144) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($141,$3);
     $145 = HEAP32[$37>>2]|0;
     $146 = ((($145)) + 24|0);
     HEAP32[$37>>2] = $146;
    } else {
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    $$3 = $127;
   } else {
    $$3 = $0;
   }
  } else {
   $$3 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 12|0);
 $3 = ((($2)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 $6 = HEAP32[$2>>2]|0;
 $7 = ((($1)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $4&255;
 $10 = $5 ? $6 : $2;
 $11 = $5 ? $8 : $9;
 $12 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1,$10,$11)|0);
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 $$0$i$i$i = 0;
 while(1) {
  $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
  if ($exitcond$i$i$i) {
   break;
  }
  $13 = (($1) + ($$0$i$i$i<<2)|0);
  HEAP32[$13>>2] = 0;
  $14 = (($$0$i$i$i) + 1)|0;
  $$0$i$i$i = $14;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i49 = 0, $$038 = 0, $$040 = 0, $$040$in = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i = 0, $isdigit = 0, $isdigit48 = 0, $isdigittmp = 0, $isdigittmp47 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $3 = sp + 24|0;
 $4 = sp + 12|0;
 $5 = sp;
 $6 = ($0|0)==($1|0);
 L1: do {
  if ($6) {
   $$3 = $0;
  } else {
   $7 = HEAP8[$0>>0]|0;
   $8 = $7 << 24 >> 24;
   $isdigittmp = (($8) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $9 = ((($0)) + 1|0);
    $10 = ($9|0)==($1|0);
    if ($10) {
     $$3 = $0;
    } else {
     $$038 = $isdigittmp;$$040$in = $9;
     while(1) {
      $$040 = HEAP8[$$040$in>>0]|0;
      $11 = $$040 << 24 >> 24;
      $isdigittmp47 = (($11) + -48)|0;
      $isdigit48 = ($isdigittmp47>>>0)<(10);
      if (!($isdigit48)) {
       break;
      }
      $12 = ((($$040$in)) + 1|0);
      $13 = ($12|0)==($1|0);
      if ($13) {
       $$3 = $0;
       break L1;
      }
      $14 = ($$038*10)|0;
      $15 = (($isdigittmp47) + ($14))|0;
      $$038 = $15;$$040$in = $12;
     }
     $16 = $1;
     $17 = $$040$in;
     $18 = (($16) - ($17))|0;
     $19 = ($18>>>0)<($$038>>>0);
     if ($19) {
      $$3 = $0;
     } else {
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $20 = ($$038>>>0)>(4294967279);
      if ($20) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $21 = ($$038>>>0)<(11);
      if ($21) {
       $22 = $$038&255;
       $23 = ((($4)) + 11|0);
       HEAP8[$23>>0] = $22;
       $$0$i$i = $4;
      } else {
       $24 = (($$038) + 16)|0;
       $25 = $24 & -16;
       $26 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($25)|0);
       HEAP32[$4>>2] = $26;
       $27 = $25 | -2147483648;
       $28 = ((($4)) + 8|0);
       HEAP32[$28>>2] = $27;
       $29 = ((($4)) + 4|0);
       HEAP32[$29>>2] = $$038;
       $$0$i$i = $26;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i,$$040$in,$$038)|0);
      $30 = (($$0$i$i) + ($$038)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($30,$3);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($3,$4,10);
      $31 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4978)|0);
      $32 = ((($3)) + 11|0);
      $33 = HEAP8[$32>>0]|0;
      $34 = ($33<<24>>24)<(0);
      $35 = ((($3)) + 4|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = $33&255;
      $38 = $34 ? $36 : $37;
      $39 = ($31|0)==($38|0);
      if ($39) {
       $40 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($3,4978,$31)|0);
       $41 = ($40|0)==(0);
       $$0$i = $41;
      } else {
       $$0$i = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      if ($$0$i) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj22EEERAT__Kc($3);
       $42 = ((($2)) + 4|0);
       $43 = HEAP32[$42>>2]|0;
       $44 = ((($2)) + 8|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = ($43>>>0)<($45>>>0);
       if ($46) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($43,$3);
        $47 = HEAP32[$42>>2]|0;
        $48 = ((($47)) + 24|0);
        HEAP32[$42>>2] = $48;
       } else {
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      } else {
       ;HEAP32[$5>>2]=HEAP32[$4>>2]|0;HEAP32[$5+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$4+8>>2]|0;
       $$0$i$i49 = 0;
       while(1) {
        $exitcond$i$i = ($$0$i$i49|0)==(3);
        if ($exitcond$i$i) {
         break;
        }
        $49 = (($4) + ($$0$i$i49<<2)|0);
        HEAP32[$49>>2] = 0;
        $50 = (($$0$i$i49) + 1)|0;
        $$0$i$i49 = $50;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$5);
       $51 = ((($2)) + 4|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = ((($2)) + 8|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = ($52>>>0)<($54>>>0);
       if ($55) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($52,$3);
        $56 = HEAP32[$51>>2]|0;
        $57 = ((($56)) + 24|0);
        HEAP32[$51>>2] = $57;
       } else {
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      }
      $58 = (($$040$in) + ($$038)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $$3 = $58;
     }
    }
   } else {
    $$3 = $0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$0$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $4 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$4>>2] = 0;
  $5 = (($$0$i$i) + 1)|0;
  $$0$i$i = $5;
 }
 $6 = ((($1)) + 11|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)<(0);
 $9 = ((($1)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $7&255;
 $12 = $8 ? $10 : $11;
 $13 = (__ZNSt3__211char_traitsIcE6lengthEPKc($2)|0);
 $14 = HEAP8[$6>>0]|0;
 $15 = ($14<<24>>24)<(0);
 $16 = HEAP32[$1>>2]|0;
 $17 = $15 ? $16 : $1;
 $18 = (($12) + ($13))|0;
 $19 = ($18>>>0)>(4294967279);
 if ($19) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $20 = ($18>>>0)<(11);
 if ($20) {
  $21 = $12&255;
  $22 = ((($0)) + 11|0);
  HEAP8[$22>>0] = $21;
  $$0$i = $0;
 } else {
  $23 = (($18) + 16)|0;
  $24 = $23 & -16;
  $25 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($24)|0);
  HEAP32[$0>>2] = $25;
  $26 = $24 | -2147483648;
  $27 = ((($0)) + 8|0);
  HEAP32[$27>>2] = $26;
  $28 = ((($0)) + 4|0);
  HEAP32[$28>>2] = $12;
  $$0$i = $25;
 }
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i,$17,$12)|0);
 $29 = (($$0$i) + ($12)|0);
 HEAP8[$3>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($29,$3);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($0,$2,$13)|0);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $$0$i$i1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $exitcond$i$i = 0, $exitcond$i$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 $$0$i$i1 = 0;
 while(1) {
  $exitcond$i$i2 = ($$0$i$i1|0)==(3);
  if ($exitcond$i$i2) {
   break;
  }
  $2 = (($1) + ($$0$i$i1<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i1) + 1)|0;
  $$0$i$i1 = $3;
 }
 $4 = ((($0)) + 12|0);
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $5 = (($4) + ($$0$i$i<<2)|0);
  HEAP32[$5>>2] = 0;
  $6 = (($$0$i$i) + 1)|0;
  $$0$i$i = $6;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i$i = 0;
 var $exitcond$i$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ((($0)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = HEAP32[$0>>2]|0;
  HEAP8[$2>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($6,$2);
  $7 = ((($0)) + 4|0);
  HEAP32[$7>>2] = 0;
 } else {
  HEAP8[$2>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($0,$2);
  HEAP8[$3>>0] = 0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($0);
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 $$0$i$i$i$i = 0;
 while(1) {
  $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
  if ($exitcond$i$i$i$i) {
   break;
  }
  $8 = (($1) + ($$0$i$i$i$i<<2)|0);
  HEAP32[$8>>2] = 0;
  $9 = (($$0$i$i$i$i) + 1)|0;
  $$0$i$i$i$i = $9;
 }
 $10 = ((($0)) + 12|0);
 $11 = ((($1)) + 12|0);
 $12 = ((($10)) + 11|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)<(0);
 if ($14) {
  $15 = HEAP32[$10>>2]|0;
  HEAP8[$2>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($15,$2);
  $16 = ((($0)) + 16|0);
  HEAP32[$16>>2] = 0;
 } else {
  HEAP8[$2>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($10,$2);
  HEAP8[$12>>0] = 0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($10);
 ;HEAP32[$10>>2]=HEAP32[$11>>2]|0;HEAP32[$10+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$11+8>>2]|0;
 $$0$i$i$i$i3 = 0;
 while(1) {
  $exitcond$i$i$i$i4 = ($$0$i$i$i$i3|0)==(3);
  if ($exitcond$i$i$i$i4) {
   break;
  }
  $17 = (($11) + ($$0$i$i$i$i3<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i$i$i3) + 1)|0;
  $$0$i$i$i$i3 = $18;
 }
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $$0$i$i3 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond$i$i = 0, $exitcond$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($1) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 $4 = ((($0)) + 12|0);
 $5 = ((($1)) + 12|0);
 ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
 $$0$i$i3 = 0;
 while(1) {
  $exitcond$i$i4 = ($$0$i$i3|0)==(3);
  if ($exitcond$i$i4) {
   break;
  }
  $6 = (($5) + ($$0$i$i3<<2)|0);
  HEAP32[$6>>2] = 0;
  $7 = (($$0$i$i3) + 1)|0;
  $$0$i$i3 = $7;
 }
 return;
}
function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = (($6|0) / 24)&-1;
 $8 = (($7) + 1)|0;
 $9 = (__ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8max_sizeEv($0)|0);
 $10 = ($9>>>0)<($8>>>0);
 if ($10) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $11 = ((($0)) + 12|0);
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($13) - ($14))|0;
  $16 = (($15|0) / 24)&-1;
  $17 = $9 >>> 1;
  $18 = ($16>>>0)<($17>>>0);
  $19 = $16 << 1;
  $20 = ($19>>>0)<($8>>>0);
  $$sroa$speculated$i = $20 ? $8 : $19;
  $$sroa$speculated$$i = $18 ? $$sroa$speculated$i : $9;
  $21 = HEAP32[$3>>2]|0;
  $22 = (($21) - ($14))|0;
  $23 = (($22|0) / 24)&-1;
  __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($2,$$sroa$speculated$$i,$23,$11);
  $24 = ((($2)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($25,$1);
  $26 = ((($25)) + 24|0);
  HEAP32[$24>>2] = $26;
  __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0,$2);
  __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$3 = 0, $$87 = 0, $$88 = 0, $$pre$i = 0, $$pre$i90 = 0, $$sroa$0$0$$sroa_idx$i = 0, $$sroa$0$0$copyload$i96 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $3 = sp + 8|0;
 $4 = sp;
 $5 = $1;
 $6 = $0;
 $7 = (($5) - ($6))|0;
 $8 = ($7|0)>(1);
 L1: do {
  if ($8) {
   $9 = HEAP8[$0>>0]|0;
   $10 = ($9<<24>>24)==(76);
   $11 = ((($0)) + 1|0);
   $$ = $10 ? $11 : $0;
   $12 = HEAP8[$$>>0]|0;
   $13 = $12 << 24 >> 24;
   switch ($13|0) {
   case 78:  {
    $14 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_nested_nameINS0_2DbEEEPKcS4_S4_RT_($$,$1,$2)|0);
    $15 = ($14|0)==($$|0);
    $$87 = $15 ? $0 : $14;
    $$3 = $$87;
    break L1;
    break;
   }
   case 90:  {
    $16 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_local_nameINS0_2DbEEEPKcS4_S4_RT_($$,$1,$2)|0);
    $17 = ($16|0)==($$|0);
    $$88 = $17 ? $0 : $16;
    $$3 = $$88;
    break L1;
    break;
   }
   default: {
    $18 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_unscoped_nameINS0_2DbEEEPKcS4_S4_RT_($$,$1,$2)|0);
    $19 = ($18|0)==($$|0);
    if ($19) {
     $71 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($$,$1,$2)|0);
     $72 = ($71|0)==($$|0);
     $73 = ($71|0)==($1|0);
     $or$cond = $72 | $73;
     if ($or$cond) {
      $$3 = $0;
      break L1;
     }
     $74 = HEAP8[$71>>0]|0;
     $75 = ($74<<24>>24)==(73);
     if (!($75)) {
      $$3 = $0;
      break L1;
     }
     $76 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($71,$1,$2)|0);
     $77 = ($76|0)==($71|0);
     if ($77) {
      $$3 = $0;
      break L1;
     }
     $78 = ((($2)) + 4|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = HEAP32[$2>>2]|0;
     $81 = (($79) - ($80))|0;
     $82 = (($81|0) / 24)&-1;
     $83 = ($82>>>0)<(2);
     if ($83) {
      $$3 = $0;
      break L1;
     }
     $84 = $79;
     $85 = ((($84)) + -24|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$85);
     $86 = HEAP32[$78>>2]|0;
     $87 = ((($86)) + -24|0);
     $88 = $86;
     while(1) {
      $89 = ($88|0)==($87|0);
      if ($89) {
       break;
      }
      $90 = ((($88)) + -24|0);
      HEAP32[$78>>2] = $90;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($90);
      $$pre$i90 = HEAP32[$78>>2]|0;
      $88 = $$pre$i90;
     }
     $91 = ((($86)) + -48|0);
     $92 = ((($3)) + 11|0);
     $93 = HEAP8[$92>>0]|0;
     $94 = ($93<<24>>24)<(0);
     $95 = HEAP32[$3>>2]|0;
     $96 = ((($3)) + 4|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = $93&255;
     $99 = $94 ? $95 : $3;
     $100 = $94 ? $97 : $98;
     (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($91,$99,$100)|0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$3 = $76;
     break L1;
    }
    $20 = ($18|0)==($1|0);
    if ($20) {
     $$3 = $1;
     break L1;
    }
    $21 = HEAP8[$18>>0]|0;
    $22 = ($21<<24>>24)==(73);
    if (!($22)) {
     $$3 = $18;
     break L1;
    }
    $23 = HEAP32[$2>>2]|0;
    $24 = ((($2)) + 4|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23|0)==($25|0);
    if ($26) {
     $$3 = $0;
     break L1;
    }
    $27 = ((($25)) + -24|0);
    $$sroa$0$0$$sroa_idx$i = ((($2)) + 12|0);
    $$sroa$0$0$copyload$i96 = HEAP32[$$sroa$0$0$$sroa_idx$i>>2]|0;
    HEAP32[$4>>2] = $$sroa$0$0$copyload$i96;
    __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3,$27,$4);
    $28 = ((($2)) + 20|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ((($2)) + 24|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($29>>>0)<($31>>>0);
    if ($32) {
     $33 = ((($3)) + 12|0);
     HEAP32[$29>>2] = 0;
     $34 = ((($29)) + 4|0);
     HEAP32[$34>>2] = 0;
     $35 = ((($29)) + 8|0);
     $36 = HEAP32[$33>>2]|0;
     HEAP32[$35>>2] = 0;
     $37 = ((($29)) + 12|0);
     HEAP32[$37>>2] = $36;
     $38 = HEAP32[$3>>2]|0;
     HEAP32[$29>>2] = $38;
     $39 = ((($3)) + 4|0);
     $40 = HEAP32[$39>>2]|0;
     HEAP32[$34>>2] = $40;
     $41 = ((($3)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ((($29)) + 8|0);
     HEAP32[$43>>2] = $42;
     HEAP32[$41>>2] = 0;
     HEAP32[$39>>2] = 0;
     HEAP32[$3>>2] = 0;
     $44 = HEAP32[$28>>2]|0;
     $45 = ((($44)) + 16|0);
     HEAP32[$28>>2] = $45;
    } else {
     $46 = ((($2)) + 16|0);
     __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($46,$3);
    }
    __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
    $47 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($18,$1,$2)|0);
    $48 = ($47|0)==($18|0);
    if ($48) {
     $$3 = $0;
     break L1;
    }
    $49 = HEAP32[$24>>2]|0;
    $50 = HEAP32[$2>>2]|0;
    $51 = (($49) - ($50))|0;
    $52 = (($51|0) / 24)&-1;
    $53 = ($52>>>0)<(2);
    if ($53) {
     $$3 = $0;
     break L1;
    }
    $54 = $49;
    $55 = ((($54)) + -24|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$55);
    $56 = HEAP32[$24>>2]|0;
    $57 = ((($56)) + -24|0);
    $58 = $56;
    while(1) {
     $59 = ($58|0)==($57|0);
     if ($59) {
      break;
     }
     $60 = ((($58)) + -24|0);
     HEAP32[$24>>2] = $60;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($60);
     $$pre$i = HEAP32[$24>>2]|0;
     $58 = $$pre$i;
    }
    $61 = ((($56)) + -48|0);
    $62 = ((($3)) + 11|0);
    $63 = HEAP8[$62>>0]|0;
    $64 = ($63<<24>>24)<(0);
    $65 = HEAP32[$3>>2]|0;
    $66 = ((($3)) + 4|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = $63&255;
    $69 = $64 ? $65 : $3;
    $70 = $64 ? $67 : $68;
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($61,$69,$70)|0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = $47;
    break L1;
   }
   }
  } else {
   $$3 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$072 = 0, $$1 = 0, $$174 = 0, $$275 = 0, $$sink = 0, $$sink84 = 0, $$sroa$0103$0 = 0, $$sroa$097$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $isdigit = 0, $isdigit81 = 0, $isdigittmp = 0, $isdigittmp80 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $3 = sp;
 $4 = $1;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = ($6|0)>(1);
 L1: do {
  if ($7) {
   $8 = HEAP8[$0>>0]|0;
   $9 = ($8<<24>>24)==(83);
   if ($9) {
    $10 = ((($0)) + 1|0);
    $11 = HEAP8[$10>>0]|0;
    $12 = $11 << 24 >> 24;
    switch ($12|0) {
    case 97:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($3,4924);
     $13 = ((($2)) + 4|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ((($2)) + 8|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14>>>0)<($16>>>0);
     if ($17) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($14,$3);
      $18 = HEAP32[$13>>2]|0;
      $19 = ((($18)) + 24|0);
      HEAP32[$13>>2] = $19;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $20 = ((($0)) + 2|0);
     $$1 = $20;
     break L1;
     break;
    }
    case 98:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($3,4939);
     $21 = ((($2)) + 4|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($2)) + 8|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22>>>0)<($24>>>0);
     if ($25) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($22,$3);
      $26 = HEAP32[$21>>2]|0;
      $27 = ((($26)) + 24|0);
      HEAP32[$21>>2] = $27;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $28 = ((($0)) + 2|0);
     $$1 = $28;
     break L1;
     break;
    }
    case 115:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($3,4418);
     $29 = ((($2)) + 4|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ((($2)) + 8|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($30>>>0)<($32>>>0);
     if ($33) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($30,$3);
      $34 = HEAP32[$29>>2]|0;
      $35 = ((($34)) + 24|0);
      HEAP32[$29>>2] = $35;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $36 = ((($0)) + 2|0);
     $$1 = $36;
     break L1;
     break;
    }
    case 105:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($3,4514);
     $37 = ((($2)) + 4|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($2)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($38>>>0)<($40>>>0);
     if ($41) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($38,$3);
      $42 = HEAP32[$37>>2]|0;
      $43 = ((($42)) + 24|0);
      HEAP32[$37>>2] = $43;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $44 = ((($0)) + 2|0);
     $$1 = $44;
     break L1;
     break;
    }
    case 111:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($3,4591);
     $45 = ((($2)) + 4|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = ((($2)) + 8|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($46>>>0)<($48>>>0);
     if ($49) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($46,$3);
      $50 = HEAP32[$45>>2]|0;
      $51 = ((($50)) + 24|0);
      HEAP32[$45>>2] = $51;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $52 = ((($0)) + 2|0);
     $$1 = $52;
     break L1;
     break;
    }
    case 100:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($3,4668);
     $53 = ((($2)) + 4|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ((($2)) + 8|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($54>>>0)<($56>>>0);
     if ($57) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($54,$3);
      $58 = HEAP32[$53>>2]|0;
      $59 = ((($58)) + 24|0);
      HEAP32[$53>>2] = $59;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $60 = ((($0)) + 2|0);
     $$1 = $60;
     break L1;
     break;
    }
    case 95:  {
     $61 = ((($2)) + 16|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = ((($2)) + 20|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($62|0)==($64|0);
     if ($65) {
      $$1 = $0;
      break L1;
     }
     $66 = HEAP32[$62>>2]|0;
     $67 = ((($62)) + 4|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($2)) + 4|0);
     $70 = ((($2)) + 8|0);
     $$sroa$0103$0 = $66;
     while(1) {
      $71 = ($$sroa$0103$0|0)==($68|0);
      if ($71) {
       break;
      }
      $73 = HEAP32[$69>>2]|0;
      $74 = HEAP32[$70>>2]|0;
      $75 = ($73|0)==($74|0);
      if ($75) {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($2,$$sroa$0103$0);
      } else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($73,$$sroa$0103$0);
       $76 = HEAP32[$69>>2]|0;
       $77 = ((($76)) + 24|0);
       HEAP32[$69>>2] = $77;
      }
      $78 = ((($$sroa$0103$0)) + 24|0);
      $$sroa$0103$0 = $78;
     }
     $72 = ((($0)) + 2|0);
     $$1 = $72;
     break L1;
     break;
    }
    default: {
     $isdigittmp = (($12) + -48)|0;
     $isdigit = ($isdigittmp>>>0)<(10);
     if (!($isdigit)) {
      $79 = (_isupper($12)|0);
      $80 = ($79|0)==(0);
      if ($80) {
       $$1 = $0;
       break L1;
      }
     }
     $$sink = $isdigit ? -48 : -55;
     $81 = (($$sink) + ($12))|0;
     $82 = ((($0)) + 2|0);
     $$072 = $82;$$174 = $81;
     while(1) {
      $83 = ($$072|0)==($1|0);
      if ($83) {
       $$1 = $0;
       break L1;
      }
      $84 = HEAP8[$$072>>0]|0;
      $85 = $84 << 24 >> 24;
      $isdigittmp80 = (($85) + -48)|0;
      $isdigit81 = ($isdigittmp80>>>0)<(10);
      if (!($isdigit81)) {
       $86 = (_isupper($85)|0);
       $87 = ($86|0)==(0);
       if ($87) {
        break;
       }
      }
      $88 = ($$174*36)|0;
      $$sink84 = $isdigit81 ? -48 : -55;
      $89 = (($88) + ($85))|0;
      $$275 = (($89) + ($$sink84))|0;
      $90 = ((($$072)) + 1|0);
      $$072 = $90;$$174 = $$275;
     }
     $91 = ($84<<24>>24)==(95);
     if (!($91)) {
      $$1 = $0;
      break L1;
     }
     $92 = (($$174) + 1)|0;
     $93 = ((($2)) + 16|0);
     $94 = ((($2)) + 20|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = HEAP32[$93>>2]|0;
     $97 = (($95) - ($96))|0;
     $98 = $97 >> 4;
     $99 = ($92>>>0)<($98>>>0);
     $100 = $96;
     if (!($99)) {
      $$1 = $0;
      break L1;
     }
     $101 = (($100) + ($92<<4)|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = (((($100) + ($92<<4)|0)) + 4|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ((($2)) + 4|0);
     $106 = ((($2)) + 8|0);
     $$sroa$097$0 = $102;
     while(1) {
      $107 = ($$sroa$097$0|0)==($104|0);
      if ($107) {
       break;
      }
      $109 = HEAP32[$105>>2]|0;
      $110 = HEAP32[$106>>2]|0;
      $111 = ($109|0)==($110|0);
      if ($111) {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($2,$$sroa$097$0);
      } else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($109,$$sroa$097$0);
       $112 = HEAP32[$105>>2]|0;
       $113 = ((($112)) + 24|0);
       HEAP32[$105>>2] = $113;
      }
      $114 = ((($$sroa$097$0)) + 24|0);
      $$sroa$097$0 = $114;
     }
     $108 = ((($$072)) + 1|0);
     $$1 = $108;
     break L1;
    }
    }
   } else {
    $$1 = $0;
   }
  } else {
   $$1 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i30 = 0, $$127 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i31 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $3 = sp + 40|0;
 $4 = sp + 12|0;
 $5 = sp + 24|0;
 $6 = sp;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)>(3);
 L1: do {
  if ($10) {
   $11 = HEAP8[$0>>0]|0;
   $12 = ($11<<24>>24)==(68);
   if ($12) {
    $13 = ((($0)) + 1|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = $14 << 24 >> 24;
    switch ($15|0) {
    case 84: case 116:  {
     break;
    }
    default: {
     $$127 = $0;
     break L1;
    }
    }
    $16 = ((($0)) + 2|0);
    $17 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($16,$1,$2)|0);
    $18 = ($17|0)==($16|0);
    $19 = ($17|0)==($1|0);
    $or$cond = $18 | $19;
    if ($or$cond) {
     $$127 = $0;
    } else {
     $20 = HEAP8[$17>>0]|0;
     $21 = ($20<<24>>24)==(69);
     if ($21) {
      $22 = HEAP32[$2>>2]|0;
      $23 = ((($2)) + 4|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($22|0)==($24|0);
      if ($25) {
       $$127 = $0;
      } else {
       $26 = ((($24)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$26);
       $27 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6,0,4914)|0);
       ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
       $$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $28 = (($6) + ($$0$i$i$i<<2)|0);
        HEAP32[$28>>2] = 0;
        $29 = (($$0$i$i$i) + 1)|0;
        $$0$i$i$i = $29;
       }
       $30 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5,3596)|0);
       ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
       $$0$i$i$i30 = 0;
       while(1) {
        $exitcond$i$i$i31 = ($$0$i$i$i30|0)==(3);
        if ($exitcond$i$i$i31) {
         break;
        }
        $31 = (($5) + ($$0$i$i$i30<<2)|0);
        HEAP32[$31>>2] = 0;
        $32 = (($$0$i$i$i30) + 1)|0;
        $$0$i$i$i30 = $32;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$4);
       $33 = HEAP32[$23>>2]|0;
       $34 = ((($33)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($34,$3);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
       $35 = ((($17)) + 1|0);
       $$127 = $35;
      }
     } else {
      $$127 = $0;
     }
    }
   } else {
    $$127 = $0;
   }
  } else {
   $$127 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$127|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_117parse_vector_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i131 = 0, $$0$i$i$i137 = 0, $$0$i$i$i141 = 0, $$0$i$i$i147 = 0, $$0$i$i135 = 0, $$0$i$i146 = 0, $$2103 = 0, $$899$ph = 0, $$9 = 0, $$off = 0, $$pre$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i132 = 0, $exitcond$i$i$i138 = 0, $exitcond$i$i$i142 = 0, $exitcond$i$i$i148 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $3 = sp + 60|0;
 $4 = sp + 24|0;
 $5 = sp + 12|0;
 $6 = sp;
 $7 = sp + 48|0;
 $8 = $1;
 $9 = $0;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)>(3);
 L1: do {
  if ($11) {
   $12 = HEAP8[$0>>0]|0;
   $13 = ($12<<24>>24)==(68);
   if ($13) {
    $14 = ((($0)) + 1|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = ($15<<24>>24)==(118);
    if ($16) {
     $17 = ((($0)) + 2|0);
     $18 = HEAP8[$17>>0]|0;
     $$off = (($18) + -49)<<24>>24;
     $19 = ($$off&255)<(9);
     if (!($19)) {
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $$0$i$i146 = 0;
      while(1) {
       $exitcond$i$i = ($$0$i$i146|0)==(3);
       if ($exitcond$i$i) {
        break;
       }
       $90 = (($4) + ($$0$i$i146<<2)|0);
       HEAP32[$90>>2] = 0;
       $91 = (($$0$i$i146) + 1)|0;
       $$0$i$i146 = $91;
      }
      $92 = ($18<<24>>24)==(95);
      L11: do {
       if ($92) {
        $$2103 = $17;
        label = 53;
       } else {
        $93 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($17,$1,$2)|0);
        $94 = ($93|0)==($17|0);
        if ($94) {
         $$2103 = $17;
         label = 53;
        } else {
         $95 = HEAP32[$2>>2]|0;
         $96 = ((($2)) + 4|0);
         $97 = HEAP32[$96>>2]|0;
         $98 = ($95|0)==($97|0);
         if (!($98)) {
          $99 = ((($97)) + -24|0);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5,$99);
          $100 = ((($4)) + 11|0);
          $101 = HEAP8[$100>>0]|0;
          $102 = ($101<<24>>24)<(0);
          if ($102) {
           $103 = HEAP32[$4>>2]|0;
           HEAP8[$3>>0] = 0;
           __ZNSt3__211char_traitsIcE6assignERcRKc($103,$3);
           $104 = ((($4)) + 4|0);
           HEAP32[$104>>2] = 0;
          } else {
           HEAP8[$3>>0] = 0;
           __ZNSt3__211char_traitsIcE6assignERcRKc($4,$3);
           HEAP8[$100>>0] = 0;
          }
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($4);
          ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
          $$0$i$i$i$i = 0;
          while(1) {
           $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
           if ($exitcond$i$i$i$i) {
            break;
           }
           $105 = (($5) + ($$0$i$i$i$i<<2)|0);
           HEAP32[$105>>2] = 0;
           $106 = (($$0$i$i$i$i) + 1)|0;
           $$0$i$i$i$i = $106;
          }
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
          $107 = HEAP32[$96>>2]|0;
          $108 = ((($107)) + -24|0);
          $109 = $107;
          while(1) {
           $110 = ($109|0)==($108|0);
           if ($110) {
            $$2103 = $93;
            label = 53;
            break L11;
           }
           $111 = ((($109)) + -24|0);
           HEAP32[$96>>2] = $111;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($111);
           $$pre$i = HEAP32[$96>>2]|0;
           $109 = $$pre$i;
          }
         }
        }
       }
      } while(0);
      do {
       if ((label|0) == 53) {
        $112 = ($$2103|0)==($1|0);
        if ($112) {
         $$899$ph = $0;
        } else {
         $113 = HEAP8[$$2103>>0]|0;
         $114 = ($113<<24>>24)==(95);
         if ($114) {
          $115 = ((($$2103)) + 1|0);
          $116 = ($115|0)==($1|0);
          if ($116) {
           $$899$ph = $0;
          } else {
           $117 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($115,$1,$2)|0);
           $118 = ($117|0)==($115|0);
           if ($118) {
            $$899$ph = $0;
           } else {
            $119 = HEAP32[$2>>2]|0;
            $120 = ((($2)) + 4|0);
            $121 = HEAP32[$120>>2]|0;
            $122 = ($119|0)==($121|0);
            if ($122) {
             break;
            }
            __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($5,3636,$4);
            $123 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5,3645)|0);
            ;HEAP32[$3>>2]=HEAP32[$5>>2]|0;HEAP32[$3+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$5+8>>2]|0;
            $$0$i$i$i147 = 0;
            while(1) {
             $exitcond$i$i$i148 = ($$0$i$i$i147|0)==(3);
             if ($exitcond$i$i$i148) {
              break;
             }
             $124 = (($5) + ($$0$i$i$i147<<2)|0);
             HEAP32[$124>>2] = 0;
             $125 = (($$0$i$i$i147) + 1)|0;
             $$0$i$i$i147 = $125;
            }
            $126 = HEAP32[$120>>2]|0;
            $127 = ((($126)) + -24|0);
            $128 = ((($3)) + 11|0);
            $129 = HEAP8[$128>>0]|0;
            $130 = ($129<<24>>24)<(0);
            $131 = HEAP32[$3>>2]|0;
            $132 = ((($3)) + 4|0);
            $133 = HEAP32[$132>>2]|0;
            $134 = $129&255;
            $135 = $130 ? $131 : $3;
            $136 = $130 ? $133 : $134;
            (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($127,$135,$136)|0);
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
            $$899$ph = $117;
           }
          }
         } else {
          $$899$ph = $0;
         }
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
        $$9 = $$899$ph;
        break L1;
       }
      } while(0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $$9 = $0;
      break;
     }
     $20 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($17,$1)|0);
     $21 = ($20|0)==($1|0);
     if ($21) {
      $$9 = $0;
     } else {
      $22 = HEAP8[$20>>0]|0;
      $23 = ($22<<24>>24)==(95);
      if ($23) {
       $24 = $20;
       $25 = $17;
       $26 = (($24) - ($25))|0;
       $27 = ((($20)) + 1|0);
       $28 = ($27|0)==($1|0);
       if ($28) {
        $$9 = $0;
       } else {
        $29 = HEAP8[$27>>0]|0;
        $30 = ($29<<24>>24)==(112);
        if (!($30)) {
         $31 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($27,$1,$2)|0);
         $32 = ($31|0)==($27|0);
         if ($32) {
          $$9 = $0;
          break;
         }
         $33 = HEAP32[$2>>2]|0;
         $34 = ((($2)) + 4|0);
         $35 = HEAP32[$34>>2]|0;
         $36 = ($33|0)==($35|0);
         if ($36) {
          $$9 = $0;
          break;
         }
         ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
         $37 = ($26>>>0)>(4294967279);
         if ($37) {
          __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($6);
          // unreachable;
         }
         $38 = ($26>>>0)<(11);
         if ($38) {
          $39 = $26&255;
          $40 = ((($6)) + 11|0);
          HEAP8[$40>>0] = $39;
          $$0$i$i = $6;
         } else {
          $41 = (($26) + 16)|0;
          $42 = $41 & -16;
          $43 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($42)|0);
          HEAP32[$6>>2] = $43;
          $44 = $42 | -2147483648;
          $45 = ((($6)) + 8|0);
          HEAP32[$45>>2] = $44;
          $46 = ((($6)) + 4|0);
          HEAP32[$46>>2] = $26;
          $$0$i$i = $43;
         }
         (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i,$17,$26)|0);
         $47 = (($$0$i$i) + ($26)|0);
         HEAP8[$3>>0] = 0;
         __ZNSt3__211char_traitsIcE6assignERcRKc($47,$3);
         $48 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6,0,3636)|0);
         ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
         $$0$i$i$i = 0;
         while(1) {
          $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
          if ($exitcond$i$i$i) {
           break;
          }
          $49 = (($6) + ($$0$i$i$i<<2)|0);
          HEAP32[$49>>2] = 0;
          $50 = (($$0$i$i$i) + 1)|0;
          $$0$i$i$i = $50;
         }
         $51 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5,3645)|0);
         ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
         $$0$i$i$i131 = 0;
         while(1) {
          $exitcond$i$i$i132 = ($$0$i$i$i131|0)==(3);
          if ($exitcond$i$i$i132) {
           break;
          }
          $52 = (($5) + ($$0$i$i$i131<<2)|0);
          HEAP32[$52>>2] = 0;
          $53 = (($$0$i$i$i131) + 1)|0;
          $$0$i$i$i131 = $53;
         }
         $54 = HEAP32[$34>>2]|0;
         $55 = ((($54)) + -24|0);
         $56 = ((($4)) + 11|0);
         $57 = HEAP8[$56>>0]|0;
         $58 = ($57<<24>>24)<(0);
         $59 = HEAP32[$4>>2]|0;
         $60 = ((($4)) + 4|0);
         $61 = HEAP32[$60>>2]|0;
         $62 = $57&255;
         $63 = $58 ? $59 : $4;
         $64 = $58 ? $61 : $62;
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($55,$63,$64)|0);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
         $$9 = $31;
         break;
        }
        $65 = ((($20)) + 2|0);
        ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
        $66 = ($26>>>0)>(4294967279);
        if ($66) {
         __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($6);
         // unreachable;
        }
        $67 = ($26>>>0)<(11);
        if ($67) {
         $68 = $26&255;
         $69 = ((($6)) + 11|0);
         HEAP8[$69>>0] = $68;
         $$0$i$i135 = $6;
        } else {
         $70 = (($26) + 16)|0;
         $71 = $70 & -16;
         $72 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($71)|0);
         HEAP32[$6>>2] = $72;
         $73 = $71 | -2147483648;
         $74 = ((($6)) + 8|0);
         HEAP32[$74>>2] = $73;
         $75 = ((($6)) + 4|0);
         HEAP32[$75>>2] = $26;
         $$0$i$i135 = $72;
        }
        (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i135,$17,$26)|0);
        $76 = (($$0$i$i135) + ($26)|0);
        HEAP8[$3>>0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($76,$3);
        $77 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6,0,3647)|0);
        ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
        $$0$i$i$i137 = 0;
        while(1) {
         $exitcond$i$i$i138 = ($$0$i$i$i137|0)==(3);
         if ($exitcond$i$i$i138) {
          break;
         }
         $78 = (($6) + ($$0$i$i$i137<<2)|0);
         HEAP32[$78>>2] = 0;
         $79 = (($$0$i$i$i137) + 1)|0;
         $$0$i$i$i137 = $79;
        }
        $80 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5,3645)|0);
        ;HEAP32[$7>>2]=HEAP32[$5>>2]|0;HEAP32[$7+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$5+8>>2]|0;
        $$0$i$i$i141 = 0;
        while(1) {
         $exitcond$i$i$i142 = ($$0$i$i$i141|0)==(3);
         if ($exitcond$i$i$i142) {
          break;
         }
         $81 = (($5) + ($$0$i$i$i141<<2)|0);
         HEAP32[$81>>2] = 0;
         $82 = (($$0$i$i$i141) + 1)|0;
         $$0$i$i$i141 = $82;
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4,$7);
        $83 = ((($2)) + 4|0);
        $84 = HEAP32[$83>>2]|0;
        $85 = ((($2)) + 8|0);
        $86 = HEAP32[$85>>2]|0;
        $87 = ($84>>>0)<($86>>>0);
        if ($87) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($84,$4);
         $88 = HEAP32[$83>>2]|0;
         $89 = ((($88)) + 24|0);
         HEAP32[$83>>2] = $89;
        } else {
         __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$4);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
        $$9 = $65;
       }
      } else {
       $$9 = $0;
      }
     }
    } else {
     $$9 = $0;
    }
   } else {
    $$9 = $0;
   }
  } else {
   $$9 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$9|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0$pn = 0, $$017 = 0, $$2 = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigittmp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 L1: do {
  if ($2) {
   $$2 = $0;
  } else {
   $3 = HEAP8[$0>>0]|0;
   $4 = ($3<<24>>24)==(110);
   $5 = ((($0)) + 1|0);
   $$ = $4 ? $5 : $0;
   $6 = ($$|0)==($1|0);
   if ($6) {
    $$2 = $0;
   } else {
    $7 = HEAP8[$$>>0]|0;
    $8 = ($7<<24>>24)==(48);
    if ($8) {
     $9 = ((($$)) + 1|0);
     $$2 = $9;
     break;
    }
    $$off = (($7) + -49)<<24>>24;
    $10 = ($$off&255)<(9);
    if ($10) {
     $$0$pn = $$;
     while(1) {
      $$017 = ((($$0$pn)) + 1|0);
      $11 = ($$017|0)==($1|0);
      if ($11) {
       $$2 = $1;
       break L1;
      }
      $12 = HEAP8[$$017>>0]|0;
      $13 = $12 << 24 >> 24;
      $isdigittmp = (($13) + -48)|0;
      $isdigit = ($isdigittmp>>>0)<(10);
      if ($isdigit) {
       $$0$pn = $$017;
      } else {
       $$2 = $$017;
       break;
      }
     }
    } else {
     $$2 = $0;
    }
   }
  }
 } while(0);
 return ($$2|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i634 = 0, $$0$i$i$i614 = 0, $$0$i$i$i624 = 0, $$0$i$i$i628 = 0, $$0$i$i$i651 = 0, $$0$i$i$i655 = 0, $$0$i$i$i658 = 0, $$0$i$i$i682 = 0, $$0$i$i$i685 = 0, $$0$i$i$i709 = 0, $$0$i$i$i713 = 0, $$0$i$i$i723 = 0, $$0$i$i$i727 = 0, $$0$i$i$i731 = 0, $$0$i$i$i735 = 0, $$0$i$i$i739 = 0, $$0$i$i599 = 0;
 var $$0$i$i601 = 0, $$0$i$i603 = 0, $$0$i$i605 = 0, $$0$i$i607 = 0, $$0$i$i609 = 0, $$0$i$i611 = 0, $$0$i$i613 = 0, $$0$i$i617 = 0, $$0$i$i619 = 0, $$0$i$i621 = 0, $$0$i$i637 = 0, $$0$i$i639 = 0, $$0$i$i641 = 0, $$0$i$i643 = 0, $$0$i$i645 = 0, $$0$i$i647 = 0, $$0$i$i649 = 0, $$0$i$i664 = 0, $$0$i$i666 = 0, $$0$i$i668 = 0;
 var $$0$i$i670 = 0, $$0$i$i672 = 0, $$0$i$i674 = 0, $$0$i$i676 = 0, $$0$i$i678 = 0, $$0$i$i680 = 0, $$0$i$i689 = 0, $$0$i$i691 = 0, $$0$i$i693 = 0, $$0$i$i695 = 0, $$0$i$i697 = 0, $$0$i$i699 = 0, $$0$i$i701 = 0, $$0$i$i703 = 0, $$0$i$i705 = 0, $$0$i$i707 = 0, $$0$i$i717 = 0, $$0$i$i749 = 0, $$0$i$i751 = 0, $$0$i$i753 = 0;
 var $$0$i$i755 = 0, $$0503 = 0, $$0504$off0 = 0, $$14 = 0, $$558 = 0, $$559 = 0, $$560 = 0, $$561 = 0, $$562 = 0, $$563 = 0, $$564 = 0, $$565 = 0, $$566 = 0, $$567 = 0, $$568 = 0, $$569 = 0, $$570 = 0, $$571 = 0, $$572 = 0, $$573 = 0;
 var $$574 = 0, $$575 = 0, $$576 = 0, $$577 = 0, $$578 = 0, $$579 = 0, $$580 = 0, $$581 = 0, $$582 = 0, $$583 = 0, $$584 = 0, $$585 = 0, $$586 = 0, $$587 = 0, $$588 = 0, $$589 = 0, $$590 = 0, $$591 = 0, $$592 = 0, $$593 = 0;
 var $$594 = 0, $$595 = 0, $$596 = 0, $$597 = 0, $$598 = 0, $$pre$i = 0, $$pre$i662 = 0, $$pre$i719 = 0, $$pre$i721 = 0, $$pre$i743 = 0, $$pre$i745 = 0, $$pre$i747 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
 var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
 var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
 var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
 var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
 var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
 var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
 var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
 var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0;
 var $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0;
 var $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0;
 var $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0;
 var $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i$i635 = 0, $exitcond$i$i$i615 = 0, $exitcond$i$i$i625 = 0, $exitcond$i$i$i629 = 0, $exitcond$i$i$i652 = 0, $exitcond$i$i$i656 = 0, $exitcond$i$i$i659 = 0, $exitcond$i$i$i683 = 0, $exitcond$i$i$i686 = 0, $exitcond$i$i$i710 = 0, $exitcond$i$i$i714 = 0, $exitcond$i$i$i724 = 0, $exitcond$i$i$i728 = 0;
 var $exitcond$i$i$i732 = 0, $exitcond$i$i$i736 = 0, $exitcond$i$i$i740 = 0, $exitcond$i$i622 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $3 = sp + 176|0;
 $4 = sp + 112|0;
 $5 = sp + 88|0;
 $6 = sp + 64|0;
 $7 = sp + 48|0;
 $8 = sp + 160|0;
 $9 = sp + 36|0;
 $10 = sp + 148|0;
 $11 = sp + 136|0;
 $12 = sp + 124|0;
 $13 = sp + 24|0;
 $14 = sp + 12|0;
 $15 = sp;
 $16 = $1;
 $17 = $0;
 $18 = (($16) - ($17))|0;
 $19 = ($18|0)>(1);
 L1: do {
  if ($19) {
   $20 = ($18|0)>(3);
   if ($20) {
    $21 = HEAP8[$0>>0]|0;
    $22 = ($21<<24>>24)==(103);
    if ($22) {
     $23 = ((($0)) + 1|0);
     $24 = HEAP8[$23>>0]|0;
     $25 = ($24<<24>>24)==(115);
     $26 = ((($0)) + 2|0);
     $$558 = $25 ? $26 : $0;
     $$0503 = $$558;$$0504$off0 = $25;
    } else {
     $$0503 = $0;$$0504$off0 = 0;
    }
   } else {
    $$0503 = $0;$$0504$off0 = 0;
   }
   $27 = HEAP8[$$0503>>0]|0;
   $28 = $27 << 24 >> 24;
   do {
    switch ($28|0) {
    case 76:  {
     $29 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
     $$14 = $29;
     break L1;
     break;
    }
    case 84:  {
     $30 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
     $$14 = $30;
     break L1;
     break;
    }
    case 102:  {
     $31 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
     $$14 = $31;
     break L1;
     break;
    }
    case 97:  {
     $32 = ((($$0503)) + 1|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = $33 << 24 >> 24;
     switch ($34|0) {
     case 97:  {
      $35 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $36 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3600)|0);
      $37 = ($36>>>0)>(4294967279);
      if ($37) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $38 = ($36>>>0)<(11);
      if ($38) {
       $39 = $36&255;
       $40 = ((($4)) + 11|0);
       HEAP8[$40>>0] = $39;
       $$0$i$i = $4;
      } else {
       $41 = (($36) + 16)|0;
       $42 = $41 & -16;
       $43 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($42)|0);
       HEAP32[$4>>2] = $43;
       $44 = $42 | -2147483648;
       $45 = ((($4)) + 8|0);
       HEAP32[$45>>2] = $44;
       $46 = ((($4)) + 4|0);
       HEAP32[$46>>2] = $36;
       $$0$i$i = $43;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i,3600,$36)|0);
      $47 = (($$0$i$i) + ($36)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($47,$3);
      $48 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($35,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $49 = ($48|0)==($35|0);
      $$559 = $49 ? $0 : $48;
      $$14 = $$559;
      break L1;
      break;
     }
     case 100:  {
      $50 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $51 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3618)|0);
      $52 = ($51>>>0)>(4294967279);
      if ($52) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $53 = ($51>>>0)<(11);
      if ($53) {
       $54 = $51&255;
       $55 = ((($4)) + 11|0);
       HEAP8[$55>>0] = $54;
       $$0$i$i599 = $4;
      } else {
       $56 = (($51) + 16)|0;
       $57 = $56 & -16;
       $58 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($57)|0);
       HEAP32[$4>>2] = $58;
       $59 = $57 | -2147483648;
       $60 = ((($4)) + 8|0);
       HEAP32[$60>>2] = $59;
       $61 = ((($4)) + 4|0);
       HEAP32[$61>>2] = $51;
       $$0$i$i599 = $58;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i599,3618,$51)|0);
      $62 = (($$0$i$i599) + ($51)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($62,$3);
      $63 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($50,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $64 = ($63|0)==($50|0);
      $$560 = $64 ? $0 : $63;
      $$14 = $$560;
      break L1;
      break;
     }
     case 110:  {
      $65 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $66 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3618)|0);
      $67 = ($66>>>0)>(4294967279);
      if ($67) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $68 = ($66>>>0)<(11);
      if ($68) {
       $69 = $66&255;
       $70 = ((($4)) + 11|0);
       HEAP8[$70>>0] = $69;
       $$0$i$i601 = $4;
      } else {
       $71 = (($66) + 16)|0;
       $72 = $71 & -16;
       $73 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($72)|0);
       HEAP32[$4>>2] = $73;
       $74 = $72 | -2147483648;
       $75 = ((($4)) + 8|0);
       HEAP32[$75>>2] = $74;
       $76 = ((($4)) + 4|0);
       HEAP32[$76>>2] = $66;
       $$0$i$i601 = $73;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i601,3618,$66)|0);
      $77 = (($$0$i$i601) + ($66)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($77,$3);
      $78 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($65,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $79 = ($78|0)==($65|0);
      $$561 = $79 ? $0 : $78;
      $$14 = $$561;
      break L1;
      break;
     }
     case 78:  {
      $80 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $81 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3661)|0);
      $82 = ($81>>>0)>(4294967279);
      if ($82) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $83 = ($81>>>0)<(11);
      if ($83) {
       $84 = $81&255;
       $85 = ((($4)) + 11|0);
       HEAP8[$85>>0] = $84;
       $$0$i$i603 = $4;
      } else {
       $86 = (($81) + 16)|0;
       $87 = $86 & -16;
       $88 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($87)|0);
       HEAP32[$4>>2] = $88;
       $89 = $87 | -2147483648;
       $90 = ((($4)) + 8|0);
       HEAP32[$90>>2] = $89;
       $91 = ((($4)) + 4|0);
       HEAP32[$91>>2] = $81;
       $$0$i$i603 = $88;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i603,3661,$81)|0);
      $92 = (($$0$i$i603) + ($81)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($92,$3);
      $93 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($80,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $94 = ($93|0)==($80|0);
      $$562 = $94 ? $0 : $93;
      $$14 = $$562;
      break L1;
      break;
     }
     case 83:  {
      $95 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $96 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3664)|0);
      $97 = ($96>>>0)>(4294967279);
      if ($97) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $98 = ($96>>>0)<(11);
      if ($98) {
       $99 = $96&255;
       $100 = ((($4)) + 11|0);
       HEAP8[$100>>0] = $99;
       $$0$i$i605 = $4;
      } else {
       $101 = (($96) + 16)|0;
       $102 = $101 & -16;
       $103 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($102)|0);
       HEAP32[$4>>2] = $103;
       $104 = $102 | -2147483648;
       $105 = ((($4)) + 8|0);
       HEAP32[$105>>2] = $104;
       $106 = ((($4)) + 4|0);
       HEAP32[$106>>2] = $96;
       $$0$i$i605 = $103;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i605,3664,$96)|0);
      $107 = (($$0$i$i605) + ($96)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($107,$3);
      $108 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($95,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $109 = ($108|0)==($95|0);
      $$563 = $109 ? $0 : $108;
      $$14 = $$563;
      break L1;
      break;
     }
     case 116:  {
      $110 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $110;
      break L1;
      break;
     }
     case 122:  {
      $111 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $111;
      break L1;
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 99:  {
     $112 = ((($$0503)) + 1|0);
     $113 = HEAP8[$112>>0]|0;
     $114 = $113 << 24 >> 24;
     switch ($114|0) {
     case 99:  {
      $115 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_const_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $115;
      break L1;
      break;
     }
     case 108:  {
      $116 = (__ZN10__cxxabiv112_GLOBAL__N_115parse_call_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $116;
      break L1;
      break;
     }
     case 109:  {
      $117 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $118 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3666)|0);
      $119 = ($118>>>0)>(4294967279);
      if ($119) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $120 = ($118>>>0)<(11);
      if ($120) {
       $121 = $118&255;
       $122 = ((($4)) + 11|0);
       HEAP8[$122>>0] = $121;
       $$0$i$i607 = $4;
      } else {
       $123 = (($118) + 16)|0;
       $124 = $123 & -16;
       $125 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($124)|0);
       HEAP32[$4>>2] = $125;
       $126 = $124 | -2147483648;
       $127 = ((($4)) + 8|0);
       HEAP32[$127>>2] = $126;
       $128 = ((($4)) + 4|0);
       HEAP32[$128>>2] = $118;
       $$0$i$i607 = $125;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i607,3666,$118)|0);
      $129 = (($$0$i$i607) + ($118)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($129,$3);
      $130 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($117,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $131 = ($130|0)==($117|0);
      $$564 = $131 ? $0 : $130;
      $$14 = $$564;
      break L1;
      break;
     }
     case 111:  {
      $132 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $133 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3668)|0);
      $134 = ($133>>>0)>(4294967279);
      if ($134) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $135 = ($133>>>0)<(11);
      if ($135) {
       $136 = $133&255;
       $137 = ((($4)) + 11|0);
       HEAP8[$137>>0] = $136;
       $$0$i$i609 = $4;
      } else {
       $138 = (($133) + 16)|0;
       $139 = $138 & -16;
       $140 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($139)|0);
       HEAP32[$4>>2] = $140;
       $141 = $139 | -2147483648;
       $142 = ((($4)) + 8|0);
       HEAP32[$142>>2] = $141;
       $143 = ((($4)) + 4|0);
       HEAP32[$143>>2] = $133;
       $$0$i$i609 = $140;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i609,3668,$133)|0);
      $144 = (($$0$i$i609) + ($133)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($144,$3);
      $145 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($132,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $146 = ($145|0)==($132|0);
      $$565 = $146 ? $0 : $145;
      $$14 = $$565;
      break L1;
      break;
     }
     case 118:  {
      $147 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_conversion_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $147;
      break L1;
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 100:  {
     $148 = ((($$0503)) + 1|0);
     $149 = HEAP8[$148>>0]|0;
     $150 = $149 << 24 >> 24;
     switch ($150|0) {
     case 97:  {
      $151 = ((($$0503)) + 2|0);
      $152 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($151,$1,$2)|0);
      $153 = ($152|0)==($151|0);
      if ($153) {
       $$14 = $0;
       break L1;
      }
      $154 = HEAP32[$2>>2]|0;
      $155 = ((($2)) + 4|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = ($154|0)==($156|0);
      if ($157) {
       $$14 = $0;
       break L1;
      }
      ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
      L81: do {
       if ($$0504$off0) {
        $158 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3670)|0);
        $159 = ($158>>>0)>(4294967279);
        if ($159) {
         __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($6);
         // unreachable;
        }
        $160 = ($158>>>0)<(11);
        if ($160) {
         $161 = $158&255;
         $162 = ((($6)) + 11|0);
         HEAP8[$162>>0] = $161;
         $$0$i$i611 = $6;
        } else {
         $163 = (($158) + 16)|0;
         $164 = $163 & -16;
         $165 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($164)|0);
         HEAP32[$6>>2] = $165;
         $166 = $164 | -2147483648;
         $167 = ((($6)) + 8|0);
         HEAP32[$167>>2] = $166;
         $168 = ((($6)) + 4|0);
         HEAP32[$168>>2] = $158;
         $$0$i$i611 = $165;
        }
        (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i611,3670,$158)|0);
        $169 = (($$0$i$i611) + ($158)|0);
        HEAP8[$3>>0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($169,$3);
       } else {
        $$0$i$i613 = 0;
        while(1) {
         $exitcond$i$i = ($$0$i$i613|0)==(3);
         if ($exitcond$i$i) {
          break L81;
         }
         $170 = (($6) + ($$0$i$i613<<2)|0);
         HEAP32[$170>>2] = 0;
         $171 = (($$0$i$i613) + 1)|0;
         $$0$i$i613 = $171;
        }
       }
      } while(0);
      $172 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6,3673)|0);
      ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
      $$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $173 = (($6) + ($$0$i$i$i<<2)|0);
       HEAP32[$173>>2] = 0;
       $174 = (($$0$i$i$i) + 1)|0;
       $$0$i$i$i = $174;
      }
      $175 = HEAP32[$155>>2]|0;
      $176 = ((($175)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($7,$176);
      $177 = ((($7)) + 11|0);
      $178 = HEAP8[$177>>0]|0;
      $179 = ($178<<24>>24)<(0);
      $180 = HEAP32[$7>>2]|0;
      $181 = ((($7)) + 4|0);
      $182 = HEAP32[$181>>2]|0;
      $183 = $178&255;
      $184 = $179 ? $180 : $7;
      $185 = $179 ? $182 : $183;
      $186 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($5,$184,$185)|0);
      ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
      $$0$i$i$i614 = 0;
      while(1) {
       $exitcond$i$i$i615 = ($$0$i$i$i614|0)==(3);
       if ($exitcond$i$i$i615) {
        break;
       }
       $187 = (($5) + ($$0$i$i$i614<<2)|0);
       HEAP32[$187>>2] = 0;
       $188 = (($$0$i$i$i614) + 1)|0;
       $$0$i$i$i614 = $188;
      }
      $189 = HEAP32[$155>>2]|0;
      $190 = ((($189)) + -24|0);
      $191 = ((($190)) + 11|0);
      $192 = HEAP8[$191>>0]|0;
      $193 = ($192<<24>>24)<(0);
      if ($193) {
       $194 = HEAP32[$190>>2]|0;
       HEAP8[$3>>0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($194,$3);
       $195 = ((($189)) + -20|0);
       HEAP32[$195>>2] = 0;
      } else {
       HEAP8[$3>>0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($190,$3);
       HEAP8[$191>>0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($190);
      ;HEAP32[$190>>2]=HEAP32[$4>>2]|0;HEAP32[$190+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$190+8>>2]=HEAP32[$4+8>>2]|0;
      $$0$i$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
       if ($exitcond$i$i$i$i) {
        break;
       }
       $196 = (($4) + ($$0$i$i$i$i<<2)|0);
       HEAP32[$196>>2] = 0;
       $197 = (($$0$i$i$i$i) + 1)|0;
       $$0$i$i$i$i = $197;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      $$14 = $152;
      break L1;
      break;
     }
     case 99:  {
      $198 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_dynamic_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $198;
      break L1;
      break;
     }
     case 101:  {
      $199 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $200 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3616)|0);
      $201 = ($200>>>0)>(4294967279);
      if ($201) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $202 = ($200>>>0)<(11);
      if ($202) {
       $203 = $200&255;
       $204 = ((($4)) + 11|0);
       HEAP8[$204>>0] = $203;
       $$0$i$i617 = $4;
      } else {
       $205 = (($200) + 16)|0;
       $206 = $205 & -16;
       $207 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($206)|0);
       HEAP32[$4>>2] = $207;
       $208 = $206 | -2147483648;
       $209 = ((($4)) + 8|0);
       HEAP32[$209>>2] = $208;
       $210 = ((($4)) + 4|0);
       HEAP32[$210>>2] = $200;
       $$0$i$i617 = $207;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i617,3616,$200)|0);
      $211 = (($$0$i$i617) + ($200)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($211,$3);
      $212 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($199,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $213 = ($212|0)==($199|0);
      $$566 = $213 ? $0 : $212;
      $$14 = $$566;
      break L1;
      break;
     }
     case 108:  {
      $214 = ((($$0503)) + 2|0);
      $215 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($214,$1,$2)|0);
      $216 = ($215|0)==($214|0);
      if ($216) {
       $$14 = $0;
       break L1;
      }
      $217 = HEAP32[$2>>2]|0;
      $218 = ((($2)) + 4|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = ($217|0)==($219|0);
      if ($220) {
       $$14 = $0;
       break L1;
      }
      ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
      L123: do {
       if ($$0504$off0) {
        $221 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3670)|0);
        $222 = ($221>>>0)>(4294967279);
        if ($222) {
         __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($6);
         // unreachable;
        }
        $223 = ($221>>>0)<(11);
        if ($223) {
         $224 = $221&255;
         $225 = ((($6)) + 11|0);
         HEAP8[$225>>0] = $224;
         $$0$i$i619 = $6;
        } else {
         $226 = (($221) + 16)|0;
         $227 = $226 & -16;
         $228 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($227)|0);
         HEAP32[$6>>2] = $228;
         $229 = $227 | -2147483648;
         $230 = ((($6)) + 8|0);
         HEAP32[$230>>2] = $229;
         $231 = ((($6)) + 4|0);
         HEAP32[$231>>2] = $221;
         $$0$i$i619 = $228;
        }
        (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i619,3670,$221)|0);
        $232 = (($$0$i$i619) + ($221)|0);
        HEAP8[$3>>0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($232,$3);
       } else {
        $$0$i$i621 = 0;
        while(1) {
         $exitcond$i$i622 = ($$0$i$i621|0)==(3);
         if ($exitcond$i$i622) {
          break L123;
         }
         $233 = (($6) + ($$0$i$i621<<2)|0);
         HEAP32[$233>>2] = 0;
         $234 = (($$0$i$i621) + 1)|0;
         $$0$i$i621 = $234;
        }
       }
      } while(0);
      $235 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6,3683)|0);
      ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
      $$0$i$i$i624 = 0;
      while(1) {
       $exitcond$i$i$i625 = ($$0$i$i$i624|0)==(3);
       if ($exitcond$i$i$i625) {
        break;
       }
       $236 = (($6) + ($$0$i$i$i624<<2)|0);
       HEAP32[$236>>2] = 0;
       $237 = (($$0$i$i$i624) + 1)|0;
       $$0$i$i$i624 = $237;
      }
      $238 = HEAP32[$218>>2]|0;
      $239 = ((($238)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($7,$239);
      $240 = ((($7)) + 11|0);
      $241 = HEAP8[$240>>0]|0;
      $242 = ($241<<24>>24)<(0);
      $243 = HEAP32[$7>>2]|0;
      $244 = ((($7)) + 4|0);
      $245 = HEAP32[$244>>2]|0;
      $246 = $241&255;
      $247 = $242 ? $243 : $7;
      $248 = $242 ? $245 : $246;
      $249 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($5,$247,$248)|0);
      ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
      $$0$i$i$i628 = 0;
      while(1) {
       $exitcond$i$i$i629 = ($$0$i$i$i628|0)==(3);
       if ($exitcond$i$i$i629) {
        break;
       }
       $250 = (($5) + ($$0$i$i$i628<<2)|0);
       HEAP32[$250>>2] = 0;
       $251 = (($$0$i$i$i628) + 1)|0;
       $$0$i$i$i628 = $251;
      }
      $252 = HEAP32[$218>>2]|0;
      $253 = ((($252)) + -24|0);
      $254 = ((($253)) + 11|0);
      $255 = HEAP8[$254>>0]|0;
      $256 = ($255<<24>>24)<(0);
      if ($256) {
       $257 = HEAP32[$253>>2]|0;
       HEAP8[$3>>0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($257,$3);
       $258 = ((($252)) + -20|0);
       HEAP32[$258>>2] = 0;
      } else {
       HEAP8[$3>>0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($253,$3);
       HEAP8[$254>>0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($253);
      ;HEAP32[$253>>2]=HEAP32[$4>>2]|0;HEAP32[$253+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$253+8>>2]=HEAP32[$4+8>>2]|0;
      $$0$i$i$i$i634 = 0;
      while(1) {
       $exitcond$i$i$i$i635 = ($$0$i$i$i$i634|0)==(3);
       if ($exitcond$i$i$i$i635) {
        break;
       }
       $259 = (($4) + ($$0$i$i$i$i634<<2)|0);
       HEAP32[$259>>2] = 0;
       $260 = (($$0$i$i$i$i634) + 1)|0;
       $$0$i$i$i$i634 = $260;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      $$14 = $215;
      break L1;
      break;
     }
     case 110:  {
      $261 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $261;
      break L1;
      break;
     }
     case 115:  {
      $262 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_dot_star_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $262;
      break L1;
      break;
     }
     case 116:  {
      $263 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_dot_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $263;
      break L1;
      break;
     }
     case 118:  {
      $264 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $265 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3691)|0);
      $266 = ($265>>>0)>(4294967279);
      if ($266) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $267 = ($265>>>0)<(11);
      if ($267) {
       $268 = $265&255;
       $269 = ((($4)) + 11|0);
       HEAP8[$269>>0] = $268;
       $$0$i$i637 = $4;
      } else {
       $270 = (($265) + 16)|0;
       $271 = $270 & -16;
       $272 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($271)|0);
       HEAP32[$4>>2] = $272;
       $273 = $271 | -2147483648;
       $274 = ((($4)) + 8|0);
       HEAP32[$274>>2] = $273;
       $275 = ((($4)) + 4|0);
       HEAP32[$275>>2] = $265;
       $$0$i$i637 = $272;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i637,3691,$265)|0);
      $276 = (($$0$i$i637) + ($265)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($276,$3);
      $277 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($264,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $278 = ($277|0)==($264|0);
      $$567 = $278 ? $0 : $277;
      $$14 = $$567;
      break L1;
      break;
     }
     case 86:  {
      $279 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $280 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3693)|0);
      $281 = ($280>>>0)>(4294967279);
      if ($281) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $282 = ($280>>>0)<(11);
      if ($282) {
       $283 = $280&255;
       $284 = ((($4)) + 11|0);
       HEAP8[$284>>0] = $283;
       $$0$i$i639 = $4;
      } else {
       $285 = (($280) + 16)|0;
       $286 = $285 & -16;
       $287 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($286)|0);
       HEAP32[$4>>2] = $287;
       $288 = $286 | -2147483648;
       $289 = ((($4)) + 8|0);
       HEAP32[$289>>2] = $288;
       $290 = ((($4)) + 4|0);
       HEAP32[$290>>2] = $280;
       $$0$i$i639 = $287;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i639,3693,$280)|0);
      $291 = (($$0$i$i639) + ($280)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($291,$3);
      $292 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($279,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $293 = ($292|0)==($279|0);
      $$568 = $293 ? $0 : $292;
      $$14 = $$568;
      break L1;
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 101:  {
     $294 = ((($$0503)) + 1|0);
     $295 = HEAP8[$294>>0]|0;
     $296 = $295 << 24 >> 24;
     switch ($296|0) {
     case 111:  {
      $297 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $298 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3696)|0);
      $299 = ($298>>>0)>(4294967279);
      if ($299) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $300 = ($298>>>0)<(11);
      if ($300) {
       $301 = $298&255;
       $302 = ((($4)) + 11|0);
       HEAP8[$302>>0] = $301;
       $$0$i$i641 = $4;
      } else {
       $303 = (($298) + 16)|0;
       $304 = $303 & -16;
       $305 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($304)|0);
       HEAP32[$4>>2] = $305;
       $306 = $304 | -2147483648;
       $307 = ((($4)) + 8|0);
       HEAP32[$307>>2] = $306;
       $308 = ((($4)) + 4|0);
       HEAP32[$308>>2] = $298;
       $$0$i$i641 = $305;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i641,3696,$298)|0);
      $309 = (($$0$i$i641) + ($298)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($309,$3);
      $310 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($297,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $311 = ($310|0)==($297|0);
      $$569 = $311 ? $0 : $310;
      $$14 = $$569;
      break L1;
      break;
     }
     case 79:  {
      $312 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $313 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3698)|0);
      $314 = ($313>>>0)>(4294967279);
      if ($314) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $315 = ($313>>>0)<(11);
      if ($315) {
       $316 = $313&255;
       $317 = ((($4)) + 11|0);
       HEAP8[$317>>0] = $316;
       $$0$i$i643 = $4;
      } else {
       $318 = (($313) + 16)|0;
       $319 = $318 & -16;
       $320 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($319)|0);
       HEAP32[$4>>2] = $320;
       $321 = $319 | -2147483648;
       $322 = ((($4)) + 8|0);
       HEAP32[$322>>2] = $321;
       $323 = ((($4)) + 4|0);
       HEAP32[$323>>2] = $313;
       $$0$i$i643 = $320;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i643,3698,$313)|0);
      $324 = (($$0$i$i643) + ($313)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($324,$3);
      $325 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($312,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $326 = ($325|0)==($312|0);
      $$570 = $326 ? $0 : $325;
      $$14 = $$570;
      break L1;
      break;
     }
     case 113:  {
      $327 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $328 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3701)|0);
      $329 = ($328>>>0)>(4294967279);
      if ($329) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $330 = ($328>>>0)<(11);
      if ($330) {
       $331 = $328&255;
       $332 = ((($4)) + 11|0);
       HEAP8[$332>>0] = $331;
       $$0$i$i645 = $4;
      } else {
       $333 = (($328) + 16)|0;
       $334 = $333 & -16;
       $335 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($334)|0);
       HEAP32[$4>>2] = $335;
       $336 = $334 | -2147483648;
       $337 = ((($4)) + 8|0);
       HEAP32[$337>>2] = $336;
       $338 = ((($4)) + 4|0);
       HEAP32[$338>>2] = $328;
       $$0$i$i645 = $335;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i645,3701,$328)|0);
      $339 = (($$0$i$i645) + ($328)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($339,$3);
      $340 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($327,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $341 = ($340|0)==($327|0);
      $$571 = $341 ? $0 : $340;
      $$14 = $$571;
      break L1;
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 103:  {
     $342 = ((($$0503)) + 1|0);
     $343 = HEAP8[$342>>0]|0;
     $344 = $343 << 24 >> 24;
     switch ($344|0) {
     case 101:  {
      $345 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $346 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3704)|0);
      $347 = ($346>>>0)>(4294967279);
      if ($347) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $348 = ($346>>>0)<(11);
      if ($348) {
       $349 = $346&255;
       $350 = ((($4)) + 11|0);
       HEAP8[$350>>0] = $349;
       $$0$i$i647 = $4;
      } else {
       $351 = (($346) + 16)|0;
       $352 = $351 & -16;
       $353 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($352)|0);
       HEAP32[$4>>2] = $353;
       $354 = $352 | -2147483648;
       $355 = ((($4)) + 8|0);
       HEAP32[$355>>2] = $354;
       $356 = ((($4)) + 4|0);
       HEAP32[$356>>2] = $346;
       $$0$i$i647 = $353;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i647,3704,$346)|0);
      $357 = (($$0$i$i647) + ($346)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($357,$3);
      $358 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($345,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $359 = ($358|0)==($345|0);
      $$572 = $359 ? $0 : $358;
      $$14 = $$572;
      break L1;
      break;
     }
     case 116:  {
      $360 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $361 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3634)|0);
      $362 = ($361>>>0)>(4294967279);
      if ($362) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $363 = ($361>>>0)<(11);
      if ($363) {
       $364 = $361&255;
       $365 = ((($4)) + 11|0);
       HEAP8[$365>>0] = $364;
       $$0$i$i649 = $4;
      } else {
       $366 = (($361) + 16)|0;
       $367 = $366 & -16;
       $368 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($367)|0);
       HEAP32[$4>>2] = $368;
       $369 = $367 | -2147483648;
       $370 = ((($4)) + 8|0);
       HEAP32[$370>>2] = $369;
       $371 = ((($4)) + 4|0);
       HEAP32[$371>>2] = $361;
       $$0$i$i649 = $368;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i649,3634,$361)|0);
      $372 = (($$0$i$i649) + ($361)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($372,$3);
      $373 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($360,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $374 = ($373|0)==($360|0);
      $$573 = $374 ? $0 : $373;
      $$14 = $$573;
      break L1;
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 105:  {
     $375 = ((($$0503)) + 1|0);
     $376 = HEAP8[$375>>0]|0;
     $377 = ($376<<24>>24)==(120);
     if (!($377)) {
      $$14 = $0;
      break L1;
     }
     $378 = ((($0)) + 2|0);
     $379 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($378,$1,$2)|0);
     $380 = ($379|0)==($378|0);
     if ($380) {
      $$14 = $0;
      break L1;
     }
     $381 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($379,$1,$2)|0);
     $382 = ($381|0)==($379|0);
     $383 = ((($2)) + 4|0);
     if ($382) {
      $417 = HEAP32[$383>>2]|0;
      $418 = ((($417)) + -24|0);
      $419 = $417;
      while(1) {
       $420 = ($419|0)==($418|0);
       if ($420) {
        $$14 = $0;
        break L1;
       }
       $421 = ((($419)) + -24|0);
       HEAP32[$383>>2] = $421;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($421);
       $$pre$i662 = HEAP32[$383>>2]|0;
       $419 = $$pre$i662;
      }
     }
     $384 = HEAP32[$383>>2]|0;
     $385 = HEAP32[$2>>2]|0;
     $386 = (($384) - ($385))|0;
     $387 = (($386|0) / 24)&-1;
     $388 = ($387>>>0)<(2);
     if ($388) {
      $$14 = $0;
      break L1;
     }
     $389 = $384;
     $390 = ((($389)) + -24|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$390);
     $391 = HEAP32[$383>>2]|0;
     $392 = ((($391)) + -24|0);
     $393 = $391;
     while(1) {
      $394 = ($393|0)==($392|0);
      if ($394) {
       break;
      }
      $395 = ((($393)) + -24|0);
      HEAP32[$383>>2] = $395;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($395);
      $$pre$i = HEAP32[$383>>2]|0;
      $393 = $$pre$i;
     }
     $396 = ((($391)) + -48|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4,$396);
     __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($9,3598,$4);
     $397 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($9,3707)|0);
     ;HEAP32[$7>>2]=HEAP32[$9>>2]|0;HEAP32[$7+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$9+8>>2]|0;
     $$0$i$i$i651 = 0;
     while(1) {
      $exitcond$i$i$i652 = ($$0$i$i$i651|0)==(3);
      if ($exitcond$i$i$i652) {
       break;
      }
      $398 = (($9) + ($$0$i$i$i651<<2)|0);
      HEAP32[$398>>2] = 0;
      $399 = (($$0$i$i$i651) + 1)|0;
      $$0$i$i$i651 = $399;
     }
     $400 = ((($3)) + 11|0);
     $401 = HEAP8[$400>>0]|0;
     $402 = ($401<<24>>24)<(0);
     $403 = HEAP32[$3>>2]|0;
     $404 = ((($3)) + 4|0);
     $405 = HEAP32[$404>>2]|0;
     $406 = $401&255;
     $407 = $402 ? $403 : $3;
     $408 = $402 ? $405 : $406;
     $409 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($7,$407,$408)|0);
     ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
     $$0$i$i$i655 = 0;
     while(1) {
      $exitcond$i$i$i656 = ($$0$i$i$i655|0)==(3);
      if ($exitcond$i$i$i656) {
       break;
      }
      $410 = (($7) + ($$0$i$i$i655<<2)|0);
      HEAP32[$410>>2] = 0;
      $411 = (($$0$i$i$i655) + 1)|0;
      $$0$i$i$i655 = $411;
     }
     $412 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6,3645)|0);
     ;HEAP32[$8>>2]=HEAP32[$6>>2]|0;HEAP32[$8+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$6+8>>2]|0;
     $$0$i$i$i658 = 0;
     while(1) {
      $exitcond$i$i$i659 = ($$0$i$i$i658|0)==(3);
      if ($exitcond$i$i$i659) {
       break;
      }
      $413 = (($6) + ($$0$i$i$i658<<2)|0);
      HEAP32[$413>>2] = 0;
      $414 = (($$0$i$i$i658) + 1)|0;
      $$0$i$i$i658 = $414;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($5,$8);
     $415 = HEAP32[$383>>2]|0;
     $416 = ((($415)) + -24|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($416,$5);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$14 = $381;
     break L1;
     break;
    }
    case 108:  {
     $422 = ((($$0503)) + 1|0);
     $423 = HEAP8[$422>>0]|0;
     $424 = $423 << 24 >> 24;
     switch ($424|0) {
     case 101:  {
      $425 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $426 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3710)|0);
      $427 = ($426>>>0)>(4294967279);
      if ($427) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $428 = ($426>>>0)<(11);
      if ($428) {
       $429 = $426&255;
       $430 = ((($4)) + 11|0);
       HEAP8[$430>>0] = $429;
       $$0$i$i664 = $4;
      } else {
       $431 = (($426) + 16)|0;
       $432 = $431 & -16;
       $433 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($432)|0);
       HEAP32[$4>>2] = $433;
       $434 = $432 | -2147483648;
       $435 = ((($4)) + 8|0);
       HEAP32[$435>>2] = $434;
       $436 = ((($4)) + 4|0);
       HEAP32[$436>>2] = $426;
       $$0$i$i664 = $433;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i664,3710,$426)|0);
      $437 = (($$0$i$i664) + ($426)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($437,$3);
      $438 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($425,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $439 = ($438|0)==($425|0);
      $$574 = $439 ? $0 : $438;
      $$14 = $$574;
      break L1;
      break;
     }
     case 115:  {
      $440 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $441 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3713)|0);
      $442 = ($441>>>0)>(4294967279);
      if ($442) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $443 = ($441>>>0)<(11);
      if ($443) {
       $444 = $441&255;
       $445 = ((($4)) + 11|0);
       HEAP8[$445>>0] = $444;
       $$0$i$i666 = $4;
      } else {
       $446 = (($441) + 16)|0;
       $447 = $446 & -16;
       $448 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($447)|0);
       HEAP32[$4>>2] = $448;
       $449 = $447 | -2147483648;
       $450 = ((($4)) + 8|0);
       HEAP32[$450>>2] = $449;
       $451 = ((($4)) + 4|0);
       HEAP32[$451>>2] = $441;
       $$0$i$i666 = $448;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i666,3713,$441)|0);
      $452 = (($$0$i$i666) + ($441)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($452,$3);
      $453 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($440,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $454 = ($453|0)==($440|0);
      $$575 = $454 ? $0 : $453;
      $$14 = $$575;
      break L1;
      break;
     }
     case 83:  {
      $455 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $456 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3716)|0);
      $457 = ($456>>>0)>(4294967279);
      if ($457) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $458 = ($456>>>0)<(11);
      if ($458) {
       $459 = $456&255;
       $460 = ((($4)) + 11|0);
       HEAP8[$460>>0] = $459;
       $$0$i$i668 = $4;
      } else {
       $461 = (($456) + 16)|0;
       $462 = $461 & -16;
       $463 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($462)|0);
       HEAP32[$4>>2] = $463;
       $464 = $462 | -2147483648;
       $465 = ((($4)) + 8|0);
       HEAP32[$465>>2] = $464;
       $466 = ((($4)) + 4|0);
       HEAP32[$466>>2] = $456;
       $$0$i$i668 = $463;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i668,3716,$456)|0);
      $467 = (($$0$i$i668) + ($456)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($467,$3);
      $468 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($455,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $469 = ($468|0)==($455|0);
      $$576 = $469 ? $0 : $468;
      $$14 = $$576;
      break L1;
      break;
     }
     case 116:  {
      $470 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $471 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3632)|0);
      $472 = ($471>>>0)>(4294967279);
      if ($472) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $473 = ($471>>>0)<(11);
      if ($473) {
       $474 = $471&255;
       $475 = ((($4)) + 11|0);
       HEAP8[$475>>0] = $474;
       $$0$i$i670 = $4;
      } else {
       $476 = (($471) + 16)|0;
       $477 = $476 & -16;
       $478 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($477)|0);
       HEAP32[$4>>2] = $478;
       $479 = $477 | -2147483648;
       $480 = ((($4)) + 8|0);
       HEAP32[$480>>2] = $479;
       $481 = ((($4)) + 4|0);
       HEAP32[$481>>2] = $471;
       $$0$i$i670 = $478;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i670,3632,$471)|0);
      $482 = (($$0$i$i670) + ($471)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($482,$3);
      $483 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($470,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $484 = ($483|0)==($470|0);
      $$577 = $484 ? $0 : $483;
      $$14 = $$577;
      break L1;
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 109:  {
     $485 = ((($$0503)) + 1|0);
     $486 = HEAP8[$485>>0]|0;
     $487 = $486 << 24 >> 24;
     switch ($487|0) {
     case 105:  {
      $488 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $489 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3720)|0);
      $490 = ($489>>>0)>(4294967279);
      if ($490) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $491 = ($489>>>0)<(11);
      if ($491) {
       $492 = $489&255;
       $493 = ((($4)) + 11|0);
       HEAP8[$493>>0] = $492;
       $$0$i$i672 = $4;
      } else {
       $494 = (($489) + 16)|0;
       $495 = $494 & -16;
       $496 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($495)|0);
       HEAP32[$4>>2] = $496;
       $497 = $495 | -2147483648;
       $498 = ((($4)) + 8|0);
       HEAP32[$498>>2] = $497;
       $499 = ((($4)) + 4|0);
       HEAP32[$499>>2] = $489;
       $$0$i$i672 = $496;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i672,3720,$489)|0);
      $500 = (($$0$i$i672) + ($489)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($500,$3);
      $501 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($488,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $502 = ($501|0)==($488|0);
      $$578 = $502 ? $0 : $501;
      $$14 = $$578;
      break L1;
      break;
     }
     case 73:  {
      $503 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $504 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3722)|0);
      $505 = ($504>>>0)>(4294967279);
      if ($505) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $506 = ($504>>>0)<(11);
      if ($506) {
       $507 = $504&255;
       $508 = ((($4)) + 11|0);
       HEAP8[$508>>0] = $507;
       $$0$i$i674 = $4;
      } else {
       $509 = (($504) + 16)|0;
       $510 = $509 & -16;
       $511 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($510)|0);
       HEAP32[$4>>2] = $511;
       $512 = $510 | -2147483648;
       $513 = ((($4)) + 8|0);
       HEAP32[$513>>2] = $512;
       $514 = ((($4)) + 4|0);
       HEAP32[$514>>2] = $504;
       $$0$i$i674 = $511;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i674,3722,$504)|0);
      $515 = (($$0$i$i674) + ($504)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($515,$3);
      $516 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($503,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $517 = ($516|0)==($503|0);
      $$579 = $517 ? $0 : $516;
      $$14 = $$579;
      break L1;
      break;
     }
     case 108:  {
      $518 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $519 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3616)|0);
      $520 = ($519>>>0)>(4294967279);
      if ($520) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $521 = ($519>>>0)<(11);
      if ($521) {
       $522 = $519&255;
       $523 = ((($4)) + 11|0);
       HEAP8[$523>>0] = $522;
       $$0$i$i676 = $4;
      } else {
       $524 = (($519) + 16)|0;
       $525 = $524 & -16;
       $526 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($525)|0);
       HEAP32[$4>>2] = $526;
       $527 = $525 | -2147483648;
       $528 = ((($4)) + 8|0);
       HEAP32[$528>>2] = $527;
       $529 = ((($4)) + 4|0);
       HEAP32[$529>>2] = $519;
       $$0$i$i676 = $526;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i676,3616,$519)|0);
      $530 = (($$0$i$i676) + ($519)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($530,$3);
      $531 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($518,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $532 = ($531|0)==($518|0);
      $$580 = $532 ? $0 : $531;
      $$14 = $$580;
      break L1;
      break;
     }
     case 76:  {
      $533 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $534 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3725)|0);
      $535 = ($534>>>0)>(4294967279);
      if ($535) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $536 = ($534>>>0)<(11);
      if ($536) {
       $537 = $534&255;
       $538 = ((($4)) + 11|0);
       HEAP8[$538>>0] = $537;
       $$0$i$i678 = $4;
      } else {
       $539 = (($534) + 16)|0;
       $540 = $539 & -16;
       $541 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($540)|0);
       HEAP32[$4>>2] = $541;
       $542 = $540 | -2147483648;
       $543 = ((($4)) + 8|0);
       HEAP32[$543>>2] = $542;
       $544 = ((($4)) + 4|0);
       HEAP32[$544>>2] = $534;
       $$0$i$i678 = $541;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i678,3725,$534)|0);
      $545 = (($$0$i$i678) + ($534)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($545,$3);
      $546 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($533,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $547 = ($546|0)==($533|0);
      $$581 = $547 ? $0 : $546;
      $$14 = $$581;
      break L1;
      break;
     }
     case 109:  {
      $548 = ((($0)) + 2|0);
      $549 = ($548|0)==($1|0);
      if (!($549)) {
       $550 = HEAP8[$548>>0]|0;
       $551 = ($550<<24>>24)==(95);
       if ($551) {
        $552 = ((($0)) + 3|0);
        ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
        $553 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3728)|0);
        $554 = ($553>>>0)>(4294967279);
        if ($554) {
         __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
         // unreachable;
        }
        $555 = ($553>>>0)<(11);
        if ($555) {
         $556 = $553&255;
         $557 = ((($4)) + 11|0);
         HEAP8[$557>>0] = $556;
         $$0$i$i680 = $4;
        } else {
         $558 = (($553) + 16)|0;
         $559 = $558 & -16;
         $560 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($559)|0);
         HEAP32[$4>>2] = $560;
         $561 = $559 | -2147483648;
         $562 = ((($4)) + 8|0);
         HEAP32[$562>>2] = $561;
         $563 = ((($4)) + 4|0);
         HEAP32[$563>>2] = $553;
         $$0$i$i680 = $560;
        }
        (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i680,3728,$553)|0);
        $564 = (($$0$i$i680) + ($553)|0);
        HEAP8[$3>>0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($564,$3);
        $565 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($552,$1,$4,$2)|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
        $566 = ($565|0)==($552|0);
        $$582 = $566 ? $0 : $565;
        $$14 = $$582;
        break L1;
       }
      }
      $567 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($548,$1,$2)|0);
      $568 = ($567|0)==($548|0);
      if ($568) {
       $$14 = $0;
       break L1;
      }
      $569 = HEAP32[$2>>2]|0;
      $570 = ((($2)) + 4|0);
      $571 = HEAP32[$570>>2]|0;
      $572 = ($569|0)==($571|0);
      if ($572) {
       $$14 = $0;
       break L1;
      }
      $573 = ((($571)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5,$573);
      $574 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($5,0,3598)|0);
      ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
      $$0$i$i$i682 = 0;
      while(1) {
       $exitcond$i$i$i683 = ($$0$i$i$i682|0)==(3);
       if ($exitcond$i$i$i683) {
        break;
       }
       $575 = (($5) + ($$0$i$i$i682<<2)|0);
       HEAP32[$575>>2] = 0;
       $576 = (($$0$i$i$i682) + 1)|0;
       $$0$i$i$i682 = $576;
      }
      $577 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4,3731)|0);
      ;HEAP32[$10>>2]=HEAP32[$4>>2]|0;HEAP32[$10+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$4+8>>2]|0;
      $$0$i$i$i685 = 0;
      while(1) {
       $exitcond$i$i$i686 = ($$0$i$i$i685|0)==(3);
       if ($exitcond$i$i$i686) {
        break;
       }
       $578 = (($4) + ($$0$i$i$i685<<2)|0);
       HEAP32[$578>>2] = 0;
       $579 = (($$0$i$i$i685) + 1)|0;
       $$0$i$i$i685 = $579;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$10);
      $580 = HEAP32[$570>>2]|0;
      $581 = ((($580)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($581,$3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      $$14 = $567;
      break L1;
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 110:  {
     $582 = ((($$0503)) + 1|0);
     $583 = HEAP8[$582>>0]|0;
     $584 = $583 << 24 >> 24;
     switch ($584|0) {
     case 119: case 97:  {
      $585 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_new_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $585;
      break L1;
      break;
     }
     case 101:  {
      $586 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $587 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3735)|0);
      $588 = ($587>>>0)>(4294967279);
      if ($588) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $589 = ($587>>>0)<(11);
      if ($589) {
       $590 = $587&255;
       $591 = ((($4)) + 11|0);
       HEAP8[$591>>0] = $590;
       $$0$i$i689 = $4;
      } else {
       $592 = (($587) + 16)|0;
       $593 = $592 & -16;
       $594 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($593)|0);
       HEAP32[$4>>2] = $594;
       $595 = $593 | -2147483648;
       $596 = ((($4)) + 8|0);
       HEAP32[$596>>2] = $595;
       $597 = ((($4)) + 4|0);
       HEAP32[$597>>2] = $587;
       $$0$i$i689 = $594;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i689,3735,$587)|0);
      $598 = (($$0$i$i689) + ($587)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($598,$3);
      $599 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($586,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $600 = ($599|0)==($586|0);
      $$583 = $600 ? $0 : $599;
      $$14 = $$583;
      break L1;
      break;
     }
     case 103:  {
      $601 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $602 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3720)|0);
      $603 = ($602>>>0)>(4294967279);
      if ($603) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $604 = ($602>>>0)<(11);
      if ($604) {
       $605 = $602&255;
       $606 = ((($4)) + 11|0);
       HEAP8[$606>>0] = $605;
       $$0$i$i691 = $4;
      } else {
       $607 = (($602) + 16)|0;
       $608 = $607 & -16;
       $609 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($608)|0);
       HEAP32[$4>>2] = $609;
       $610 = $608 | -2147483648;
       $611 = ((($4)) + 8|0);
       HEAP32[$611>>2] = $610;
       $612 = ((($4)) + 4|0);
       HEAP32[$612>>2] = $602;
       $$0$i$i691 = $609;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i691,3720,$602)|0);
      $613 = (($$0$i$i691) + ($602)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($613,$3);
      $614 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($601,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $615 = ($614|0)==($601|0);
      $$584 = $615 ? $0 : $614;
      $$14 = $$584;
      break L1;
      break;
     }
     case 116:  {
      $616 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $617 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3738)|0);
      $618 = ($617>>>0)>(4294967279);
      if ($618) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $619 = ($617>>>0)<(11);
      if ($619) {
       $620 = $617&255;
       $621 = ((($4)) + 11|0);
       HEAP8[$621>>0] = $620;
       $$0$i$i693 = $4;
      } else {
       $622 = (($617) + 16)|0;
       $623 = $622 & -16;
       $624 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($623)|0);
       HEAP32[$4>>2] = $624;
       $625 = $623 | -2147483648;
       $626 = ((($4)) + 8|0);
       HEAP32[$626>>2] = $625;
       $627 = ((($4)) + 4|0);
       HEAP32[$627>>2] = $617;
       $$0$i$i693 = $624;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i693,3738,$617)|0);
      $628 = (($$0$i$i693) + ($617)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($628,$3);
      $629 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($616,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $630 = ($629|0)==($616|0);
      $$585 = $630 ? $0 : $629;
      $$14 = $$585;
      break L1;
      break;
     }
     case 120:  {
      $631 = ((($0)) + 2|0);
      $632 = (__ZN10__cxxabiv112_GLOBAL__N_125parse_noexcept_expressionINS0_2DbEEEPKcS4_S4_RT_($631,$1,$2)|0);
      $633 = ($632|0)==($631|0);
      $$586 = $633 ? $0 : $632;
      $$14 = $$586;
      break L1;
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 111:  {
     $634 = ((($$0503)) + 1|0);
     $635 = HEAP8[$634>>0]|0;
     $636 = $635 << 24 >> 24;
     switch ($636|0) {
     case 110:  {
      $637 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $637;
      break L1;
      break;
     }
     case 111:  {
      $638 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $639 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3740)|0);
      $640 = ($639>>>0)>(4294967279);
      if ($640) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $641 = ($639>>>0)<(11);
      if ($641) {
       $642 = $639&255;
       $643 = ((($4)) + 11|0);
       HEAP8[$643>>0] = $642;
       $$0$i$i695 = $4;
      } else {
       $644 = (($639) + 16)|0;
       $645 = $644 & -16;
       $646 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($645)|0);
       HEAP32[$4>>2] = $646;
       $647 = $645 | -2147483648;
       $648 = ((($4)) + 8|0);
       HEAP32[$648>>2] = $647;
       $649 = ((($4)) + 4|0);
       HEAP32[$649>>2] = $639;
       $$0$i$i695 = $646;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i695,3740,$639)|0);
      $650 = (($$0$i$i695) + ($639)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($650,$3);
      $651 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($638,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $652 = ($651|0)==($638|0);
      $$587 = $652 ? $0 : $651;
      $$14 = $$587;
      break L1;
      break;
     }
     case 114:  {
      $653 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $654 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3743)|0);
      $655 = ($654>>>0)>(4294967279);
      if ($655) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $656 = ($654>>>0)<(11);
      if ($656) {
       $657 = $654&255;
       $658 = ((($4)) + 11|0);
       HEAP8[$658>>0] = $657;
       $$0$i$i697 = $4;
      } else {
       $659 = (($654) + 16)|0;
       $660 = $659 & -16;
       $661 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($660)|0);
       HEAP32[$4>>2] = $661;
       $662 = $660 | -2147483648;
       $663 = ((($4)) + 8|0);
       HEAP32[$663>>2] = $662;
       $664 = ((($4)) + 4|0);
       HEAP32[$664>>2] = $654;
       $$0$i$i697 = $661;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i697,3743,$654)|0);
      $665 = (($$0$i$i697) + ($654)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($665,$3);
      $666 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($653,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $667 = ($666|0)==($653|0);
      $$588 = $667 ? $0 : $666;
      $$14 = $$588;
      break L1;
      break;
     }
     case 82:  {
      $668 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $669 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3745)|0);
      $670 = ($669>>>0)>(4294967279);
      if ($670) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $671 = ($669>>>0)<(11);
      if ($671) {
       $672 = $669&255;
       $673 = ((($4)) + 11|0);
       HEAP8[$673>>0] = $672;
       $$0$i$i699 = $4;
      } else {
       $674 = (($669) + 16)|0;
       $675 = $674 & -16;
       $676 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($675)|0);
       HEAP32[$4>>2] = $676;
       $677 = $675 | -2147483648;
       $678 = ((($4)) + 8|0);
       HEAP32[$678>>2] = $677;
       $679 = ((($4)) + 4|0);
       HEAP32[$679>>2] = $669;
       $$0$i$i699 = $676;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i699,3745,$669)|0);
      $680 = (($$0$i$i699) + ($669)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($680,$3);
      $681 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($668,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $682 = ($681|0)==($668|0);
      $$589 = $682 ? $0 : $681;
      $$14 = $$589;
      break L1;
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 112:  {
     $683 = ((($$0503)) + 1|0);
     $684 = HEAP8[$683>>0]|0;
     $685 = $684 << 24 >> 24;
     switch ($685|0) {
     case 109:  {
      $686 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $687 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3748)|0);
      $688 = ($687>>>0)>(4294967279);
      if ($688) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $689 = ($687>>>0)<(11);
      if ($689) {
       $690 = $687&255;
       $691 = ((($4)) + 11|0);
       HEAP8[$691>>0] = $690;
       $$0$i$i701 = $4;
      } else {
       $692 = (($687) + 16)|0;
       $693 = $692 & -16;
       $694 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($693)|0);
       HEAP32[$4>>2] = $694;
       $695 = $693 | -2147483648;
       $696 = ((($4)) + 8|0);
       HEAP32[$696>>2] = $695;
       $697 = ((($4)) + 4|0);
       HEAP32[$697>>2] = $687;
       $$0$i$i701 = $694;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i701,3748,$687)|0);
      $698 = (($$0$i$i701) + ($687)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($698,$3);
      $699 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($686,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $700 = ($699|0)==($686|0);
      $$590 = $700 ? $0 : $699;
      $$14 = $$590;
      break L1;
      break;
     }
     case 108:  {
      $701 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $702 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3752)|0);
      $703 = ($702>>>0)>(4294967279);
      if ($703) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $704 = ($702>>>0)<(11);
      if ($704) {
       $705 = $702&255;
       $706 = ((($4)) + 11|0);
       HEAP8[$706>>0] = $705;
       $$0$i$i703 = $4;
      } else {
       $707 = (($702) + 16)|0;
       $708 = $707 & -16;
       $709 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($708)|0);
       HEAP32[$4>>2] = $709;
       $710 = $708 | -2147483648;
       $711 = ((($4)) + 8|0);
       HEAP32[$711>>2] = $710;
       $712 = ((($4)) + 4|0);
       HEAP32[$712>>2] = $702;
       $$0$i$i703 = $709;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i703,3752,$702)|0);
      $713 = (($$0$i$i703) + ($702)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($713,$3);
      $714 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($701,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $715 = ($714|0)==($701|0);
      $$591 = $715 ? $0 : $714;
      $$14 = $$591;
      break L1;
      break;
     }
     case 76:  {
      $716 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $717 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3754)|0);
      $718 = ($717>>>0)>(4294967279);
      if ($718) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $719 = ($717>>>0)<(11);
      if ($719) {
       $720 = $717&255;
       $721 = ((($4)) + 11|0);
       HEAP8[$721>>0] = $720;
       $$0$i$i705 = $4;
      } else {
       $722 = (($717) + 16)|0;
       $723 = $722 & -16;
       $724 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($723)|0);
       HEAP32[$4>>2] = $724;
       $725 = $723 | -2147483648;
       $726 = ((($4)) + 8|0);
       HEAP32[$726>>2] = $725;
       $727 = ((($4)) + 4|0);
       HEAP32[$727>>2] = $717;
       $$0$i$i705 = $724;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i705,3754,$717)|0);
      $728 = (($$0$i$i705) + ($717)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($728,$3);
      $729 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($716,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $730 = ($729|0)==($716|0);
      $$592 = $730 ? $0 : $729;
      $$14 = $$592;
      break L1;
      break;
     }
     case 112:  {
      $731 = ((($0)) + 2|0);
      $732 = ($731|0)==($1|0);
      if (!($732)) {
       $733 = HEAP8[$731>>0]|0;
       $734 = ($733<<24>>24)==(95);
       if ($734) {
        $735 = ((($0)) + 3|0);
        ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
        $736 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3757)|0);
        $737 = ($736>>>0)>(4294967279);
        if ($737) {
         __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
         // unreachable;
        }
        $738 = ($736>>>0)<(11);
        if ($738) {
         $739 = $736&255;
         $740 = ((($4)) + 11|0);
         HEAP8[$740>>0] = $739;
         $$0$i$i707 = $4;
        } else {
         $741 = (($736) + 16)|0;
         $742 = $741 & -16;
         $743 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($742)|0);
         HEAP32[$4>>2] = $743;
         $744 = $742 | -2147483648;
         $745 = ((($4)) + 8|0);
         HEAP32[$745>>2] = $744;
         $746 = ((($4)) + 4|0);
         HEAP32[$746>>2] = $736;
         $$0$i$i707 = $743;
        }
        (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i707,3757,$736)|0);
        $747 = (($$0$i$i707) + ($736)|0);
        HEAP8[$3>>0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($747,$3);
        $748 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($735,$1,$4,$2)|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
        $749 = ($748|0)==($735|0);
        $$593 = $749 ? $0 : $748;
        $$14 = $$593;
        break L1;
       }
      }
      $750 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($731,$1,$2)|0);
      $751 = ($750|0)==($731|0);
      if ($751) {
       $$14 = $0;
       break L1;
      }
      $752 = HEAP32[$2>>2]|0;
      $753 = ((($2)) + 4|0);
      $754 = HEAP32[$753>>2]|0;
      $755 = ($752|0)==($754|0);
      if ($755) {
       $$14 = $0;
       break L1;
      }
      $756 = ((($754)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5,$756);
      $757 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($5,0,3598)|0);
      ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
      $$0$i$i$i709 = 0;
      while(1) {
       $exitcond$i$i$i710 = ($$0$i$i$i709|0)==(3);
       if ($exitcond$i$i$i710) {
        break;
       }
       $758 = (($5) + ($$0$i$i$i709<<2)|0);
       HEAP32[$758>>2] = 0;
       $759 = (($$0$i$i$i709) + 1)|0;
       $$0$i$i$i709 = $759;
      }
      $760 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4,3760)|0);
      ;HEAP32[$11>>2]=HEAP32[$4>>2]|0;HEAP32[$11+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$4+8>>2]|0;
      $$0$i$i$i713 = 0;
      while(1) {
       $exitcond$i$i$i714 = ($$0$i$i$i713|0)==(3);
       if ($exitcond$i$i$i714) {
        break;
       }
       $761 = (($4) + ($$0$i$i$i713<<2)|0);
       HEAP32[$761>>2] = 0;
       $762 = (($$0$i$i$i713) + 1)|0;
       $$0$i$i$i713 = $762;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$11);
      $763 = HEAP32[$753>>2]|0;
      $764 = ((($763)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($764,$3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      $$14 = $750;
      break L1;
      break;
     }
     case 115:  {
      $765 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $766 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3752)|0);
      $767 = ($766>>>0)>(4294967279);
      if ($767) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $768 = ($766>>>0)<(11);
      if ($768) {
       $769 = $766&255;
       $770 = ((($4)) + 11|0);
       HEAP8[$770>>0] = $769;
       $$0$i$i717 = $4;
      } else {
       $771 = (($766) + 16)|0;
       $772 = $771 & -16;
       $773 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($772)|0);
       HEAP32[$4>>2] = $773;
       $774 = $772 | -2147483648;
       $775 = ((($4)) + 8|0);
       HEAP32[$775>>2] = $774;
       $776 = ((($4)) + 4|0);
       HEAP32[$776>>2] = $766;
       $$0$i$i717 = $773;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i717,3752,$766)|0);
      $777 = (($$0$i$i717) + ($766)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($777,$3);
      $778 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($765,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $779 = ($778|0)==($765|0);
      $$594 = $779 ? $0 : $778;
      $$14 = $$594;
      break L1;
      break;
     }
     case 116:  {
      $780 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_arrow_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $780;
      break L1;
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 113:  {
     $781 = ((($$0503)) + 1|0);
     $782 = HEAP8[$781>>0]|0;
     $783 = ($782<<24>>24)==(117);
     if (!($783)) {
      $$14 = $0;
      break L1;
     }
     $784 = ((($0)) + 2|0);
     $785 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($784,$1,$2)|0);
     $786 = ($785|0)==($784|0);
     if ($786) {
      $$14 = $0;
      break L1;
     }
     $787 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($785,$1,$2)|0);
     $788 = ($787|0)==($785|0);
     if ($788) {
      $855 = ((($2)) + 4|0);
      $856 = HEAP32[$855>>2]|0;
      $857 = ((($856)) + -24|0);
      $858 = $856;
      while(1) {
       $859 = ($858|0)==($857|0);
       if ($859) {
        $$14 = $0;
        break L1;
       }
       $860 = ((($858)) + -24|0);
       HEAP32[$855>>2] = $860;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($860);
       $$pre$i747 = HEAP32[$855>>2]|0;
       $858 = $$pre$i747;
      }
     }
     $789 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($787,$1,$2)|0);
     $790 = ($789|0)==($787|0);
     $791 = ((($2)) + 4|0);
     if ($790) {
      $846 = HEAP32[$791>>2]|0;
      $847 = ((($846)) + -24|0);
      $848 = $846;
      while(1) {
       $849 = ($848|0)==($847|0);
       if ($849) {
        break;
       }
       $850 = ((($848)) + -24|0);
       HEAP32[$791>>2] = $850;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($850);
       $$pre$i743 = HEAP32[$791>>2]|0;
       $848 = $$pre$i743;
      }
      $851 = ((($846)) + -48|0);
      $852 = $847;
      while(1) {
       $853 = ($852|0)==($851|0);
       if ($853) {
        $$14 = $0;
        break L1;
       }
       $854 = ((($852)) + -24|0);
       HEAP32[$791>>2] = $854;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($854);
       $$pre$i745 = HEAP32[$791>>2]|0;
       $852 = $$pre$i745;
      }
     }
     $792 = HEAP32[$791>>2]|0;
     $793 = HEAP32[$2>>2]|0;
     $794 = (($792) - ($793))|0;
     $795 = (($794|0) / 24)&-1;
     $796 = ($795>>>0)<(3);
     if ($796) {
      $$14 = $0;
      break L1;
     }
     $797 = $792;
     $798 = ((($797)) + -24|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$798);
     $799 = HEAP32[$791>>2]|0;
     $800 = ((($799)) + -24|0);
     $801 = $799;
     while(1) {
      $802 = ($801|0)==($800|0);
      if ($802) {
       break;
      }
      $803 = ((($801)) + -24|0);
      HEAP32[$791>>2] = $803;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($803);
      $$pre$i719 = HEAP32[$791>>2]|0;
      $801 = $$pre$i719;
     }
     $804 = ((($799)) + -48|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4,$804);
     $805 = HEAP32[$791>>2]|0;
     $806 = ((($805)) + -24|0);
     $807 = $805;
     while(1) {
      $808 = ($807|0)==($806|0);
      if ($808) {
       break;
      }
      $809 = ((($807)) + -24|0);
      HEAP32[$791>>2] = $809;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($809);
      $$pre$i721 = HEAP32[$791>>2]|0;
      $807 = $$pre$i721;
     }
     $810 = ((($805)) + -48|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5,$810);
     __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($15,3598,$5);
     $811 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($15,3764)|0);
     ;HEAP32[$14>>2]=HEAP32[$15>>2]|0;HEAP32[$14+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$14+8>>2]=HEAP32[$15+8>>2]|0;
     $$0$i$i$i723 = 0;
     while(1) {
      $exitcond$i$i$i724 = ($$0$i$i$i723|0)==(3);
      if ($exitcond$i$i$i724) {
       break;
      }
      $812 = (($15) + ($$0$i$i$i723<<2)|0);
      HEAP32[$812>>2] = 0;
      $813 = (($$0$i$i$i723) + 1)|0;
      $$0$i$i$i723 = $813;
     }
     $814 = ((($4)) + 11|0);
     $815 = HEAP8[$814>>0]|0;
     $816 = ($815<<24>>24)<(0);
     $817 = HEAP32[$4>>2]|0;
     $818 = ((($4)) + 4|0);
     $819 = HEAP32[$818>>2]|0;
     $820 = $815&255;
     $821 = $816 ? $817 : $4;
     $822 = $816 ? $819 : $820;
     $823 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($14,$821,$822)|0);
     ;HEAP32[$13>>2]=HEAP32[$14>>2]|0;HEAP32[$13+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$14+8>>2]|0;
     $$0$i$i$i727 = 0;
     while(1) {
      $exitcond$i$i$i728 = ($$0$i$i$i727|0)==(3);
      if ($exitcond$i$i$i728) {
       break;
      }
      $824 = (($14) + ($$0$i$i$i727<<2)|0);
      HEAP32[$824>>2] = 0;
      $825 = (($$0$i$i$i727) + 1)|0;
      $$0$i$i$i727 = $825;
     }
     $826 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($13,3770)|0);
     ;HEAP32[$9>>2]=HEAP32[$13>>2]|0;HEAP32[$9+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$13+8>>2]|0;
     $$0$i$i$i731 = 0;
     while(1) {
      $exitcond$i$i$i732 = ($$0$i$i$i731|0)==(3);
      if ($exitcond$i$i$i732) {
       break;
      }
      $827 = (($13) + ($$0$i$i$i731<<2)|0);
      HEAP32[$827>>2] = 0;
      $828 = (($$0$i$i$i731) + 1)|0;
      $$0$i$i$i731 = $828;
     }
     $829 = ((($3)) + 11|0);
     $830 = HEAP8[$829>>0]|0;
     $831 = ($830<<24>>24)<(0);
     $832 = HEAP32[$3>>2]|0;
     $833 = ((($3)) + 4|0);
     $834 = HEAP32[$833>>2]|0;
     $835 = $830&255;
     $836 = $831 ? $832 : $3;
     $837 = $831 ? $834 : $835;
     $838 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($9,$836,$837)|0);
     ;HEAP32[$7>>2]=HEAP32[$9>>2]|0;HEAP32[$7+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$9+8>>2]|0;
     $$0$i$i$i735 = 0;
     while(1) {
      $exitcond$i$i$i736 = ($$0$i$i$i735|0)==(3);
      if ($exitcond$i$i$i736) {
       break;
      }
      $839 = (($9) + ($$0$i$i$i735<<2)|0);
      HEAP32[$839>>2] = 0;
      $840 = (($$0$i$i$i735) + 1)|0;
      $$0$i$i$i735 = $840;
     }
     $841 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($7,3596)|0);
     ;HEAP32[$12>>2]=HEAP32[$7>>2]|0;HEAP32[$12+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$7+8>>2]|0;
     $$0$i$i$i739 = 0;
     while(1) {
      $exitcond$i$i$i740 = ($$0$i$i$i739|0)==(3);
      if ($exitcond$i$i$i740) {
       break;
      }
      $842 = (($7) + ($$0$i$i$i739<<2)|0);
      HEAP32[$842>>2] = 0;
      $843 = (($$0$i$i$i739) + 1)|0;
      $$0$i$i$i739 = $843;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($6,$12);
     $844 = HEAP32[$791>>2]|0;
     $845 = ((($844)) + -24|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($845,$6);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$14 = $789;
     break L1;
     break;
    }
    case 114:  {
     $861 = ((($$0503)) + 1|0);
     $862 = HEAP8[$861>>0]|0;
     $863 = $862 << 24 >> 24;
     switch ($863|0) {
     case 99:  {
      $864 = (__ZN10__cxxabiv112_GLOBAL__N_127parse_reinterpret_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $864;
      break L1;
      break;
     }
     case 109:  {
      $865 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $866 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3776)|0);
      $867 = ($866>>>0)>(4294967279);
      if ($867) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $868 = ($866>>>0)<(11);
      if ($868) {
       $869 = $866&255;
       $870 = ((($4)) + 11|0);
       HEAP8[$870>>0] = $869;
       $$0$i$i749 = $4;
      } else {
       $871 = (($866) + 16)|0;
       $872 = $871 & -16;
       $873 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($872)|0);
       HEAP32[$4>>2] = $873;
       $874 = $872 | -2147483648;
       $875 = ((($4)) + 8|0);
       HEAP32[$875>>2] = $874;
       $876 = ((($4)) + 4|0);
       HEAP32[$876>>2] = $866;
       $$0$i$i749 = $873;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i749,3776,$866)|0);
      $877 = (($$0$i$i749) + ($866)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($877,$3);
      $878 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($865,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $879 = ($878|0)==($865|0);
      $$595 = $879 ? $0 : $878;
      $$14 = $$595;
      break L1;
      break;
     }
     case 77:  {
      $880 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $881 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3778)|0);
      $882 = ($881>>>0)>(4294967279);
      if ($882) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $883 = ($881>>>0)<(11);
      if ($883) {
       $884 = $881&255;
       $885 = ((($4)) + 11|0);
       HEAP8[$885>>0] = $884;
       $$0$i$i751 = $4;
      } else {
       $886 = (($881) + 16)|0;
       $887 = $886 & -16;
       $888 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($887)|0);
       HEAP32[$4>>2] = $888;
       $889 = $887 | -2147483648;
       $890 = ((($4)) + 8|0);
       HEAP32[$890>>2] = $889;
       $891 = ((($4)) + 4|0);
       HEAP32[$891>>2] = $881;
       $$0$i$i751 = $888;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i751,3778,$881)|0);
      $892 = (($$0$i$i751) + ($881)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($892,$3);
      $893 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($880,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $894 = ($893|0)==($880|0);
      $$596 = $894 ? $0 : $893;
      $$14 = $$596;
      break L1;
      break;
     }
     case 115:  {
      $895 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $896 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3781)|0);
      $897 = ($896>>>0)>(4294967279);
      if ($897) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $898 = ($896>>>0)<(11);
      if ($898) {
       $899 = $896&255;
       $900 = ((($4)) + 11|0);
       HEAP8[$900>>0] = $899;
       $$0$i$i753 = $4;
      } else {
       $901 = (($896) + 16)|0;
       $902 = $901 & -16;
       $903 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($902)|0);
       HEAP32[$4>>2] = $903;
       $904 = $902 | -2147483648;
       $905 = ((($4)) + 8|0);
       HEAP32[$905>>2] = $904;
       $906 = ((($4)) + 4|0);
       HEAP32[$906>>2] = $896;
       $$0$i$i753 = $903;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i753,3781,$896)|0);
      $907 = (($$0$i$i753) + ($896)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($907,$3);
      $908 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($895,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $909 = ($908|0)==($895|0);
      $$597 = $909 ? $0 : $908;
      $$14 = $$597;
      break L1;
      break;
     }
     case 83:  {
      $910 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $911 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3784)|0);
      $912 = ($911>>>0)>(4294967279);
      if ($912) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $913 = ($911>>>0)<(11);
      if ($913) {
       $914 = $911&255;
       $915 = ((($4)) + 11|0);
       HEAP8[$915>>0] = $914;
       $$0$i$i755 = $4;
      } else {
       $916 = (($911) + 16)|0;
       $917 = $916 & -16;
       $918 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($917)|0);
       HEAP32[$4>>2] = $918;
       $919 = $917 | -2147483648;
       $920 = ((($4)) + 8|0);
       HEAP32[$920>>2] = $919;
       $921 = ((($4)) + 4|0);
       HEAP32[$921>>2] = $911;
       $$0$i$i755 = $918;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i755,3784,$911)|0);
      $922 = (($$0$i$i755) + ($911)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($922,$3);
      $923 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($910,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $924 = ($923|0)==($910|0);
      $$598 = $924 ? $0 : $923;
      $$14 = $$598;
      break L1;
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 115:  {
     $925 = ((($$0503)) + 1|0);
     $926 = HEAP8[$925>>0]|0;
     $927 = $926 << 24 >> 24;
     switch ($927|0) {
     case 99:  {
      $928 = (__ZN10__cxxabiv112_GLOBAL__N_122parse_static_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $928;
      break L1;
      break;
     }
     case 112:  {
      $929 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_pack_expansionINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $929;
      break L1;
      break;
     }
     case 114:  {
      $930 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $930;
      break L1;
      break;
     }
     case 116:  {
      $931 = (__ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_type_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $931;
      break L1;
      break;
     }
     case 122:  {
      $932 = (__ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_expr_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $932;
      break L1;
      break;
     }
     case 90:  {
      $933 = $$0503;
      $934 = (($16) - ($933))|0;
      $935 = ($934|0)>(2);
      if (!($935)) {
       $$14 = $0;
       break L1;
      }
      $936 = ((($$0503)) + 2|0);
      $937 = HEAP8[$936>>0]|0;
      $938 = $937 << 24 >> 24;
      switch ($938|0) {
      case 84:  {
       $939 = (__ZN10__cxxabiv112_GLOBAL__N_128parse_sizeof_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
       $$14 = $939;
       break L1;
       break;
      }
      case 102:  {
       $940 = (__ZN10__cxxabiv112_GLOBAL__N_137parse_sizeof_function_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
       $$14 = $940;
       break L1;
       break;
      }
      default: {
       $$14 = $0;
       break L1;
      }
      }
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 116:  {
     $941 = ((($$0503)) + 1|0);
     $942 = HEAP8[$941>>0]|0;
     $943 = $942 << 24 >> 24;
     switch ($943|0) {
     case 105: case 101:  {
      $944 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_typeid_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $944;
      break L1;
      break;
     }
     case 114:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($3,3788);
      $945 = ((($2)) + 4|0);
      $946 = HEAP32[$945>>2]|0;
      $947 = ((($2)) + 8|0);
      $948 = HEAP32[$947>>2]|0;
      $949 = ($946>>>0)<($948>>>0);
      if ($949) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($946,$3);
       $950 = HEAP32[$945>>2]|0;
       $951 = ((($950)) + 24|0);
       HEAP32[$945>>2] = $951;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $952 = ((($0)) + 2|0);
      $$14 = $952;
      break L1;
      break;
     }
     case 119:  {
      $953 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_throw_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $953;
      break L1;
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49:  {
     $954 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
     $$14 = $954;
     break L1;
     break;
    }
    default: {
     $$14 = $0;
     break L1;
    }
    }
   } while(0);
  } else {
   $$14 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$14|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($0) {
 $0 = $0|0;
 var $$017$off023 = 0, $$01919 = 0, $$020163235 = 0, $$02017 = 0, $$phitmp$i = 0, $$pre = 0, $$pre$phi38Z2D = 0, $$pre$phiZ2D = 0, $$pre37 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)<(0);
 if ($3) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 & 2147483647;
  $phitmp$i = (($6) + -1)|0;
  $7 = ((($0)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $10 = $8;$15 = $phitmp$i;
 } else {
  $9 = $2&255;
  $10 = $9;$15 = 10;
 }
 $11 = ($10>>>0)<(11);
 $12 = (($10) + 16)|0;
 $13 = $12 & -16;
 $phitmp$i2 = (($13) + -1)|0;
 $$phitmp$i = $11 ? 10 : $phitmp$i2;
 $14 = ($$phitmp$i|0)==($15|0);
 L5: do {
  if (!($14)) {
   do {
    if ($11) {
     $23 = HEAP32[$0>>2]|0;
     if ($3) {
      $$017$off023 = 0;$$01919 = $23;$$02017 = $0;
      label = 12;
     } else {
      $24 = $2&255;
      $25 = (($24) + 1)|0;
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($0,$23,$25)|0);
      __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj($23);
      label = 15;
     }
    } else {
     $16 = ($$phitmp$i>>>0)<=($15>>>0);
     $17 = (($$phitmp$i) + 1)|0;
     $18 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($17)|0);
     $19 = ($18|0)==(0|0);
     $or$cond = $16 & $19;
     if ($or$cond) {
      break L5;
     }
     $20 = HEAP8[$1>>0]|0;
     $21 = ($20<<24>>24)<(0);
     if ($21) {
      $22 = HEAP32[$0>>2]|0;
      $$017$off023 = 1;$$01919 = $22;$$02017 = $18;
      label = 12;
      break;
     } else {
      $26 = $20&255;
      $27 = (($26) + 1)|0;
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($18,$0,$27)|0);
      $$pre = ((($0)) + 4|0);
      $$020163235 = $18;$$pre$phi38Z2D = $17;$$pre$phiZ2D = $$pre;
      label = 14;
      break;
     }
    }
   } while(0);
   if ((label|0) == 12) {
    $28 = ((($0)) + 4|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (($29) + 1)|0;
    (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$02017,$$01919,$30)|0);
    __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj($$01919);
    if ($$017$off023) {
     $$pre37 = (($$phitmp$i) + 1)|0;
     $$020163235 = $$02017;$$pre$phi38Z2D = $$pre37;$$pre$phiZ2D = $28;
     label = 14;
    } else {
     label = 15;
    }
   }
   if ((label|0) == 14) {
    $31 = $$pre$phi38Z2D | -2147483648;
    $32 = ((($0)) + 8|0);
    HEAP32[$32>>2] = $31;
    HEAP32[$$pre$phiZ2D>>2] = $10;
    HEAP32[$0>>2] = $$020163235;
    break;
   }
   else if ((label|0) == 15) {
    $33 = $10&255;
    HEAP8[$1>>0] = $33;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$0$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $4 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$4>>2] = 0;
  $5 = (($$0$i$i) + 1)|0;
  $$0$i$i = $5;
 }
 $6 = (__ZNSt3__211char_traitsIcE6lengthEPKc($1)|0);
 $7 = ((($2)) + 11|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)<(0);
 $10 = ((($2)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $8&255;
 $13 = $9 ? $11 : $12;
 $14 = (($13) + ($6))|0;
 $15 = ($14>>>0)>(4294967279);
 if ($15) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $16 = ($14>>>0)<(11);
 if ($16) {
  $17 = $6&255;
  $18 = ((($0)) + 11|0);
  HEAP8[$18>>0] = $17;
  $$0$i = $0;
 } else {
  $19 = (($14) + 16)|0;
  $20 = $19 & -16;
  $21 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($20)|0);
  HEAP32[$0>>2] = $21;
  $22 = $20 | -2147483648;
  $23 = ((($0)) + 8|0);
  HEAP32[$23>>2] = $22;
  $24 = ((($0)) + 4|0);
  HEAP32[$24>>2] = $6;
  $$0$i = $21;
 }
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i,$1,$6)|0);
 $25 = (($$0$i) + ($6)|0);
 HEAP8[$3>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($25,$3);
 $26 = HEAP8[$7>>0]|0;
 $27 = ($26<<24>>24)<(0);
 $28 = HEAP32[$2>>2]|0;
 $29 = $27 ? $28 : $2;
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($0,$29,$13)|0);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i272 = 0, $$0$i$i$i277 = 0, $$0$i$i245 = 0, $$0$i$i247 = 0, $$0$i$i249 = 0, $$0$i$i251 = 0, $$0$i$i253 = 0, $$0$i$i255 = 0, $$0$i$i257 = 0, $$0$i$i259 = 0, $$0$i$i261 = 0, $$0$i$i263 = 0, $$0$i$i265 = 0, $$0$i$i267 = 0, $$0$i$i269 = 0, $$0$i$i275 = 0, $$0208 = 0;
 var $$021$i$i = 0, $$021$ph$i$i = 0, $$225 = 0, $$226 = 0, $$227 = 0, $$228 = 0, $$229 = 0, $$230 = 0, $$231 = 0, $$232 = 0, $$233 = 0, $$234 = 0, $$235 = 0, $$236 = 0, $$237 = 0, $$238 = 0, $$239 = 0, $$240 = 0, $$241 = 0, $$3 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i273 = 0, $exitcond$i$i$i278 = 0, $isdigit = 0, $isdigittmp = 0, $or$cond = 0, $or$cond242 = 0, $or$cond291 = 0, $scevgep23$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $3 = sp + 88|0;
 $4 = sp + 48|0;
 $5 = sp + 72|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 $10 = $1;
 $11 = $0;
 $12 = (($10) - ($11))|0;
 $13 = ($12|0)>(3);
 L1: do {
  if ($13) {
   $14 = HEAP8[$0>>0]|0;
   $15 = ($14<<24>>24)==(76);
   if ($15) {
    $16 = ((($0)) + 1|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = $17 << 24 >> 24;
    do {
     switch ($18|0) {
     case 84:  {
      $$3 = $0;
      break L1;
      break;
     }
     case 119:  {
      $19 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $20 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4790)|0);
      $21 = ($20>>>0)>(4294967279);
      if ($21) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $22 = ($20>>>0)<(11);
      if ($22) {
       $23 = $20&255;
       $24 = ((($4)) + 11|0);
       HEAP8[$24>>0] = $23;
       $$0$i$i = $4;
      } else {
       $25 = (($20) + 16)|0;
       $26 = $25 & -16;
       $27 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($26)|0);
       HEAP32[$4>>2] = $27;
       $28 = $26 | -2147483648;
       $29 = ((($4)) + 8|0);
       HEAP32[$29>>2] = $28;
       $30 = ((($4)) + 4|0);
       HEAP32[$30>>2] = $20;
       $$0$i$i = $27;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i,4790,$20)|0);
      $31 = (($$0$i$i) + ($20)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($31,$3);
      $32 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($19,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $33 = ($32|0)==($19|0);
      $$ = $33 ? $0 : $32;
      $$3 = $$;
      break L1;
      break;
     }
     case 98:  {
      $34 = ((($0)) + 3|0);
      $35 = HEAP8[$34>>0]|0;
      $36 = ($35<<24>>24)==(69);
      if (!($36)) {
       $$3 = $0;
       break L1;
      }
      $37 = ((($0)) + 2|0);
      $38 = HEAP8[$37>>0]|0;
      $39 = $38 << 24 >> 24;
      switch ($39|0) {
      case 48:  {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($3,4798);
       $40 = ((($2)) + 4|0);
       $41 = HEAP32[$40>>2]|0;
       $42 = ((($2)) + 8|0);
       $43 = HEAP32[$42>>2]|0;
       $44 = ($41>>>0)<($43>>>0);
       if ($44) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($41,$3);
        $45 = HEAP32[$40>>2]|0;
        $46 = ((($45)) + 24|0);
        HEAP32[$40>>2] = $46;
       } else {
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
       $47 = ((($0)) + 4|0);
       $$3 = $47;
       break L1;
       break;
      }
      case 49:  {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($3,4804);
       $48 = ((($2)) + 4|0);
       $49 = HEAP32[$48>>2]|0;
       $50 = ((($2)) + 8|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = ($49>>>0)<($51>>>0);
       if ($52) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($49,$3);
        $53 = HEAP32[$48>>2]|0;
        $54 = ((($53)) + 24|0);
        HEAP32[$48>>2] = $54;
       } else {
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
       $55 = ((($0)) + 4|0);
       $$3 = $55;
       break L1;
       break;
      }
      default: {
       $$3 = $0;
       break L1;
      }
      }
      break;
     }
     case 99:  {
      $56 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $57 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4809)|0);
      $58 = ($57>>>0)>(4294967279);
      if ($58) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $59 = ($57>>>0)<(11);
      if ($59) {
       $60 = $57&255;
       $61 = ((($4)) + 11|0);
       HEAP8[$61>>0] = $60;
       $$0$i$i245 = $4;
      } else {
       $62 = (($57) + 16)|0;
       $63 = $62 & -16;
       $64 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($63)|0);
       HEAP32[$4>>2] = $64;
       $65 = $63 | -2147483648;
       $66 = ((($4)) + 8|0);
       HEAP32[$66>>2] = $65;
       $67 = ((($4)) + 4|0);
       HEAP32[$67>>2] = $57;
       $$0$i$i245 = $64;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i245,4809,$57)|0);
      $68 = (($$0$i$i245) + ($57)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($68,$3);
      $69 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($56,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $70 = ($69|0)==($56|0);
      $$225 = $70 ? $0 : $69;
      $$3 = $$225;
      break L1;
      break;
     }
     case 97:  {
      $71 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $72 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4814)|0);
      $73 = ($72>>>0)>(4294967279);
      if ($73) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $74 = ($72>>>0)<(11);
      if ($74) {
       $75 = $72&255;
       $76 = ((($4)) + 11|0);
       HEAP8[$76>>0] = $75;
       $$0$i$i247 = $4;
      } else {
       $77 = (($72) + 16)|0;
       $78 = $77 & -16;
       $79 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($78)|0);
       HEAP32[$4>>2] = $79;
       $80 = $78 | -2147483648;
       $81 = ((($4)) + 8|0);
       HEAP32[$81>>2] = $80;
       $82 = ((($4)) + 4|0);
       HEAP32[$82>>2] = $72;
       $$0$i$i247 = $79;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i247,4814,$72)|0);
      $83 = (($$0$i$i247) + ($72)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($83,$3);
      $84 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($71,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $85 = ($84|0)==($71|0);
      $$226 = $85 ? $0 : $84;
      $$3 = $$226;
      break L1;
      break;
     }
     case 104:  {
      $86 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $87 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4826)|0);
      $88 = ($87>>>0)>(4294967279);
      if ($88) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $89 = ($87>>>0)<(11);
      if ($89) {
       $90 = $87&255;
       $91 = ((($4)) + 11|0);
       HEAP8[$91>>0] = $90;
       $$0$i$i249 = $4;
      } else {
       $92 = (($87) + 16)|0;
       $93 = $92 & -16;
       $94 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($93)|0);
       HEAP32[$4>>2] = $94;
       $95 = $93 | -2147483648;
       $96 = ((($4)) + 8|0);
       HEAP32[$96>>2] = $95;
       $97 = ((($4)) + 4|0);
       HEAP32[$97>>2] = $87;
       $$0$i$i249 = $94;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i249,4826,$87)|0);
      $98 = (($$0$i$i249) + ($87)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($98,$3);
      $99 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($86,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $100 = ($99|0)==($86|0);
      $$227 = $100 ? $0 : $99;
      $$3 = $$227;
      break L1;
      break;
     }
     case 115:  {
      $101 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $102 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4840)|0);
      $103 = ($102>>>0)>(4294967279);
      if ($103) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $104 = ($102>>>0)<(11);
      if ($104) {
       $105 = $102&255;
       $106 = ((($4)) + 11|0);
       HEAP8[$106>>0] = $105;
       $$0$i$i251 = $4;
      } else {
       $107 = (($102) + 16)|0;
       $108 = $107 & -16;
       $109 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($108)|0);
       HEAP32[$4>>2] = $109;
       $110 = $108 | -2147483648;
       $111 = ((($4)) + 8|0);
       HEAP32[$111>>2] = $110;
       $112 = ((($4)) + 4|0);
       HEAP32[$112>>2] = $102;
       $$0$i$i251 = $109;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i251,4840,$102)|0);
      $113 = (($$0$i$i251) + ($102)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($113,$3);
      $114 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($101,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $115 = ($114|0)==($101|0);
      $$228 = $115 ? $0 : $114;
      $$3 = $$228;
      break L1;
      break;
     }
     case 116:  {
      $116 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $117 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4846)|0);
      $118 = ($117>>>0)>(4294967279);
      if ($118) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $119 = ($117>>>0)<(11);
      if ($119) {
       $120 = $117&255;
       $121 = ((($4)) + 11|0);
       HEAP8[$121>>0] = $120;
       $$0$i$i253 = $4;
      } else {
       $122 = (($117) + 16)|0;
       $123 = $122 & -16;
       $124 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($123)|0);
       HEAP32[$4>>2] = $124;
       $125 = $123 | -2147483648;
       $126 = ((($4)) + 8|0);
       HEAP32[$126>>2] = $125;
       $127 = ((($4)) + 4|0);
       HEAP32[$127>>2] = $117;
       $$0$i$i253 = $124;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i253,4846,$117)|0);
      $128 = (($$0$i$i253) + ($117)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($128,$3);
      $129 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($116,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $130 = ($129|0)==($116|0);
      $$229 = $130 ? $0 : $129;
      $$3 = $$229;
      break L1;
      break;
     }
     case 105:  {
      $131 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $132 = (__ZNSt3__211char_traitsIcE6lengthEPKc(6060)|0);
      $133 = ($132>>>0)>(4294967279);
      if ($133) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $134 = ($132>>>0)<(11);
      if ($134) {
       $135 = $132&255;
       $136 = ((($4)) + 11|0);
       HEAP8[$136>>0] = $135;
       $$0$i$i255 = $4;
      } else {
       $137 = (($132) + 16)|0;
       $138 = $137 & -16;
       $139 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($138)|0);
       HEAP32[$4>>2] = $139;
       $140 = $138 | -2147483648;
       $141 = ((($4)) + 8|0);
       HEAP32[$141>>2] = $140;
       $142 = ((($4)) + 4|0);
       HEAP32[$142>>2] = $132;
       $$0$i$i255 = $139;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i255,6060,$132)|0);
      $143 = (($$0$i$i255) + ($132)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($143,$3);
      $144 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($131,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $145 = ($144|0)==($131|0);
      $$230 = $145 ? $0 : $144;
      $$3 = $$230;
      break L1;
      break;
     }
     case 106:  {
      $146 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $147 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4861)|0);
      $148 = ($147>>>0)>(4294967279);
      if ($148) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $149 = ($147>>>0)<(11);
      if ($149) {
       $150 = $147&255;
       $151 = ((($4)) + 11|0);
       HEAP8[$151>>0] = $150;
       $$0$i$i257 = $4;
      } else {
       $152 = (($147) + 16)|0;
       $153 = $152 & -16;
       $154 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($153)|0);
       HEAP32[$4>>2] = $154;
       $155 = $153 | -2147483648;
       $156 = ((($4)) + 8|0);
       HEAP32[$156>>2] = $155;
       $157 = ((($4)) + 4|0);
       HEAP32[$157>>2] = $147;
       $$0$i$i257 = $154;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i257,4861,$147)|0);
      $158 = (($$0$i$i257) + ($147)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($158,$3);
      $159 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($146,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $160 = ($159|0)==($146|0);
      $$231 = $160 ? $0 : $159;
      $$3 = $$231;
      break L1;
      break;
     }
     case 108:  {
      $161 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $162 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4863)|0);
      $163 = ($162>>>0)>(4294967279);
      if ($163) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $164 = ($162>>>0)<(11);
      if ($164) {
       $165 = $162&255;
       $166 = ((($4)) + 11|0);
       HEAP8[$166>>0] = $165;
       $$0$i$i259 = $4;
      } else {
       $167 = (($162) + 16)|0;
       $168 = $167 & -16;
       $169 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($168)|0);
       HEAP32[$4>>2] = $169;
       $170 = $168 | -2147483648;
       $171 = ((($4)) + 8|0);
       HEAP32[$171>>2] = $170;
       $172 = ((($4)) + 4|0);
       HEAP32[$172>>2] = $162;
       $$0$i$i259 = $169;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i259,4863,$162)|0);
      $173 = (($$0$i$i259) + ($162)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($173,$3);
      $174 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($161,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $175 = ($174|0)==($161|0);
      $$232 = $175 ? $0 : $174;
      $$3 = $$232;
      break L1;
      break;
     }
     case 109:  {
      $176 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $177 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4865)|0);
      $178 = ($177>>>0)>(4294967279);
      if ($178) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $179 = ($177>>>0)<(11);
      if ($179) {
       $180 = $177&255;
       $181 = ((($4)) + 11|0);
       HEAP8[$181>>0] = $180;
       $$0$i$i261 = $4;
      } else {
       $182 = (($177) + 16)|0;
       $183 = $182 & -16;
       $184 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($183)|0);
       HEAP32[$4>>2] = $184;
       $185 = $183 | -2147483648;
       $186 = ((($4)) + 8|0);
       HEAP32[$186>>2] = $185;
       $187 = ((($4)) + 4|0);
       HEAP32[$187>>2] = $177;
       $$0$i$i261 = $184;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i261,4865,$177)|0);
      $188 = (($$0$i$i261) + ($177)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($188,$3);
      $189 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($176,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $190 = ($189|0)==($176|0);
      $$233 = $190 ? $0 : $189;
      $$3 = $$233;
      break L1;
      break;
     }
     case 120:  {
      $191 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $192 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4868)|0);
      $193 = ($192>>>0)>(4294967279);
      if ($193) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $194 = ($192>>>0)<(11);
      if ($194) {
       $195 = $192&255;
       $196 = ((($4)) + 11|0);
       HEAP8[$196>>0] = $195;
       $$0$i$i263 = $4;
      } else {
       $197 = (($192) + 16)|0;
       $198 = $197 & -16;
       $199 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($198)|0);
       HEAP32[$4>>2] = $199;
       $200 = $198 | -2147483648;
       $201 = ((($4)) + 8|0);
       HEAP32[$201>>2] = $200;
       $202 = ((($4)) + 4|0);
       HEAP32[$202>>2] = $192;
       $$0$i$i263 = $199;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i263,4868,$192)|0);
      $203 = (($$0$i$i263) + ($192)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($203,$3);
      $204 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($191,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $205 = ($204|0)==($191|0);
      $$234 = $205 ? $0 : $204;
      $$3 = $$234;
      break L1;
      break;
     }
     case 121:  {
      $206 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $207 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4871)|0);
      $208 = ($207>>>0)>(4294967279);
      if ($208) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $209 = ($207>>>0)<(11);
      if ($209) {
       $210 = $207&255;
       $211 = ((($4)) + 11|0);
       HEAP8[$211>>0] = $210;
       $$0$i$i265 = $4;
      } else {
       $212 = (($207) + 16)|0;
       $213 = $212 & -16;
       $214 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($213)|0);
       HEAP32[$4>>2] = $214;
       $215 = $213 | -2147483648;
       $216 = ((($4)) + 8|0);
       HEAP32[$216>>2] = $215;
       $217 = ((($4)) + 4|0);
       HEAP32[$217>>2] = $207;
       $$0$i$i265 = $214;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i265,4871,$207)|0);
      $218 = (($$0$i$i265) + ($207)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($218,$3);
      $219 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($206,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $220 = ($219|0)==($206|0);
      $$235 = $220 ? $0 : $219;
      $$3 = $$235;
      break L1;
      break;
     }
     case 110:  {
      $221 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $222 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4875)|0);
      $223 = ($222>>>0)>(4294967279);
      if ($223) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $224 = ($222>>>0)<(11);
      if ($224) {
       $225 = $222&255;
       $226 = ((($4)) + 11|0);
       HEAP8[$226>>0] = $225;
       $$0$i$i267 = $4;
      } else {
       $227 = (($222) + 16)|0;
       $228 = $227 & -16;
       $229 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($228)|0);
       HEAP32[$4>>2] = $229;
       $230 = $228 | -2147483648;
       $231 = ((($4)) + 8|0);
       HEAP32[$231>>2] = $230;
       $232 = ((($4)) + 4|0);
       HEAP32[$232>>2] = $222;
       $$0$i$i267 = $229;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i267,4875,$222)|0);
      $233 = (($$0$i$i267) + ($222)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($233,$3);
      $234 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($221,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $235 = ($234|0)==($221|0);
      $$236 = $235 ? $0 : $234;
      $$3 = $$236;
      break L1;
      break;
     }
     case 111:  {
      $236 = ((($0)) + 2|0);
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $237 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4884)|0);
      $238 = ($237>>>0)>(4294967279);
      if ($238) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $239 = ($237>>>0)<(11);
      if ($239) {
       $240 = $237&255;
       $241 = ((($4)) + 11|0);
       HEAP8[$241>>0] = $240;
       $$0$i$i269 = $4;
      } else {
       $242 = (($237) + 16)|0;
       $243 = $242 & -16;
       $244 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($243)|0);
       HEAP32[$4>>2] = $244;
       $245 = $243 | -2147483648;
       $246 = ((($4)) + 8|0);
       HEAP32[$246>>2] = $245;
       $247 = ((($4)) + 4|0);
       HEAP32[$247>>2] = $237;
       $$0$i$i269 = $244;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i269,4884,$237)|0);
      $248 = (($$0$i$i269) + ($237)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($248,$3);
      $249 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($236,$1,$4,$2)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $250 = ($249|0)==($236|0);
      $$237 = $250 ? $0 : $249;
      $$3 = $$237;
      break L1;
      break;
     }
     case 102:  {
      $251 = ((($0)) + 2|0);
      $252 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIfNS0_2DbEEEPKcS4_S4_RT0_($251,$1,$2)|0);
      $253 = ($252|0)==($251|0);
      $$238 = $253 ? $0 : $252;
      $$3 = $$238;
      break L1;
      break;
     }
     case 100:  {
      $254 = ((($0)) + 2|0);
      $255 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIdNS0_2DbEEEPKcS4_S4_RT0_($254,$1,$2)|0);
      $256 = ($255|0)==($254|0);
      $$239 = $256 ? $0 : $255;
      $$3 = $$239;
      break L1;
      break;
     }
     case 101:  {
      $257 = ((($0)) + 2|0);
      $258 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIeNS0_2DbEEEPKcS4_S4_RT0_($257,$1,$2)|0);
      $259 = ($258|0)==($257|0);
      $$240 = $259 ? $0 : $258;
      $$3 = $$240;
      break L1;
      break;
     }
     case 95:  {
      $260 = ((($0)) + 2|0);
      $261 = HEAP8[$260>>0]|0;
      $262 = ($261<<24>>24)==(90);
      if (!($262)) {
       $$3 = $0;
       break L1;
      }
      $263 = ((($0)) + 3|0);
      $264 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($263,$1,$2)|0);
      $265 = ($264|0)==($263|0);
      $266 = ($264|0)==($1|0);
      $or$cond = $265 | $266;
      if ($or$cond) {
       $$3 = $0;
       break L1;
      }
      $267 = HEAP8[$264>>0]|0;
      $268 = ($267<<24>>24)==(69);
      $269 = ((($264)) + 1|0);
      $$241 = $268 ? $269 : $0;
      $$3 = $$241;
      break L1;
      break;
     }
     default: {
      $270 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($16,$1,$2)|0);
      $271 = ($270|0)==($16|0);
      $272 = ($270|0)==($1|0);
      $or$cond242 = $271 | $272;
      if ($or$cond242) {
       $$3 = $0;
       break L1;
      }
      $273 = HEAP8[$270>>0]|0;
      $274 = ($273<<24>>24)==(69);
      if ($274) {
       $323 = ((($270)) + 1|0);
       $$3 = $323;
       break L1;
      } else {
       $$0208 = $270;
      }
      while(1) {
       $275 = ($$0208|0)==($1|0);
       if ($275) {
        $$3 = $0;
        break L1;
       }
       $276 = HEAP8[$$0208>>0]|0;
       $277 = $276 << 24 >> 24;
       $isdigittmp = (($277) + -48)|0;
       $isdigit = ($isdigittmp>>>0)<(10);
       if (!($isdigit)) {
        break;
       }
       $278 = ((($$0208)) + 1|0);
       $$0208 = $278;
      }
      $279 = ($$0208|0)!=($270|0);
      $280 = ($276<<24>>24)==(69);
      $or$cond291 = $279 & $280;
      if (!($or$cond291)) {
       $$3 = $0;
       break L1;
      }
      $281 = HEAP32[$2>>2]|0;
      $282 = ((($2)) + 4|0);
      $283 = HEAP32[$282>>2]|0;
      $284 = ($281|0)==($283|0);
      if ($284) {
       $$3 = $0;
       break L1;
      }
      $285 = ((($283)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($8,$285);
      $286 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($8,0,3598)|0);
      ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;
      $$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $287 = (($8) + ($$0$i$i$i<<2)|0);
       HEAP32[$287>>2] = 0;
       $288 = (($$0$i$i$i) + 1)|0;
       $$0$i$i$i = $288;
      }
      $289 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($7,3596)|0);
      ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
      $$0$i$i$i272 = 0;
      while(1) {
       $exitcond$i$i$i273 = ($$0$i$i$i272|0)==(3);
       if ($exitcond$i$i$i273) {
        break;
       }
       $290 = (($7) + ($$0$i$i$i272<<2)|0);
       HEAP32[$290>>2] = 0;
       $291 = (($$0$i$i$i272) + 1)|0;
       $$0$i$i$i272 = $291;
      }
      ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
      $292 = $270;
      $293 = $$0208;
      $294 = (($293) - ($292))|0;
      $295 = ($294>>>0)>(4294967279);
      if ($295) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($9);
       // unreachable;
      }
      $296 = ($294>>>0)<(11);
      if ($296) {
       $297 = $294&255;
       $298 = ((($9)) + 11|0);
       HEAP8[$298>>0] = $297;
       $$021$ph$i$i = $9;
      } else {
       $299 = (($294) + 16)|0;
       $300 = $299 & -16;
       $301 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($300)|0);
       HEAP32[$9>>2] = $301;
       $302 = $300 | -2147483648;
       $303 = ((($9)) + 8|0);
       HEAP32[$303>>2] = $302;
       $304 = ((($9)) + 4|0);
       HEAP32[$304>>2] = $294;
       $$021$ph$i$i = $301;
      }
      $$0$i$i275 = $270;$$021$i$i = $$021$ph$i$i;
      while(1) {
       $305 = ($$0$i$i275|0)==($$0208|0);
       if ($305) {
        break;
       }
       __ZNSt3__211char_traitsIcE6assignERcRKc($$021$i$i,$$0$i$i275);
       $306 = ((($$0$i$i275)) + 1|0);
       $307 = ((($$021$i$i)) + 1|0);
       $$0$i$i275 = $306;$$021$i$i = $307;
      }
      $scevgep23$i$i = (($$021$ph$i$i) + ($294)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($scevgep23$i$i,$3);
      $308 = ((($9)) + 11|0);
      $309 = HEAP8[$308>>0]|0;
      $310 = ($309<<24>>24)<(0);
      $311 = HEAP32[$9>>2]|0;
      $312 = ((($9)) + 4|0);
      $313 = HEAP32[$312>>2]|0;
      $314 = $309&255;
      $315 = $310 ? $311 : $9;
      $316 = $310 ? $313 : $314;
      $317 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($6,$315,$316)|0);
      ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
      $$0$i$i$i277 = 0;
      while(1) {
       $exitcond$i$i$i278 = ($$0$i$i$i277|0)==(3);
       if ($exitcond$i$i$i278) {
        break;
       }
       $318 = (($6) + ($$0$i$i$i277<<2)|0);
       HEAP32[$318>>2] = 0;
       $319 = (($$0$i$i$i277) + 1)|0;
       $$0$i$i$i277 = $319;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4,$5);
      $320 = HEAP32[$282>>2]|0;
      $321 = ((($320)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($321,$4);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
      $322 = ((($$0208)) + 1|0);
      $$3 = $322;
      break L1;
     }
     }
    } while(0);
   } else {
    $$3 = $0;
   }
  } else {
   $$3 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i63 = 0, $$0$i$i59 = 0, $$021$i$i = 0, $$021$i$i58 = 0, $$021$ph$i$i = 0, $$021$ph$i$i56 = 0, $$2 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i64 = 0, $scevgep23$i$i = 0, $scevgep23$i$i61 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $3 = sp + 64|0;
 $4 = sp + 60|0;
 $5 = sp + 24|0;
 $6 = sp + 48|0;
 $7 = sp + 12|0;
 $8 = sp;
 $9 = $1;
 $10 = $0;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)>(2);
 L1: do {
  if ($12) {
   $13 = HEAP8[$0>>0]|0;
   $14 = ($13<<24>>24)==(102);
   if ($14) {
    $15 = ((($0)) + 1|0);
    $16 = HEAP8[$15>>0]|0;
    switch ($16<<24>>24) {
    case 112:  {
     $17 = ((($0)) + 2|0);
     $18 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($17,$1,$4)|0);
     $19 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($18,$1)|0);
     $20 = ($19|0)==($1|0);
     if ($20) {
      $$0 = $0;
     } else {
      $21 = HEAP8[$19>>0]|0;
      $22 = ($21<<24>>24)==(95);
      if ($22) {
       ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
       $23 = $18;
       $24 = $19;
       $25 = (($24) - ($23))|0;
       $26 = ($25>>>0)>(4294967279);
       if ($26) {
        __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($7);
        // unreachable;
       }
       $27 = ($25>>>0)<(11);
       if ($27) {
        $28 = $25&255;
        $29 = ((($7)) + 11|0);
        HEAP8[$29>>0] = $28;
        $$021$ph$i$i = $7;
       } else {
        $30 = (($25) + 16)|0;
        $31 = $30 & -16;
        $32 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($31)|0);
        HEAP32[$7>>2] = $32;
        $33 = $31 | -2147483648;
        $34 = ((($7)) + 8|0);
        HEAP32[$34>>2] = $33;
        $35 = ((($7)) + 4|0);
        HEAP32[$35>>2] = $25;
        $$021$ph$i$i = $32;
       }
       $$0$i$i = $18;$$021$i$i = $$021$ph$i$i;
       while(1) {
        $36 = ($$0$i$i|0)==($19|0);
        if ($36) {
         break;
        }
        __ZNSt3__211char_traitsIcE6assignERcRKc($$021$i$i,$$0$i$i);
        $37 = ((($$0$i$i)) + 1|0);
        $38 = ((($$021$i$i)) + 1|0);
        $$0$i$i = $37;$$021$i$i = $38;
       }
       $scevgep23$i$i = (($$021$ph$i$i) + ($25)|0);
       HEAP8[$3>>0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($scevgep23$i$i,$3);
       $39 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($7,0,4787)|0);
       ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
       $$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $40 = (($7) + ($$0$i$i$i<<2)|0);
        HEAP32[$40>>2] = 0;
        $41 = (($$0$i$i$i) + 1)|0;
        $$0$i$i$i = $41;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($5,$6);
       $42 = ((($2)) + 4|0);
       $43 = HEAP32[$42>>2]|0;
       $44 = ((($2)) + 8|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = ($43>>>0)<($45>>>0);
       if ($46) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($43,$5);
        $47 = HEAP32[$42>>2]|0;
        $48 = ((($47)) + 24|0);
        HEAP32[$42>>2] = $48;
       } else {
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$5);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
       $49 = ((($19)) + 1|0);
       $$0 = $49;
      } else {
       $$0 = $0;
      }
     }
     $$3 = $$0;
     break L1;
     break;
    }
    case 76:  {
     break;
    }
    default: {
     $$3 = $0;
     break L1;
    }
    }
    $50 = ((($0)) + 2|0);
    $51 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($50,$1)|0);
    $52 = ($51|0)==($1|0);
    if ($52) {
     $$2 = $0;
    } else {
     $53 = HEAP8[$51>>0]|0;
     $54 = ($53<<24>>24)==(112);
     if ($54) {
      $55 = ((($51)) + 1|0);
      $56 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($55,$1,$4)|0);
      $57 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($56,$1)|0);
      $58 = ($57|0)==($1|0);
      if ($58) {
       $$2 = $0;
      } else {
       $59 = HEAP8[$57>>0]|0;
       $60 = ($59<<24>>24)==(95);
       if ($60) {
        ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
        $61 = $56;
        $62 = $57;
        $63 = (($62) - ($61))|0;
        $64 = ($63>>>0)>(4294967279);
        if ($64) {
         __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($7);
         // unreachable;
        }
        $65 = ($63>>>0)<(11);
        if ($65) {
         $66 = $63&255;
         $67 = ((($7)) + 11|0);
         HEAP8[$67>>0] = $66;
         $$021$ph$i$i56 = $7;
        } else {
         $68 = (($63) + 16)|0;
         $69 = $68 & -16;
         $70 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($69)|0);
         HEAP32[$7>>2] = $70;
         $71 = $69 | -2147483648;
         $72 = ((($7)) + 8|0);
         HEAP32[$72>>2] = $71;
         $73 = ((($7)) + 4|0);
         HEAP32[$73>>2] = $63;
         $$021$ph$i$i56 = $70;
        }
        $$0$i$i59 = $56;$$021$i$i58 = $$021$ph$i$i56;
        while(1) {
         $74 = ($$0$i$i59|0)==($57|0);
         if ($74) {
          break;
         }
         __ZNSt3__211char_traitsIcE6assignERcRKc($$021$i$i58,$$0$i$i59);
         $75 = ((($$0$i$i59)) + 1|0);
         $76 = ((($$021$i$i58)) + 1|0);
         $$0$i$i59 = $75;$$021$i$i58 = $76;
        }
        $scevgep23$i$i61 = (($$021$ph$i$i56) + ($63)|0);
        HEAP8[$3>>0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($scevgep23$i$i61,$3);
        $77 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($7,0,4787)|0);
        ;HEAP32[$8>>2]=HEAP32[$7>>2]|0;HEAP32[$8+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$7+8>>2]|0;
        $$0$i$i$i63 = 0;
        while(1) {
         $exitcond$i$i$i64 = ($$0$i$i$i63|0)==(3);
         if ($exitcond$i$i$i64) {
          break;
         }
         $78 = (($7) + ($$0$i$i$i63<<2)|0);
         HEAP32[$78>>2] = 0;
         $79 = (($$0$i$i$i63) + 1)|0;
         $$0$i$i$i63 = $79;
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($5,$8);
        $80 = ((($2)) + 4|0);
        $81 = HEAP32[$80>>2]|0;
        $82 = ((($2)) + 8|0);
        $83 = HEAP32[$82>>2]|0;
        $84 = ($81>>>0)<($83>>>0);
        if ($84) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($81,$5);
         $85 = HEAP32[$80>>2]|0;
         $86 = ((($85)) + 24|0);
         HEAP32[$80>>2] = $86;
        } else {
         __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$5);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
        $87 = ((($57)) + 1|0);
        $$2 = $87;
       } else {
        $$2 = $0;
       }
      }
     } else {
      $$2 = $0;
     }
    }
    $$3 = $$2;
   } else {
    $$3 = $0;
   }
  } else {
   $$3 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$i$i$i = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$0$i$i$i57 = 0, $$0$i$i$i61 = 0, $$1 = 0, $$pre$i = 0, $$pre$i70 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i51 = 0, $exitcond$i$i$i54 = 0, $exitcond$i$i$i58 = 0, $exitcond$i$i$i62 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $4 = sp + 84|0;
 $5 = sp + 72|0;
 $6 = sp + 60|0;
 $7 = sp + 48|0;
 $8 = sp + 36|0;
 $9 = sp + 24|0;
 $10 = sp + 12|0;
 $11 = sp;
 $12 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($0,$1,$3)|0);
 $13 = ($12|0)==($0|0);
 L1: do {
  if ($13) {
   $$1 = $0;
  } else {
   $14 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($12,$1,$3)|0);
   $15 = ($14|0)==($12|0);
   $16 = ((($3)) + 4|0);
   if ($15) {
    $97 = HEAP32[$16>>2]|0;
    $98 = ((($97)) + -24|0);
    $99 = $97;
    while(1) {
     $100 = ($99|0)==($98|0);
     if ($100) {
      $$1 = $0;
      break L1;
     }
     $101 = ((($99)) + -24|0);
     HEAP32[$16>>2] = $101;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($101);
     $$pre$i70 = HEAP32[$16>>2]|0;
     $99 = $$pre$i70;
    }
   }
   $17 = HEAP32[$16>>2]|0;
   $18 = HEAP32[$3>>2]|0;
   $19 = (($17) - ($18))|0;
   $20 = (($19|0) / 24)&-1;
   $21 = ($20>>>0)<(2);
   if ($21) {
    $$1 = $0;
   } else {
    $22 = $17;
    $23 = ((($22)) + -24|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5,$23);
    $24 = HEAP32[$16>>2]|0;
    $25 = ((($24)) + -24|0);
    $26 = $24;
    while(1) {
     $27 = ($26|0)==($25|0);
     if ($27) {
      break;
     }
     $28 = ((($26)) + -24|0);
     HEAP32[$16>>2] = $28;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($28);
     $$pre$i = HEAP32[$16>>2]|0;
     $26 = $$pre$i;
    }
    $29 = ((($24)) + -48|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$29);
    $30 = HEAP32[$16>>2]|0;
    $31 = ((($30)) + -24|0);
    $32 = ((($31)) + 11|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = ($33<<24>>24)<(0);
    if ($34) {
     $35 = HEAP32[$31>>2]|0;
     HEAP8[$4>>0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($35,$4);
     $36 = ((($30)) + -20|0);
     HEAP32[$36>>2] = 0;
    } else {
     HEAP8[$4>>0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($31,$4);
     HEAP8[$32>>0] = 0;
    }
    $37 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3634)|0);
    $38 = ((($2)) + 11|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = ($39<<24>>24)<(0);
    $41 = ((($2)) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = $39&255;
    $44 = $40 ? $42 : $43;
    $45 = ($37|0)==($44|0);
    if ($45) {
     $46 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($2,3634,$37)|0);
     $47 = ($46|0)==(0);
     if ($47) {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($31,40);
     }
    }
    __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($11,3598,$6);
    $48 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($11,3884)|0);
    ;HEAP32[$10>>2]=HEAP32[$11>>2]|0;HEAP32[$10+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$11+8>>2]|0;
    $$0$i$i$i = 0;
    while(1) {
     $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
     if ($exitcond$i$i$i) {
      break;
     }
     $49 = (($11) + ($$0$i$i$i<<2)|0);
     HEAP32[$49>>2] = 0;
     $50 = (($$0$i$i$i) + 1)|0;
     $$0$i$i$i = $50;
    }
    $51 = HEAP8[$38>>0]|0;
    $52 = ($51<<24>>24)<(0);
    $53 = HEAP32[$2>>2]|0;
    $54 = HEAP32[$41>>2]|0;
    $55 = $51&255;
    $56 = $52 ? $53 : $2;
    $57 = $52 ? $54 : $55;
    $58 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($10,$56,$57)|0);
    ;HEAP32[$9>>2]=HEAP32[$10>>2]|0;HEAP32[$9+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$10+8>>2]|0;
    $$0$i$i$i50 = 0;
    while(1) {
     $exitcond$i$i$i51 = ($$0$i$i$i50|0)==(3);
     if ($exitcond$i$i$i51) {
      break;
     }
     $59 = (($10) + ($$0$i$i$i50<<2)|0);
     HEAP32[$59>>2] = 0;
     $60 = (($$0$i$i$i50) + 1)|0;
     $$0$i$i$i50 = $60;
    }
    $61 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($9,3593)|0);
    ;HEAP32[$8>>2]=HEAP32[$9>>2]|0;HEAP32[$8+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$9+8>>2]|0;
    $$0$i$i$i53 = 0;
    while(1) {
     $exitcond$i$i$i54 = ($$0$i$i$i53|0)==(3);
     if ($exitcond$i$i$i54) {
      break;
     }
     $62 = (($9) + ($$0$i$i$i53<<2)|0);
     HEAP32[$62>>2] = 0;
     $63 = (($$0$i$i$i53) + 1)|0;
     $$0$i$i$i53 = $63;
    }
    $64 = ((($5)) + 11|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = ($65<<24>>24)<(0);
    $67 = HEAP32[$5>>2]|0;
    $68 = ((($5)) + 4|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $65&255;
    $71 = $66 ? $67 : $5;
    $72 = $66 ? $69 : $70;
    $73 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($8,$71,$72)|0);
    ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;
    $$0$i$i$i57 = 0;
    while(1) {
     $exitcond$i$i$i58 = ($$0$i$i$i57|0)==(3);
     if ($exitcond$i$i$i58) {
      break;
     }
     $74 = (($8) + ($$0$i$i$i57<<2)|0);
     HEAP32[$74>>2] = 0;
     $75 = (($$0$i$i$i57) + 1)|0;
     $$0$i$i$i57 = $75;
    }
    $76 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($7,3596)|0);
    ;HEAP32[$4>>2]=HEAP32[$7>>2]|0;HEAP32[$4+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$7+8>>2]|0;
    $$0$i$i$i61 = 0;
    while(1) {
     $exitcond$i$i$i62 = ($$0$i$i$i61|0)==(3);
     if ($exitcond$i$i$i62) {
      break;
     }
     $77 = (($7) + ($$0$i$i$i61<<2)|0);
     HEAP32[$77>>2] = 0;
     $78 = (($$0$i$i$i61) + 1)|0;
     $$0$i$i$i61 = $78;
    }
    $79 = ((($4)) + 11|0);
    $80 = HEAP8[$79>>0]|0;
    $81 = ($80<<24>>24)<(0);
    $82 = HEAP32[$4>>2]|0;
    $83 = ((($4)) + 4|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = $80&255;
    $86 = $81 ? $82 : $4;
    $87 = $81 ? $84 : $85;
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($31,$86,$87)|0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
    $88 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3634)|0);
    $89 = HEAP8[$38>>0]|0;
    $90 = ($89<<24>>24)<(0);
    $91 = HEAP32[$41>>2]|0;
    $92 = $89&255;
    $93 = $90 ? $91 : $92;
    $94 = ($88|0)==($93|0);
    if ($94) {
     $95 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($2,3634,$88)|0);
     $96 = ($95|0)==(0);
     if ($96) {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($31,41);
     }
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $$1 = $14;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i20 = 0, $$018 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $4 = sp + 48|0;
 $5 = sp + 36|0;
 $6 = sp + 24|0;
 $7 = sp + 12|0;
 $8 = sp;
 $9 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($0,$1,$3)|0);
 $10 = ($9|0)==($0|0);
 if ($10) {
  $$018 = $0;
 } else {
  $11 = HEAP32[$3>>2]|0;
  $12 = ((($3)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11|0)==($13|0);
  if ($14) {
   $$018 = $0;
  } else {
   __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($7,$2,3598);
   $15 = HEAP32[$12>>2]|0;
   $16 = ((($15)) + -24|0);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($8,$16);
   $17 = ((($8)) + 11|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = ($18<<24>>24)<(0);
   $20 = HEAP32[$8>>2]|0;
   $21 = ((($8)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $18&255;
   $24 = $19 ? $20 : $8;
   $25 = $19 ? $22 : $23;
   $26 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($7,$24,$25)|0);
   ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
   $$0$i$i$i = 0;
   while(1) {
    $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
    if ($exitcond$i$i$i) {
     break;
    }
    $27 = (($7) + ($$0$i$i$i<<2)|0);
    HEAP32[$27>>2] = 0;
    $28 = (($$0$i$i$i) + 1)|0;
    $$0$i$i$i = $28;
   }
   $29 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6,3596)|0);
   ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
   $$0$i$i$i20 = 0;
   while(1) {
    $exitcond$i$i$i21 = ($$0$i$i$i20|0)==(3);
    if ($exitcond$i$i$i21) {
     break;
    }
    $30 = (($6) + ($$0$i$i$i20<<2)|0);
    HEAP32[$30>>2] = 0;
    $31 = (($$0$i$i$i20) + 1)|0;
    $$0$i$i$i20 = $31;
   }
   $32 = HEAP32[$12>>2]|0;
   $33 = ((($32)) + -24|0);
   $34 = ((($33)) + 11|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = ($35<<24>>24)<(0);
   if ($36) {
    $37 = HEAP32[$33>>2]|0;
    HEAP8[$4>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($37,$4);
    $38 = ((($32)) + -20|0);
    HEAP32[$38>>2] = 0;
   } else {
    HEAP8[$4>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($33,$4);
    HEAP8[$34>>0] = 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($33);
   ;HEAP32[$33>>2]=HEAP32[$5>>2]|0;HEAP32[$33+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$33+8>>2]=HEAP32[$5+8>>2]|0;
   $$0$i$i$i$i = 0;
   while(1) {
    $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
    if ($exitcond$i$i$i$i) {
     break;
    }
    $39 = (($5) + ($$0$i$i$i$i<<2)|0);
    HEAP32[$39>>2] = 0;
    $40 = (($$0$i$i$i$i) + 1)|0;
    $$0$i$i$i$i = $40;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
   $$018 = $9;
  }
 }
 STACKTOP = sp;return ($$018|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i25 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond$i$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i26 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $3 = sp + 36|0;
 $4 = sp + 24|0;
 $5 = sp + 12|0;
 $6 = sp;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)>(2);
 if ($10) {
  $11 = HEAP8[$0>>0]|0;
  $12 = ($11<<24>>24)==(97);
  if ($12) {
   $13 = ((($0)) + 1|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = ($14<<24>>24)==(116);
   if ($15) {
    $16 = ((($0)) + 2|0);
    $17 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($16,$1,$2)|0);
    $18 = ($17|0)==($16|0);
    if ($18) {
     $$1 = $0;
    } else {
     $19 = HEAP32[$2>>2]|0;
     $20 = ((($2)) + 4|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19|0)==($21|0);
     if ($22) {
      $$1 = $0;
     } else {
      $23 = ((($21)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$23);
      $24 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6,0,4777)|0);
      ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
      $$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $25 = (($6) + ($$0$i$i$i<<2)|0);
       HEAP32[$25>>2] = 0;
       $26 = (($$0$i$i$i) + 1)|0;
       $$0$i$i$i = $26;
      }
      $27 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5,3596)|0);
      ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
      $$0$i$i$i25 = 0;
      while(1) {
       $exitcond$i$i$i26 = ($$0$i$i$i25|0)==(3);
       if ($exitcond$i$i$i26) {
        break;
       }
       $28 = (($5) + ($$0$i$i$i25<<2)|0);
       HEAP32[$28>>2] = 0;
       $29 = (($$0$i$i$i25) + 1)|0;
       $$0$i$i$i25 = $29;
      }
      $30 = HEAP32[$20>>2]|0;
      $31 = ((($30)) + -24|0);
      $32 = ((($31)) + 11|0);
      $33 = HEAP8[$32>>0]|0;
      $34 = ($33<<24>>24)<(0);
      if ($34) {
       $35 = HEAP32[$31>>2]|0;
       HEAP8[$3>>0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($35,$3);
       $36 = ((($30)) + -20|0);
       HEAP32[$36>>2] = 0;
      } else {
       HEAP8[$3>>0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($31,$3);
       HEAP8[$32>>0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($31);
      ;HEAP32[$31>>2]=HEAP32[$4>>2]|0;HEAP32[$31+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$31+8>>2]=HEAP32[$4+8>>2]|0;
      $$0$i$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
       if ($exitcond$i$i$i$i) {
        break;
       }
       $37 = (($4) + ($$0$i$i$i$i<<2)|0);
       HEAP32[$37>>2] = 0;
       $38 = (($$0$i$i$i$i) + 1)|0;
       $$0$i$i$i$i = $38;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      $$1 = $17;
     }
    }
   } else {
    $$1 = $0;
   }
  } else {
   $$1 = $0;
  }
 } else {
  $$1 = $0;
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i25 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond$i$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i26 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $3 = sp + 36|0;
 $4 = sp + 24|0;
 $5 = sp + 12|0;
 $6 = sp;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)>(2);
 if ($10) {
  $11 = HEAP8[$0>>0]|0;
  $12 = ($11<<24>>24)==(97);
  if ($12) {
   $13 = ((($0)) + 1|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = ($14<<24>>24)==(122);
   if ($15) {
    $16 = ((($0)) + 2|0);
    $17 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($16,$1,$2)|0);
    $18 = ($17|0)==($16|0);
    if ($18) {
     $$1 = $0;
    } else {
     $19 = HEAP32[$2>>2]|0;
     $20 = ((($2)) + 4|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19|0)==($21|0);
     if ($22) {
      $$1 = $0;
     } else {
      $23 = ((($21)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$23);
      $24 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6,0,4777)|0);
      ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
      $$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $25 = (($6) + ($$0$i$i$i<<2)|0);
       HEAP32[$25>>2] = 0;
       $26 = (($$0$i$i$i) + 1)|0;
       $$0$i$i$i = $26;
      }
      $27 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5,3596)|0);
      ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
      $$0$i$i$i25 = 0;
      while(1) {
       $exitcond$i$i$i26 = ($$0$i$i$i25|0)==(3);
       if ($exitcond$i$i$i26) {
        break;
       }
       $28 = (($5) + ($$0$i$i$i25<<2)|0);
       HEAP32[$28>>2] = 0;
       $29 = (($$0$i$i$i25) + 1)|0;
       $$0$i$i$i25 = $29;
      }
      $30 = HEAP32[$20>>2]|0;
      $31 = ((($30)) + -24|0);
      $32 = ((($31)) + 11|0);
      $33 = HEAP8[$32>>0]|0;
      $34 = ($33<<24>>24)<(0);
      if ($34) {
       $35 = HEAP32[$31>>2]|0;
       HEAP8[$3>>0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($35,$3);
       $36 = ((($30)) + -20|0);
       HEAP32[$36>>2] = 0;
      } else {
       HEAP8[$3>>0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($31,$3);
       HEAP8[$32>>0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($31);
      ;HEAP32[$31>>2]=HEAP32[$4>>2]|0;HEAP32[$31+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$31+8>>2]=HEAP32[$4+8>>2]|0;
      $$0$i$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
       if ($exitcond$i$i$i$i) {
        break;
       }
       $37 = (($4) + ($$0$i$i$i$i<<2)|0);
       HEAP32[$37>>2] = 0;
       $38 = (($$0$i$i$i$i) + 1)|0;
       $$0$i$i$i$i = $38;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      $$1 = $17;
     }
    }
   } else {
    $$1 = $0;
   }
  } else {
   $$1 = $0;
  }
 } else {
  $$1 = $0;
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_const_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i47 = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$341 = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i48 = 0, $exitcond$i$i$i51 = 0, $exitcond$i$i$i54 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $3 = sp + 88|0;
 $4 = sp + 64|0;
 $5 = sp + 36|0;
 $6 = sp + 48|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 $10 = $1;
 $11 = $0;
 $12 = (($10) - ($11))|0;
 $13 = ($12|0)>(2);
 if ($13) {
  $14 = HEAP8[$0>>0]|0;
  $15 = ($14<<24>>24)==(99);
  if ($15) {
   $16 = ((($0)) + 1|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = ($17<<24>>24)==(99);
   if ($18) {
    $19 = ((($0)) + 2|0);
    $20 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($19,$1,$2)|0);
    $21 = ($20|0)==($19|0);
    if ($21) {
     $$341 = $0;
    } else {
     $22 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($20,$1,$2)|0);
     $23 = ($22|0)==($20|0);
     if ($23) {
      $$341 = $0;
     } else {
      $24 = ((($2)) + 4|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = HEAP32[$2>>2]|0;
      $27 = (($25) - ($26))|0;
      $28 = (($27|0) / 24)&-1;
      $29 = ($28>>>0)<(2);
      if ($29) {
       $$341 = $0;
      } else {
       $30 = $25;
       $31 = ((($30)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$31);
       $32 = HEAP32[$24>>2]|0;
       $33 = ((($32)) + -24|0);
       $34 = $32;
       while(1) {
        $35 = ($34|0)==($33|0);
        if ($35) {
         break;
        }
        $36 = ((($34)) + -24|0);
        HEAP32[$24>>2] = $36;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($36);
        $$pre$i = HEAP32[$24>>2]|0;
        $34 = $$pre$i;
       }
       $37 = ((($32)) + -48|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9,$37);
       $38 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($9,0,4765)|0);
       ;HEAP32[$8>>2]=HEAP32[$9>>2]|0;HEAP32[$8+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$9+8>>2]|0;
       $$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $39 = (($9) + ($$0$i$i$i<<2)|0);
        HEAP32[$39>>2] = 0;
        $40 = (($$0$i$i$i) + 1)|0;
        $$0$i$i$i = $40;
       }
       $41 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8,3845)|0);
       ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;
       $$0$i$i$i47 = 0;
       while(1) {
        $exitcond$i$i$i48 = ($$0$i$i$i47|0)==(3);
        if ($exitcond$i$i$i48) {
         break;
        }
        $42 = (($8) + ($$0$i$i$i47<<2)|0);
        HEAP32[$42>>2] = 0;
        $43 = (($$0$i$i$i47) + 1)|0;
        $$0$i$i$i47 = $43;
       }
       $44 = ((($3)) + 11|0);
       $45 = HEAP8[$44>>0]|0;
       $46 = ($45<<24>>24)<(0);
       $47 = HEAP32[$3>>2]|0;
       $48 = ((($3)) + 4|0);
       $49 = HEAP32[$48>>2]|0;
       $50 = $45&255;
       $51 = $46 ? $47 : $3;
       $52 = $46 ? $49 : $50;
       $53 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($7,$51,$52)|0);
       ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
       $$0$i$i$i50 = 0;
       while(1) {
        $exitcond$i$i$i51 = ($$0$i$i$i50|0)==(3);
        if ($exitcond$i$i$i51) {
         break;
        }
        $54 = (($7) + ($$0$i$i$i50<<2)|0);
        HEAP32[$54>>2] = 0;
        $55 = (($$0$i$i$i50) + 1)|0;
        $$0$i$i$i50 = $55;
       }
       $56 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6,3596)|0);
       ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
       $$0$i$i$i53 = 0;
       while(1) {
        $exitcond$i$i$i54 = ($$0$i$i$i53|0)==(3);
        if ($exitcond$i$i$i54) {
         break;
        }
        $57 = (($6) + ($$0$i$i$i53<<2)|0);
        HEAP32[$57>>2] = 0;
        $58 = (($$0$i$i$i53) + 1)|0;
        $$0$i$i$i53 = $58;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4,$5);
       $59 = HEAP32[$24>>2]|0;
       $60 = ((($59)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($60,$4);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$341 = $22;
      }
     }
    }
   } else {
    $$341 = $0;
   }
  } else {
   $$341 = $0;
  }
 } else {
  $$341 = $0;
 }
 STACKTOP = sp;return ($$341|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_115parse_call_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$063 = 0, $$6 = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0;
 var $exitcond$i$i = 0, $exitcond$i$i$i$i = 0, $or$cond = 0, $or$cond77 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $3 = sp + 12|0;
 $4 = sp;
 $5 = $1;
 $6 = $0;
 $7 = (($5) - ($6))|0;
 $8 = ($7|0)>(3);
 L1: do {
  if ($8) {
   $9 = HEAP8[$0>>0]|0;
   $10 = ($9<<24>>24)==(99);
   if ($10) {
    $11 = ((($0)) + 1|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = ($12<<24>>24)==(108);
    if ($13) {
     $14 = ((($0)) + 2|0);
     $15 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($14,$1,$2)|0);
     $16 = ($15|0)==($14|0);
     $17 = ($15|0)==($1|0);
     $or$cond77 = $16 | $17;
     if ($or$cond77) {
      $$6 = $0;
     } else {
      $18 = HEAP32[$2>>2]|0;
      $19 = ((($2)) + 4|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = ($18|0)==($20|0);
      if ($21) {
       $$6 = $0;
      } else {
       $22 = ((($20)) + -12|0);
       $23 = ((($20)) + -24|0);
       $24 = ((($22)) + 11|0);
       $25 = HEAP8[$24>>0]|0;
       $26 = ($25<<24>>24)<(0);
       $27 = HEAP32[$22>>2]|0;
       $28 = ((($20)) + -8|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = $25&255;
       $31 = $26 ? $27 : $22;
       $32 = $26 ? $29 : $30;
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($23,$31,$32)|0);
       ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
       $$0$i$i = 0;
       while(1) {
        $exitcond$i$i = ($$0$i$i|0)==(3);
        if ($exitcond$i$i) {
         break;
        }
        $33 = (($4) + ($$0$i$i<<2)|0);
        HEAP32[$33>>2] = 0;
        $34 = (($$0$i$i) + 1)|0;
        $$0$i$i = $34;
       }
       $35 = HEAP32[$19>>2]|0;
       $36 = ((($35)) + -12|0);
       $37 = ((($36)) + 11|0);
       $38 = HEAP8[$37>>0]|0;
       $39 = ($38<<24>>24)<(0);
       if ($39) {
        $40 = HEAP32[$36>>2]|0;
        HEAP8[$3>>0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($40,$3);
        $41 = ((($35)) + -8|0);
        HEAP32[$41>>2] = 0;
       } else {
        HEAP8[$3>>0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($36,$3);
        HEAP8[$37>>0] = 0;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($36);
       ;HEAP32[$36>>2]=HEAP32[$4>>2]|0;HEAP32[$36+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$36+8>>2]=HEAP32[$4+8>>2]|0;
       $$0$i$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
        if ($exitcond$i$i$i$i) {
         break;
        }
        $42 = (($4) + ($$0$i$i$i$i<<2)|0);
        HEAP32[$42>>2] = 0;
        $43 = (($$0$i$i$i$i) + 1)|0;
        $$0$i$i$i$i = $43;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
       $44 = HEAP32[$19>>2]|0;
       $45 = ((($44)) + -24|0);
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($45,3598)|0);
       $46 = ((($3)) + 11|0);
       $47 = ((($3)) + 4|0);
       $$063 = $15;
       while(1) {
        $48 = HEAP8[$$063>>0]|0;
        $49 = ($48<<24>>24)==(69);
        if ($49) {
         break;
        }
        $50 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($$063,$1,$2)|0);
        $51 = ($50|0)==($$063|0);
        $52 = ($50|0)==($1|0);
        $or$cond = $51 | $52;
        if ($or$cond) {
         $$6 = $0;
         break L1;
        }
        $53 = HEAP32[$2>>2]|0;
        $54 = HEAP32[$19>>2]|0;
        $55 = ($53|0)==($54|0);
        if ($55) {
         $$6 = $0;
         break L1;
        }
        $56 = ((($54)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$56);
        $57 = HEAP32[$19>>2]|0;
        $58 = ((($57)) + -24|0);
        $59 = $57;
        while(1) {
         $60 = ($59|0)==($58|0);
         if ($60) {
          break;
         }
         $61 = ((($59)) + -24|0);
         HEAP32[$19>>2] = $61;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($61);
         $$pre$i = HEAP32[$19>>2]|0;
         $59 = $$pre$i;
        }
        $62 = HEAP8[$46>>0]|0;
        $63 = ($62<<24>>24)<(0);
        $64 = HEAP32[$47>>2]|0;
        $65 = $62&255;
        $66 = $63 ? $64 : $65;
        $67 = ($66|0)==(0);
        if (!($67)) {
         $68 = HEAP32[$2>>2]|0;
         $69 = ($68|0)==($58|0);
         if ($69) {
          label = 26;
          break;
         }
         $70 = ((($57)) + -48|0);
         $71 = HEAP32[$3>>2]|0;
         $72 = $63 ? $71 : $3;
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($70,$72,$66)|0);
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
        $$063 = $50;
       }
       if ((label|0) == 26) {
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
        $$6 = $0;
        break;
       }
       $73 = HEAP32[$2>>2]|0;
       $74 = HEAP32[$19>>2]|0;
       $75 = ($73|0)==($74|0);
       if ($75) {
        $$6 = $0;
       } else {
        $76 = ((($$063)) + 1|0);
        $77 = ((($74)) + -24|0);
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($77,3596)|0);
        $$6 = $76;
       }
      }
     }
    } else {
     $$6 = $0;
    }
   } else {
    $$6 = $0;
   }
  } else {
   $$6 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$6|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_conversion_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i107 = 0, $$0$i$i$i110 = 0, $$0$i$i$i113 = 0, $$10 = 0, $$1100 = 0, $$2101 = 0, $$4103 = 0, $$5104 = 0, $$pr = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i108 = 0, $exitcond$i$i$i111 = 0, $exitcond$i$i$i114 = 0, $or$cond = 0, $or$cond106 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $3 = sp + 88|0;
 $4 = sp + 64|0;
 $5 = sp + 36|0;
 $6 = sp + 48|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 $10 = $1;
 $11 = $0;
 $12 = (($10) - ($11))|0;
 $13 = ($12|0)>(2);
 L1: do {
  if ($13) {
   $14 = HEAP8[$0>>0]|0;
   $15 = ($14<<24>>24)==(99);
   if ($15) {
    $16 = ((($0)) + 1|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = ($17<<24>>24)==(118);
    if ($18) {
     $19 = ((($2)) + 63|0);
     $20 = HEAP8[$19>>0]|0;
     HEAP8[$19>>0] = 0;
     $21 = ((($0)) + 2|0);
     $22 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($21,$1,$2)|0);
     HEAP8[$19>>0] = $20;
     $23 = ($22|0)==($21|0);
     $24 = ($22|0)==($1|0);
     $or$cond = $23 | $24;
     if ($or$cond) {
      $$10 = $0;
     } else {
      $25 = HEAP8[$22>>0]|0;
      $26 = ($25<<24>>24)==(95);
      if ($26) {
       $29 = ((($22)) + 1|0);
       $30 = ($29|0)==($1|0);
       if ($30) {
        $$10 = $0;
        break;
       }
       $31 = HEAP8[$29>>0]|0;
       $32 = ($31<<24>>24)==(69);
       L9: do {
        if ($32) {
         $33 = ((($2)) + 4|0);
         $34 = HEAP32[$33>>2]|0;
         $35 = ((($2)) + 8|0);
         $36 = HEAP32[$35>>2]|0;
         $37 = ($34>>>0)<($36>>>0);
         if ($37) {
          ;HEAP32[$34>>2]=0|0;HEAP32[$34+4>>2]=0|0;HEAP32[$34+8>>2]=0|0;HEAP32[$34+12>>2]=0|0;HEAP32[$34+16>>2]=0|0;HEAP32[$34+20>>2]=0|0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($34);
          $38 = HEAP32[$33>>2]|0;
          $39 = ((($38)) + 24|0);
          HEAP32[$33>>2] = $39;
          $$4103 = $29;
          break;
         } else {
          __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE24__emplace_back_slow_pathIJEEEvDpOT_($2);
          $$4103 = $29;
          break;
         }
        } else {
         $$1100 = $29;$41 = $31;
         while(1) {
          $42 = ($41<<24>>24)==(69);
          if ($42) {
           $$4103 = $$1100;
           break L9;
          }
          $40 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($$1100,$1,$2)|0);
          $43 = ($40|0)==($$1100|0);
          $44 = ($40|0)==($1|0);
          $or$cond106 = $43 | $44;
          if ($or$cond106) {
           $$10 = $0;
           break L1;
          }
          $$2101 = $or$cond106 ? $$1100 : $40;
          $$pr = HEAP8[$$2101>>0]|0;
          $$1100 = $40;$41 = $$pr;
         }
        }
       } while(0);
       $45 = ((($$4103)) + 1|0);
       $$5104 = $45;
      } else {
       $27 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($22,$1,$2)|0);
       $28 = ($27|0)==($22|0);
       if ($28) {
        $$10 = $0;
        break;
       } else {
        $$5104 = $27;
       }
      }
      $46 = ((($2)) + 4|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = HEAP32[$2>>2]|0;
      $49 = (($47) - ($48))|0;
      $50 = (($49|0) / 24)&-1;
      $51 = ($50>>>0)<(2);
      if ($51) {
       $$10 = $0;
      } else {
       $52 = $47;
       $53 = ((($52)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$53);
       $54 = HEAP32[$46>>2]|0;
       $55 = ((($54)) + -24|0);
       $56 = $54;
       while(1) {
        $57 = ($56|0)==($55|0);
        if ($57) {
         break;
        }
        $58 = ((($56)) + -24|0);
        HEAP32[$46>>2] = $58;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($58);
        $$pre$i = HEAP32[$46>>2]|0;
        $56 = $$pre$i;
       }
       $59 = ((($54)) + -48|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9,$59);
       $60 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($9,0,3598)|0);
       ;HEAP32[$8>>2]=HEAP32[$9>>2]|0;HEAP32[$8+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$9+8>>2]|0;
       $$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $61 = (($9) + ($$0$i$i$i<<2)|0);
        HEAP32[$61>>2] = 0;
        $62 = (($$0$i$i$i) + 1)|0;
        $$0$i$i$i = $62;
       }
       $63 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8,4762)|0);
       ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;
       $$0$i$i$i107 = 0;
       while(1) {
        $exitcond$i$i$i108 = ($$0$i$i$i107|0)==(3);
        if ($exitcond$i$i$i108) {
         break;
        }
        $64 = (($8) + ($$0$i$i$i107<<2)|0);
        HEAP32[$64>>2] = 0;
        $65 = (($$0$i$i$i107) + 1)|0;
        $$0$i$i$i107 = $65;
       }
       $66 = ((($3)) + 11|0);
       $67 = HEAP8[$66>>0]|0;
       $68 = ($67<<24>>24)<(0);
       $69 = HEAP32[$3>>2]|0;
       $70 = ((($3)) + 4|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = $67&255;
       $73 = $68 ? $69 : $3;
       $74 = $68 ? $71 : $72;
       $75 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($7,$73,$74)|0);
       ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
       $$0$i$i$i110 = 0;
       while(1) {
        $exitcond$i$i$i111 = ($$0$i$i$i110|0)==(3);
        if ($exitcond$i$i$i111) {
         break;
        }
        $76 = (($7) + ($$0$i$i$i110<<2)|0);
        HEAP32[$76>>2] = 0;
        $77 = (($$0$i$i$i110) + 1)|0;
        $$0$i$i$i110 = $77;
       }
       $78 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6,3596)|0);
       ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
       $$0$i$i$i113 = 0;
       while(1) {
        $exitcond$i$i$i114 = ($$0$i$i$i113|0)==(3);
        if ($exitcond$i$i$i114) {
         break;
        }
        $79 = (($6) + ($$0$i$i$i113<<2)|0);
        HEAP32[$79>>2] = 0;
        $80 = (($$0$i$i$i113) + 1)|0;
        $$0$i$i$i113 = $80;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4,$5);
       $81 = HEAP32[$46>>2]|0;
       $82 = ((($81)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($82,$4);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$10 = $$5104;
      }
     }
    } else {
     $$10 = $0;
    }
   } else {
    $$10 = $0;
   }
  } else {
   $$10 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$10|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_123parse_dynamic_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i47 = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$341 = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i48 = 0, $exitcond$i$i$i51 = 0, $exitcond$i$i$i54 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $3 = sp + 88|0;
 $4 = sp + 64|0;
 $5 = sp + 36|0;
 $6 = sp + 48|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 $10 = $1;
 $11 = $0;
 $12 = (($10) - ($11))|0;
 $13 = ($12|0)>(2);
 if ($13) {
  $14 = HEAP8[$0>>0]|0;
  $15 = ($14<<24>>24)==(100);
  if ($15) {
   $16 = ((($0)) + 1|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = ($17<<24>>24)==(99);
   if ($18) {
    $19 = ((($0)) + 2|0);
    $20 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($19,$1,$2)|0);
    $21 = ($20|0)==($19|0);
    if ($21) {
     $$341 = $0;
    } else {
     $22 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($20,$1,$2)|0);
     $23 = ($22|0)==($20|0);
     if ($23) {
      $$341 = $0;
     } else {
      $24 = ((($2)) + 4|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = HEAP32[$2>>2]|0;
      $27 = (($25) - ($26))|0;
      $28 = (($27|0) / 24)&-1;
      $29 = ($28>>>0)<(2);
      if ($29) {
       $$341 = $0;
      } else {
       $30 = $25;
       $31 = ((($30)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$31);
       $32 = HEAP32[$24>>2]|0;
       $33 = ((($32)) + -24|0);
       $34 = $32;
       while(1) {
        $35 = ($34|0)==($33|0);
        if ($35) {
         break;
        }
        $36 = ((($34)) + -24|0);
        HEAP32[$24>>2] = $36;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($36);
        $$pre$i = HEAP32[$24>>2]|0;
        $34 = $$pre$i;
       }
       $37 = ((($32)) + -48|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9,$37);
       $38 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($9,0,4748)|0);
       ;HEAP32[$8>>2]=HEAP32[$9>>2]|0;HEAP32[$8+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$9+8>>2]|0;
       $$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $39 = (($9) + ($$0$i$i$i<<2)|0);
        HEAP32[$39>>2] = 0;
        $40 = (($$0$i$i$i) + 1)|0;
        $$0$i$i$i = $40;
       }
       $41 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8,3845)|0);
       ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;
       $$0$i$i$i47 = 0;
       while(1) {
        $exitcond$i$i$i48 = ($$0$i$i$i47|0)==(3);
        if ($exitcond$i$i$i48) {
         break;
        }
        $42 = (($8) + ($$0$i$i$i47<<2)|0);
        HEAP32[$42>>2] = 0;
        $43 = (($$0$i$i$i47) + 1)|0;
        $$0$i$i$i47 = $43;
       }
       $44 = ((($3)) + 11|0);
       $45 = HEAP8[$44>>0]|0;
       $46 = ($45<<24>>24)<(0);
       $47 = HEAP32[$3>>2]|0;
       $48 = ((($3)) + 4|0);
       $49 = HEAP32[$48>>2]|0;
       $50 = $45&255;
       $51 = $46 ? $47 : $3;
       $52 = $46 ? $49 : $50;
       $53 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($7,$51,$52)|0);
       ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
       $$0$i$i$i50 = 0;
       while(1) {
        $exitcond$i$i$i51 = ($$0$i$i$i50|0)==(3);
        if ($exitcond$i$i$i51) {
         break;
        }
        $54 = (($7) + ($$0$i$i$i50<<2)|0);
        HEAP32[$54>>2] = 0;
        $55 = (($$0$i$i$i50) + 1)|0;
        $$0$i$i$i50 = $55;
       }
       $56 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6,3596)|0);
       ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
       $$0$i$i$i53 = 0;
       while(1) {
        $exitcond$i$i$i54 = ($$0$i$i$i53|0)==(3);
        if ($exitcond$i$i$i54) {
         break;
        }
        $57 = (($6) + ($$0$i$i$i53<<2)|0);
        HEAP32[$57>>2] = 0;
        $58 = (($$0$i$i$i53) + 1)|0;
        $$0$i$i$i53 = $58;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4,$5);
       $59 = HEAP32[$24>>2]|0;
       $60 = ((($59)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($60,$4);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$341 = $22;
      }
     }
    }
   } else {
    $$341 = $0;
   }
  } else {
   $$341 = $0;
  }
 } else {
  $$341 = $0;
 }
 STACKTOP = sp;return ($$341|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0$i$i$i = 0, $$0$i$i$i207 = 0, $$0$i$i$i221 = 0, $$0$i$i$i229 = 0, $$0$i$i$i239 = 0, $$0182$off0 = 0, $$0183 = 0, $$1184 = 0, $$1184$ph = 0, $$2185 = 0, $$3186 = 0, $$6181 = 0, $$pre = 0, $$pre$i = 0, $$pre$i197 = 0, $$pre$i199 = 0, $$pre$i203 = 0, $$pre$i205 = 0, $$pre$i213 = 0;
 var $$pre$i217 = 0, $$pre$i219 = 0, $$pre$i227 = 0, $$pre$i235 = 0, $$pre$i237 = 0, $$pre$phi281Z2D = 0, $$pre$phi283Z2D = 0, $$pre282 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i208 = 0;
 var $exitcond$i$i$i222 = 0, $exitcond$i$i$i230 = 0, $exitcond$i$i$i240 = 0, $or$cond = 0, $or$cond194 = 0, $or$cond195 = 0, $or$cond196 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $3 = sp + 12|0;
 $4 = sp;
 $5 = $1;
 $6 = $0;
 $7 = (($5) - ($6))|0;
 $8 = ($7|0)>(2);
 L1: do {
  if ($8) {
   $9 = HEAP8[$0>>0]|0;
   $10 = ($9<<24>>24)==(103);
   if ($10) {
    $11 = ((($0)) + 1|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = ($12<<24>>24)==(115);
    $14 = ((($0)) + 2|0);
    $$ = $13 ? $14 : $0;
    $$0182$off0 = $13;$$0183 = $$;
   } else {
    $$0182$off0 = 0;$$0183 = $0;
   }
   $15 = (__ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($$0183,$1,$2)|0);
   $16 = ($15|0)==($$0183|0);
   if (!($16)) {
    if (!($$0182$off0)) {
     $$6181 = $15;
     break;
    }
    $17 = HEAP32[$2>>2]|0;
    $18 = ((($2)) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($17|0)==($19|0);
    if ($20) {
     $$6181 = $0;
     break;
    }
    $21 = ((($19)) + -24|0);
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($21,0,3670)|0);
    $$6181 = $15;
    break;
   }
   $22 = $$0183;
   $23 = (($5) - ($22))|0;
   $24 = ($23|0)>(2);
   if ($24) {
    $25 = HEAP8[$$0183>>0]|0;
    $26 = ($25<<24>>24)==(115);
    if ($26) {
     $27 = ((($$0183)) + 1|0);
     $28 = HEAP8[$27>>0]|0;
     $29 = ($28<<24>>24)==(114);
     if ($29) {
      $30 = ((($$0183)) + 2|0);
      $31 = HEAP8[$30>>0]|0;
      $32 = ($31<<24>>24)==(78);
      if ($32) {
       $33 = ((($$0183)) + 3|0);
       $34 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($33,$1,$2)|0);
       $35 = ($34|0)==($33|0);
       $36 = ($34|0)==($1|0);
       $or$cond = $35 | $36;
       if ($or$cond) {
        $$6181 = $0;
        break;
       }
       $37 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($34,$1,$2)|0);
       $38 = ($37|0)==($34|0);
       $$pre = ((($2)) + 4|0);
       do {
        if ($38) {
         $$1184$ph = $34;$$pre$phi281Z2D = $2;
        } else {
         $39 = HEAP32[$$pre>>2]|0;
         $40 = HEAP32[$2>>2]|0;
         $41 = (($39) - ($40))|0;
         $42 = (($41|0) / 24)&-1;
         $43 = ($42>>>0)<(2);
         if ($43) {
          $$6181 = $0;
          break L1;
         }
         $44 = $39;
         $45 = ((($44)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$45);
         $46 = HEAP32[$$pre>>2]|0;
         $47 = ((($46)) + -24|0);
         $48 = $46;
         while(1) {
          $49 = ($48|0)==($47|0);
          if ($49) {
           break;
          }
          $50 = ((($48)) + -24|0);
          HEAP32[$$pre>>2] = $50;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($50);
          $$pre$i = HEAP32[$$pre>>2]|0;
          $48 = $$pre$i;
         }
         $51 = ((($46)) + -48|0);
         $52 = ((($3)) + 11|0);
         $53 = HEAP8[$52>>0]|0;
         $54 = ($53<<24>>24)<(0);
         $55 = HEAP32[$3>>2]|0;
         $56 = ((($3)) + 4|0);
         $57 = HEAP32[$56>>2]|0;
         $58 = $53&255;
         $59 = $54 ? $55 : $3;
         $60 = $54 ? $57 : $58;
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($51,$59,$60)|0);
         $61 = ($37|0)==($1|0);
         if (!($61)) {
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
          $$1184$ph = $37;$$pre$phi281Z2D = $2;
          break;
         }
         $62 = HEAP32[$$pre>>2]|0;
         $63 = ((($62)) + -24|0);
         $64 = $62;
         while(1) {
          $65 = ($64|0)==($63|0);
          if ($65) {
           break;
          }
          $66 = ((($64)) + -24|0);
          HEAP32[$$pre>>2] = $66;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($66);
          $$pre$i197 = HEAP32[$$pre>>2]|0;
          $64 = $$pre$i197;
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
         $$6181 = $0;
         break L1;
        }
       } while(0);
       $67 = ((($4)) + 11|0);
       $68 = ((($4)) + 4|0);
       $$1184 = $$1184$ph;
       while(1) {
        $69 = HEAP8[$$1184>>0]|0;
        $70 = ($69<<24>>24)==(69);
        if ($70) {
         break;
        }
        $71 = (__ZN10__cxxabiv112_GLOBAL__N_132parse_unresolved_qualifier_levelINS0_2DbEEEPKcS4_S4_RT_($$1184,$1,$2)|0);
        $72 = ($71|0)==($$1184|0);
        $73 = ($71|0)==($1|0);
        $or$cond194 = $72 | $73;
        if ($or$cond194) {
         $$6181 = $0;
         break L1;
        }
        $74 = HEAP32[$$pre>>2]|0;
        $75 = HEAP32[$$pre$phi281Z2D>>2]|0;
        $76 = (($74) - ($75))|0;
        $77 = (($76|0) / 24)&-1;
        $78 = ($77>>>0)<(2);
        if ($78) {
         $$6181 = $0;
         break L1;
        }
        $79 = $74;
        $80 = ((($79)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$80);
        $81 = HEAP32[$$pre>>2]|0;
        $82 = ((($81)) + -24|0);
        $83 = $81;
        while(1) {
         $84 = ($83|0)==($82|0);
         if ($84) {
          break;
         }
         $85 = ((($83)) + -24|0);
         HEAP32[$$pre>>2] = $85;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($85);
         $$pre$i199 = HEAP32[$$pre>>2]|0;
         $83 = $$pre$i199;
        }
        $86 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($3,0,3670)|0);
        ;HEAP32[$4>>2]=HEAP32[$3>>2]|0;HEAP32[$4+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$3+8>>2]|0;
        $$0$i$i$i = 0;
        while(1) {
         $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
         if ($exitcond$i$i$i) {
          break;
         }
         $87 = (($3) + ($$0$i$i$i<<2)|0);
         HEAP32[$87>>2] = 0;
         $88 = (($$0$i$i$i) + 1)|0;
         $$0$i$i$i = $88;
        }
        $89 = HEAP32[$$pre>>2]|0;
        $90 = ((($89)) + -24|0);
        $91 = HEAP8[$67>>0]|0;
        $92 = ($91<<24>>24)<(0);
        $93 = HEAP32[$4>>2]|0;
        $94 = HEAP32[$68>>2]|0;
        $95 = $91&255;
        $96 = $92 ? $93 : $4;
        $97 = $92 ? $94 : $95;
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($90,$96,$97)|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
        $$1184 = $71;
       }
       $98 = ((($$1184)) + 1|0);
       $99 = (__ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($98,$1,$2)|0);
       $100 = ($99|0)==($98|0);
       if ($100) {
        $101 = HEAP32[$2>>2]|0;
        $102 = HEAP32[$$pre>>2]|0;
        $103 = ($101|0)==($102|0);
        if ($103) {
         $$6181 = $0;
         break;
        }
        $104 = ((($102)) + -24|0);
        $105 = $102;
        while(1) {
         $106 = ($105|0)==($104|0);
         if ($106) {
          $$6181 = $0;
          break L1;
         }
         $107 = ((($105)) + -24|0);
         HEAP32[$$pre>>2] = $107;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($107);
         $$pre$i203 = HEAP32[$$pre>>2]|0;
         $105 = $$pre$i203;
        }
       }
       $108 = HEAP32[$$pre>>2]|0;
       $109 = HEAP32[$$pre$phi281Z2D>>2]|0;
       $110 = (($108) - ($109))|0;
       $111 = (($110|0) / 24)&-1;
       $112 = ($111>>>0)<(2);
       if ($112) {
        $$6181 = $0;
        break;
       }
       $113 = $108;
       $114 = ((($113)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$114);
       $115 = HEAP32[$$pre>>2]|0;
       $116 = ((($115)) + -24|0);
       $117 = $115;
       while(1) {
        $118 = ($117|0)==($116|0);
        if ($118) {
         break;
        }
        $119 = ((($117)) + -24|0);
        HEAP32[$$pre>>2] = $119;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($119);
        $$pre$i205 = HEAP32[$$pre>>2]|0;
        $117 = $$pre$i205;
       }
       $120 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($3,0,3670)|0);
       ;HEAP32[$4>>2]=HEAP32[$3>>2]|0;HEAP32[$4+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$3+8>>2]|0;
       $$0$i$i$i207 = 0;
       while(1) {
        $exitcond$i$i$i208 = ($$0$i$i$i207|0)==(3);
        if ($exitcond$i$i$i208) {
         break;
        }
        $121 = (($3) + ($$0$i$i$i207<<2)|0);
        HEAP32[$121>>2] = 0;
        $122 = (($$0$i$i$i207) + 1)|0;
        $$0$i$i$i207 = $122;
       }
       $123 = HEAP32[$$pre>>2]|0;
       $124 = ((($123)) + -24|0);
       $125 = ((($4)) + 11|0);
       $126 = HEAP8[$125>>0]|0;
       $127 = ($126<<24>>24)<(0);
       $128 = HEAP32[$4>>2]|0;
       $129 = ((($4)) + 4|0);
       $130 = HEAP32[$129>>2]|0;
       $131 = $126&255;
       $132 = $127 ? $128 : $4;
       $133 = $127 ? $130 : $131;
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($124,$132,$133)|0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$6181 = $99;
       break;
      }
      $134 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($30,$1,$2)|0);
      $135 = ($134|0)==($30|0);
      if (!($135)) {
       $136 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($134,$1,$2)|0);
       $137 = ($136|0)==($134|0);
       if ($137) {
        $$2185 = $134;
       } else {
        $138 = ((($2)) + 4|0);
        $139 = HEAP32[$138>>2]|0;
        $140 = HEAP32[$2>>2]|0;
        $141 = (($139) - ($140))|0;
        $142 = (($141|0) / 24)&-1;
        $143 = ($142>>>0)<(2);
        if ($143) {
         $$6181 = $0;
         break;
        }
        $144 = $139;
        $145 = ((($144)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$145);
        $146 = HEAP32[$138>>2]|0;
        $147 = ((($146)) + -24|0);
        $148 = $146;
        while(1) {
         $149 = ($148|0)==($147|0);
         if ($149) {
          break;
         }
         $150 = ((($148)) + -24|0);
         HEAP32[$138>>2] = $150;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($150);
         $$pre$i213 = HEAP32[$138>>2]|0;
         $148 = $$pre$i213;
        }
        $151 = ((($146)) + -48|0);
        $152 = ((($3)) + 11|0);
        $153 = HEAP8[$152>>0]|0;
        $154 = ($153<<24>>24)<(0);
        $155 = HEAP32[$3>>2]|0;
        $156 = ((($3)) + 4|0);
        $157 = HEAP32[$156>>2]|0;
        $158 = $153&255;
        $159 = $154 ? $155 : $3;
        $160 = $154 ? $157 : $158;
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($151,$159,$160)|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
        $$2185 = $136;
       }
       $161 = (__ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($$2185,$1,$2)|0);
       $162 = ($161|0)==($$2185|0);
       if ($162) {
        $163 = HEAP32[$2>>2]|0;
        $164 = ((($2)) + 4|0);
        $165 = HEAP32[$164>>2]|0;
        $166 = ($163|0)==($165|0);
        if ($166) {
         $$6181 = $0;
         break;
        }
        $167 = ((($165)) + -24|0);
        $168 = $165;
        while(1) {
         $169 = ($168|0)==($167|0);
         if ($169) {
          $$6181 = $0;
          break L1;
         }
         $170 = ((($168)) + -24|0);
         HEAP32[$164>>2] = $170;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($170);
         $$pre$i217 = HEAP32[$164>>2]|0;
         $168 = $$pre$i217;
        }
       }
       $171 = ((($2)) + 4|0);
       $172 = HEAP32[$171>>2]|0;
       $173 = HEAP32[$2>>2]|0;
       $174 = (($172) - ($173))|0;
       $175 = (($174|0) / 24)&-1;
       $176 = ($175>>>0)<(2);
       if ($176) {
        $$6181 = $0;
        break;
       }
       $177 = $172;
       $178 = ((($177)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$178);
       $179 = HEAP32[$171>>2]|0;
       $180 = ((($179)) + -24|0);
       $181 = $179;
       while(1) {
        $182 = ($181|0)==($180|0);
        if ($182) {
         break;
        }
        $183 = ((($181)) + -24|0);
        HEAP32[$171>>2] = $183;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($183);
        $$pre$i219 = HEAP32[$171>>2]|0;
        $181 = $$pre$i219;
       }
       $184 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($3,0,3670)|0);
       ;HEAP32[$4>>2]=HEAP32[$3>>2]|0;HEAP32[$4+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$3+8>>2]|0;
       $$0$i$i$i221 = 0;
       while(1) {
        $exitcond$i$i$i222 = ($$0$i$i$i221|0)==(3);
        if ($exitcond$i$i$i222) {
         break;
        }
        $185 = (($3) + ($$0$i$i$i221<<2)|0);
        HEAP32[$185>>2] = 0;
        $186 = (($$0$i$i$i221) + 1)|0;
        $$0$i$i$i221 = $186;
       }
       $187 = HEAP32[$171>>2]|0;
       $188 = ((($187)) + -24|0);
       $189 = ((($4)) + 11|0);
       $190 = HEAP8[$189>>0]|0;
       $191 = ($190<<24>>24)<(0);
       $192 = HEAP32[$4>>2]|0;
       $193 = ((($4)) + 4|0);
       $194 = HEAP32[$193>>2]|0;
       $195 = $190&255;
       $196 = $191 ? $192 : $4;
       $197 = $191 ? $194 : $195;
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($188,$196,$197)|0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$6181 = $161;
       break;
      }
      $198 = (__ZN10__cxxabiv112_GLOBAL__N_132parse_unresolved_qualifier_levelINS0_2DbEEEPKcS4_S4_RT_($30,$1,$2)|0);
      $199 = ($198|0)==($30|0);
      $200 = ($198|0)==($1|0);
      $or$cond195 = $199 | $200;
      if ($or$cond195) {
       $$6181 = $0;
      } else {
       if ($$0182$off0) {
        $201 = HEAP32[$2>>2]|0;
        $202 = ((($2)) + 4|0);
        $203 = HEAP32[$202>>2]|0;
        $204 = ($201|0)==($203|0);
        if ($204) {
         $$6181 = $0;
         break;
        }
        $205 = ((($203)) + -24|0);
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($205,0,3670)|0);
        $$pre$phi283Z2D = $202;
       } else {
        $$pre282 = ((($2)) + 4|0);
        $$pre$phi283Z2D = $$pre282;
       }
       $206 = ((($4)) + 11|0);
       $207 = ((($4)) + 4|0);
       $$3186 = $198;
       while(1) {
        $208 = HEAP8[$$3186>>0]|0;
        $209 = ($208<<24>>24)==(69);
        if ($209) {
         break;
        }
        $210 = (__ZN10__cxxabiv112_GLOBAL__N_132parse_unresolved_qualifier_levelINS0_2DbEEEPKcS4_S4_RT_($$3186,$1,$2)|0);
        $211 = ($210|0)==($$3186|0);
        $212 = ($210|0)==($1|0);
        $or$cond196 = $211 | $212;
        if ($or$cond196) {
         $$6181 = $0;
         break L1;
        }
        $213 = HEAP32[$$pre$phi283Z2D>>2]|0;
        $214 = HEAP32[$2>>2]|0;
        $215 = (($213) - ($214))|0;
        $216 = (($215|0) / 24)&-1;
        $217 = ($216>>>0)<(2);
        if ($217) {
         $$6181 = $0;
         break L1;
        }
        $218 = $213;
        $219 = ((($218)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$219);
        $220 = HEAP32[$$pre$phi283Z2D>>2]|0;
        $221 = ((($220)) + -24|0);
        $222 = $220;
        while(1) {
         $223 = ($222|0)==($221|0);
         if ($223) {
          break;
         }
         $224 = ((($222)) + -24|0);
         HEAP32[$$pre$phi283Z2D>>2] = $224;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($224);
         $$pre$i227 = HEAP32[$$pre$phi283Z2D>>2]|0;
         $222 = $$pre$i227;
        }
        $225 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($3,0,3670)|0);
        ;HEAP32[$4>>2]=HEAP32[$3>>2]|0;HEAP32[$4+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$3+8>>2]|0;
        $$0$i$i$i229 = 0;
        while(1) {
         $exitcond$i$i$i230 = ($$0$i$i$i229|0)==(3);
         if ($exitcond$i$i$i230) {
          break;
         }
         $226 = (($3) + ($$0$i$i$i229<<2)|0);
         HEAP32[$226>>2] = 0;
         $227 = (($$0$i$i$i229) + 1)|0;
         $$0$i$i$i229 = $227;
        }
        $228 = HEAP32[$$pre$phi283Z2D>>2]|0;
        $229 = ((($228)) + -24|0);
        $230 = HEAP8[$206>>0]|0;
        $231 = ($230<<24>>24)<(0);
        $232 = HEAP32[$4>>2]|0;
        $233 = HEAP32[$207>>2]|0;
        $234 = $230&255;
        $235 = $231 ? $232 : $4;
        $236 = $231 ? $233 : $234;
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($229,$235,$236)|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
        $$3186 = $210;
       }
       $237 = ((($$3186)) + 1|0);
       $238 = (__ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($237,$1,$2)|0);
       $239 = ($238|0)==($237|0);
       if ($239) {
        $240 = HEAP32[$2>>2]|0;
        $241 = HEAP32[$$pre$phi283Z2D>>2]|0;
        $242 = ($240|0)==($241|0);
        if ($242) {
         $$6181 = $0;
         break;
        }
        $243 = ((($241)) + -24|0);
        $244 = $241;
        while(1) {
         $245 = ($244|0)==($243|0);
         if ($245) {
          $$6181 = $0;
          break L1;
         }
         $246 = ((($244)) + -24|0);
         HEAP32[$$pre$phi283Z2D>>2] = $246;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($246);
         $$pre$i235 = HEAP32[$$pre$phi283Z2D>>2]|0;
         $244 = $$pre$i235;
        }
       }
       $247 = HEAP32[$$pre$phi283Z2D>>2]|0;
       $248 = HEAP32[$2>>2]|0;
       $249 = (($247) - ($248))|0;
       $250 = (($249|0) / 24)&-1;
       $251 = ($250>>>0)<(2);
       if ($251) {
        $$6181 = $0;
       } else {
        $252 = $247;
        $253 = ((($252)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$253);
        $254 = HEAP32[$$pre$phi283Z2D>>2]|0;
        $255 = ((($254)) + -24|0);
        $256 = $254;
        while(1) {
         $257 = ($256|0)==($255|0);
         if ($257) {
          break;
         }
         $258 = ((($256)) + -24|0);
         HEAP32[$$pre$phi283Z2D>>2] = $258;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($258);
         $$pre$i237 = HEAP32[$$pre$phi283Z2D>>2]|0;
         $256 = $$pre$i237;
        }
        $259 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($3,0,3670)|0);
        ;HEAP32[$4>>2]=HEAP32[$3>>2]|0;HEAP32[$4+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$3+8>>2]|0;
        $$0$i$i$i239 = 0;
        while(1) {
         $exitcond$i$i$i240 = ($$0$i$i$i239|0)==(3);
         if ($exitcond$i$i$i240) {
          break;
         }
         $260 = (($3) + ($$0$i$i$i239<<2)|0);
         HEAP32[$260>>2] = 0;
         $261 = (($$0$i$i$i239) + 1)|0;
         $$0$i$i$i239 = $261;
        }
        $262 = HEAP32[$$pre$phi283Z2D>>2]|0;
        $263 = ((($262)) + -24|0);
        $264 = ((($4)) + 11|0);
        $265 = HEAP8[$264>>0]|0;
        $266 = ($265<<24>>24)<(0);
        $267 = HEAP32[$4>>2]|0;
        $268 = ((($4)) + 4|0);
        $269 = HEAP32[$268>>2]|0;
        $270 = $265&255;
        $271 = $266 ? $267 : $4;
        $272 = $266 ? $269 : $270;
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($263,$271,$272)|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
        $$6181 = $238;
       }
      }
     } else {
      $$6181 = $0;
     }
    } else {
     $$6181 = $0;
    }
   } else {
    $$6181 = $0;
   }
  } else {
   $$6181 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$6181|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_dot_star_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$3 = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $3 = sp + 12|0;
 $4 = sp;
 $5 = $1;
 $6 = $0;
 $7 = (($5) - ($6))|0;
 $8 = ($7|0)>(2);
 if ($8) {
  $9 = HEAP8[$0>>0]|0;
  $10 = ($9<<24>>24)==(100);
  if ($10) {
   $11 = ((($0)) + 1|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = ($12<<24>>24)==(115);
   if ($13) {
    $14 = ((($0)) + 2|0);
    $15 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($14,$1,$2)|0);
    $16 = ($15|0)==($14|0);
    if ($16) {
     $$3 = $0;
    } else {
     $17 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($15,$1,$2)|0);
     $18 = ($17|0)==($15|0);
     if ($18) {
      $$3 = $0;
     } else {
      $19 = ((($2)) + 4|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = HEAP32[$2>>2]|0;
      $22 = (($20) - ($21))|0;
      $23 = (($22|0) / 24)&-1;
      $24 = ($23>>>0)<(2);
      if ($24) {
       $$3 = $0;
      } else {
       $25 = $20;
       $26 = ((($25)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$26);
       $27 = HEAP32[$19>>2]|0;
       $28 = ((($27)) + -24|0);
       $29 = $27;
       while(1) {
        $30 = ($29|0)==($28|0);
        if ($30) {
         break;
        }
        $31 = ((($29)) + -24|0);
        HEAP32[$19>>2] = $31;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($31);
        $$pre$i = HEAP32[$19>>2]|0;
        $29 = $$pre$i;
       }
       __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($4,3889,$3);
       $32 = HEAP32[$19>>2]|0;
       $33 = ((($32)) + -24|0);
       $34 = ((($4)) + 11|0);
       $35 = HEAP8[$34>>0]|0;
       $36 = ($35<<24>>24)<(0);
       $37 = HEAP32[$4>>2]|0;
       $38 = ((($4)) + 4|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = $35&255;
       $41 = $36 ? $37 : $4;
       $42 = $36 ? $39 : $40;
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($33,$41,$42)|0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$3 = $17;
      }
     }
    }
   } else {
    $$3 = $0;
   }
  } else {
   $$3 = $0;
  }
 } else {
  $$3 = $0;
 }
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_114parse_dot_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$3 = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $3 = sp + 12|0;
 $4 = sp;
 $5 = $1;
 $6 = $0;
 $7 = (($5) - ($6))|0;
 $8 = ($7|0)>(2);
 if ($8) {
  $9 = HEAP8[$0>>0]|0;
  $10 = ($9<<24>>24)==(100);
  if ($10) {
   $11 = ((($0)) + 1|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = ($12<<24>>24)==(116);
   if ($13) {
    $14 = ((($0)) + 2|0);
    $15 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($14,$1,$2)|0);
    $16 = ($15|0)==($14|0);
    if ($16) {
     $$3 = $0;
    } else {
     $17 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($15,$1,$2)|0);
     $18 = ($17|0)==($15|0);
     if ($18) {
      $$3 = $0;
     } else {
      $19 = ((($2)) + 4|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = HEAP32[$2>>2]|0;
      $22 = (($20) - ($21))|0;
      $23 = (($22|0) / 24)&-1;
      $24 = ($23>>>0)<(2);
      if ($24) {
       $$3 = $0;
      } else {
       $25 = $20;
       $26 = ((($25)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$26);
       $27 = HEAP32[$19>>2]|0;
       $28 = ((($27)) + -24|0);
       $29 = $27;
       while(1) {
        $30 = ($29|0)==($28|0);
        if ($30) {
         break;
        }
        $31 = ((($29)) + -24|0);
        HEAP32[$19>>2] = $31;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($31);
        $$pre$i = HEAP32[$19>>2]|0;
        $29 = $$pre$i;
       }
       __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($4,3887,$3);
       $32 = HEAP32[$19>>2]|0;
       $33 = ((($32)) + -24|0);
       $34 = ((($4)) + 11|0);
       $35 = HEAP8[$34>>0]|0;
       $36 = ($35<<24>>24)<(0);
       $37 = HEAP32[$4>>2]|0;
       $38 = ((($4)) + 4|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = $35&255;
       $41 = $36 ? $37 : $4;
       $42 = $36 ? $39 : $40;
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($33,$41,$42)|0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$3 = $17;
      }
     }
    }
   } else {
    $$3 = $0;
   }
  } else {
   $$3 = $0;
  }
 } else {
  $$3 = $0;
 }
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_114parse_new_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i177 = 0, $$0$i$i$i189 = 0, $$0$i$i172 = 0, $$0$i$i182 = 0, $$0$i$i195 = 0, $$0$off0200 = 0, $$0138$off0 = 0, $$0138$off0$ = 0, $$0150 = 0, $$0159$off0 = 0, $$0160 = 0, $$1151 = 0, $$1161 = 0, $$16 = 0, $$3143 = 0, $$3163 = 0;
 var $$4144 = 0, $$4164199 = 0, $$phi$trans$insert = 0, $$pr = 0, $$pre = 0, $$pre$i = 0, $$pre$i170 = 0, $$pre$i180 = 0, $$pre$phi218Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $exitcond$i$i = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i$i178 = 0, $exitcond$i$i$i190 = 0, $exitcond$i$i173 = 0, $exitcond$i$i183 = 0, $exitcond$i$i196 = 0, $not$or$cond = 0, $not$or$cond$demorgan = 0, $or$cond = 0, $or$cond167 = 0;
 var $or$cond168 = 0, $or$cond223 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $3 = sp + 88|0;
 $4 = sp + 76|0;
 $5 = sp + 64|0;
 $6 = sp + 40|0;
 $7 = sp + 16|0;
 $8 = sp;
 $9 = sp + 52|0;
 $10 = $1;
 $11 = $0;
 $12 = (($10) - ($11))|0;
 $13 = ($12|0)>(3);
 L1: do {
  if ($13) {
   $14 = HEAP8[$0>>0]|0;
   $15 = ($14<<24>>24)==(103);
   if ($15) {
    $16 = ((($0)) + 1|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = ($17<<24>>24)==(115);
    $19 = ((($0)) + 2|0);
    $$ = $18 ? $19 : $0;
    $$pr = HEAP8[$$>>0]|0;
    $$0159$off0 = $18;$$0160 = $$;$20 = $$pr;
   } else {
    $$0159$off0 = 0;$$0160 = $0;$20 = $14;
   }
   $21 = ($20<<24>>24)==(110);
   if ($21) {
    $22 = ((($$0160)) + 1|0);
    $23 = HEAP8[$22>>0]|0;
    switch ($23<<24>>24) {
    case 97: case 119:  {
     break;
    }
    default: {
     $$16 = $0;
     break L1;
    }
    }
    $24 = ($23<<24>>24)==(97);
    $25 = ((($$0160)) + 2|0);
    $26 = ($25|0)==($1|0);
    L8: do {
     if (!($26)) {
      $$0138$off0 = 0;$$1161 = $25;
      while(1) {
       $27 = HEAP8[$$1161>>0]|0;
       $28 = ($27<<24>>24)==(95);
       if ($28) {
        break;
       }
       $29 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($$1161,$1,$2)|0);
       $30 = ($29|0)==($$1161|0);
       $31 = ($29|0)==($1|0);
       $or$cond = $30 | $31;
       $not$or$cond$demorgan = $30 | $31;
       $not$or$cond = $not$or$cond$demorgan ^ 1;
       $$0138$off0$ = $$0138$off0 | $not$or$cond;
       if ($or$cond) {
        break L8;
       } else {
        $$0138$off0 = $$0138$off0$;$$1161 = $29;
       }
      }
      $32 = ((($$1161)) + 1|0);
      $33 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($32,$1,$2)|0);
      $34 = ($33|0)==($32|0);
      $35 = ($33|0)==($1|0);
      $or$cond167 = $34 | $35;
      if (!($or$cond167)) {
       $36 = $33;
       $37 = (($10) - ($36))|0;
       $38 = ($37|0)>(2);
       $39 = HEAP8[$33>>0]|0;
       $40 = ($39<<24>>24)==(112);
       $or$cond223 = $38 & $40;
       L14: do {
        if ($or$cond223) {
         $41 = ((($33)) + 1|0);
         $42 = HEAP8[$41>>0]|0;
         $43 = ($42<<24>>24)==(105);
         if (!($43)) {
          break L8;
         }
         $44 = ((($33)) + 2|0);
         $$3163 = $44;
         while(1) {
          $45 = HEAP8[$$3163>>0]|0;
          $46 = ($45<<24>>24)==(69);
          if ($46) {
           $$0$off0200 = 1;$$4164199 = $$3163;
           break L14;
          }
          $47 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($$3163,$1,$2)|0);
          $48 = ($47|0)==($$3163|0);
          $49 = ($47|0)==($1|0);
          $or$cond168 = $48 | $49;
          if ($or$cond168) {
           break L8;
          } else {
           $$3163 = $47;
          }
         }
        } else {
         $50 = ($39<<24>>24)==(69);
         if ($50) {
          $$0$off0200 = 0;$$4164199 = $33;
         } else {
          break L8;
         }
        }
       } while(0);
       ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
       $$0$i$i = 0;
       while(1) {
        $exitcond$i$i = ($$0$i$i|0)==(3);
        if ($exitcond$i$i) {
         break;
        }
        $51 = (($4) + ($$0$i$i<<2)|0);
        HEAP32[$51>>2] = 0;
        $52 = (($$0$i$i) + 1)|0;
        $$0$i$i = $52;
       }
       L26: do {
        if ($$0$off0200) {
         $53 = HEAP32[$2>>2]|0;
         $54 = ((($2)) + 4|0);
         $55 = HEAP32[$54>>2]|0;
         $56 = ($53|0)==($55|0);
         if ($56) {
          $$1151 = $0;$$4144 = 1;
         } else {
          $57 = ((($55)) + -24|0);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5,$57);
          $58 = ((($4)) + 11|0);
          $59 = HEAP8[$58>>0]|0;
          $60 = ($59<<24>>24)<(0);
          if ($60) {
           $61 = HEAP32[$4>>2]|0;
           HEAP8[$3>>0] = 0;
           __ZNSt3__211char_traitsIcE6assignERcRKc($61,$3);
           $62 = ((($4)) + 4|0);
           HEAP32[$62>>2] = 0;
          } else {
           HEAP8[$3>>0] = 0;
           __ZNSt3__211char_traitsIcE6assignERcRKc($4,$3);
           HEAP8[$58>>0] = 0;
          }
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($4);
          ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
          $$0$i$i$i$i = 0;
          while(1) {
           $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
           if ($exitcond$i$i$i$i) {
            break;
           }
           $63 = (($5) + ($$0$i$i$i$i<<2)|0);
           HEAP32[$63>>2] = 0;
           $64 = (($$0$i$i$i$i) + 1)|0;
           $$0$i$i$i$i = $64;
          }
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
          $65 = HEAP32[$54>>2]|0;
          $66 = ((($65)) + -24|0);
          $67 = $65;
          while(1) {
           $68 = ($67|0)==($66|0);
           if ($68) {
            $$pre$phi218Z2D = $54;$$pre$phiZ2D = $2;$72 = $66;
            label = 31;
            break L26;
           }
           $69 = ((($67)) + -24|0);
           HEAP32[$54>>2] = $69;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($69);
           $$pre$i = HEAP32[$54>>2]|0;
           $67 = $$pre$i;
          }
         }
        } else {
         $$phi$trans$insert = ((($2)) + 4|0);
         $$pre = HEAP32[$$phi$trans$insert>>2]|0;
         $$pre$phi218Z2D = $$phi$trans$insert;$$pre$phiZ2D = $2;$72 = $$pre;
         label = 31;
        }
       } while(0);
       if ((label|0) == 31) {
        $70 = HEAP32[$$pre$phiZ2D>>2]|0;
        $71 = ($70|0)==($72|0);
        if ($71) {
         $$1151 = $0;$$4144 = 1;
        } else {
         $73 = ((($72)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5,$73);
         $74 = HEAP32[$$pre$phi218Z2D>>2]|0;
         $75 = ((($74)) + -24|0);
         $76 = $74;
         while(1) {
          $77 = ($76|0)==($75|0);
          if ($77) {
           break;
          }
          $78 = ((($76)) + -24|0);
          HEAP32[$$pre$phi218Z2D>>2] = $78;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($78);
          $$pre$i170 = HEAP32[$$pre$phi218Z2D>>2]|0;
          $76 = $$pre$i170;
         }
         ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
         $$0$i$i172 = 0;
         while(1) {
          $exitcond$i$i173 = ($$0$i$i172|0)==(3);
          if ($exitcond$i$i173) {
           break;
          }
          $79 = (($6) + ($$0$i$i172<<2)|0);
          HEAP32[$79>>2] = 0;
          $80 = (($$0$i$i172) + 1)|0;
          $$0$i$i172 = $80;
         }
         L52: do {
          if ($$0138$off0) {
           $81 = HEAP32[$$pre$phiZ2D>>2]|0;
           $82 = ($81|0)==($75|0);
           if ($82) {
            $$0150 = $0;$$3143 = 1;
           } else {
            $83 = ((($74)) + -48|0);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($7,$83);
            $84 = ((($6)) + 11|0);
            $85 = HEAP8[$84>>0]|0;
            $86 = ($85<<24>>24)<(0);
            if ($86) {
             $87 = HEAP32[$6>>2]|0;
             HEAP8[$3>>0] = 0;
             __ZNSt3__211char_traitsIcE6assignERcRKc($87,$3);
             $88 = ((($6)) + 4|0);
             HEAP32[$88>>2] = 0;
            } else {
             HEAP8[$3>>0] = 0;
             __ZNSt3__211char_traitsIcE6assignERcRKc($6,$3);
             HEAP8[$84>>0] = 0;
            }
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($6);
            ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
            $$0$i$i$i$i177 = 0;
            while(1) {
             $exitcond$i$i$i$i178 = ($$0$i$i$i$i177|0)==(3);
             if ($exitcond$i$i$i$i178) {
              break;
             }
             $89 = (($7) + ($$0$i$i$i$i177<<2)|0);
             HEAP32[$89>>2] = 0;
             $90 = (($$0$i$i$i$i177) + 1)|0;
             $$0$i$i$i$i177 = $90;
            }
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
            $91 = HEAP32[$$pre$phi218Z2D>>2]|0;
            $92 = ((($91)) + -24|0);
            $93 = $91;
            while(1) {
             $94 = ($93|0)==($92|0);
             if ($94) {
              label = 49;
              break L52;
             }
             $95 = ((($93)) + -24|0);
             HEAP32[$$pre$phi218Z2D>>2] = $95;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($95);
             $$pre$i180 = HEAP32[$$pre$phi218Z2D>>2]|0;
             $93 = $$pre$i180;
            }
           }
          } else {
           label = 49;
          }
         } while(0);
         if ((label|0) == 49) {
          ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
          $$0$i$i182 = 0;
          while(1) {
           $exitcond$i$i183 = ($$0$i$i182|0)==(3);
           if ($exitcond$i$i183) {
            break;
           }
           $96 = (($3) + ($$0$i$i182<<2)|0);
           HEAP32[$96>>2] = 0;
           $97 = (($$0$i$i182) + 1)|0;
           $$0$i$i182 = $97;
          }
          if ($$0159$off0) {
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($3,3670);
          }
          if ($24) {
           (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3,3880)|0);
          } else {
           (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3,3630)|0);
          }
          if ($$0138$off0) {
           __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($8,3598,$6);
           $98 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8,3884)|0);
           ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;
           $$0$i$i$i = 0;
           while(1) {
            $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
            if ($exitcond$i$i$i) {
             break;
            }
            $99 = (($8) + ($$0$i$i$i<<2)|0);
            HEAP32[$99>>2] = 0;
            $100 = (($$0$i$i$i) + 1)|0;
            $$0$i$i$i = $100;
           }
           $101 = ((($7)) + 11|0);
           $102 = HEAP8[$101>>0]|0;
           $103 = ($102<<24>>24)<(0);
           $104 = HEAP32[$7>>2]|0;
           $105 = ((($7)) + 4|0);
           $106 = HEAP32[$105>>2]|0;
           $107 = $102&255;
           $108 = $103 ? $104 : $7;
           $109 = $103 ? $106 : $107;
           (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($3,$108,$109)|0);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
          }
          $110 = ((($5)) + 11|0);
          $111 = HEAP8[$110>>0]|0;
          $112 = ($111<<24>>24)<(0);
          $113 = HEAP32[$5>>2]|0;
          $114 = ((($5)) + 4|0);
          $115 = HEAP32[$114>>2]|0;
          $116 = $111&255;
          $117 = $112 ? $113 : $5;
          $118 = $112 ? $115 : $116;
          (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($3,$117,$118)|0);
          if ($$0$off0200) {
           __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($8,3593,$4);
           $119 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8,3596)|0);
           ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;
           $$0$i$i$i189 = 0;
           while(1) {
            $exitcond$i$i$i190 = ($$0$i$i$i189|0)==(3);
            if ($exitcond$i$i$i190) {
             break;
            }
            $120 = (($8) + ($$0$i$i$i189<<2)|0);
            HEAP32[$120>>2] = 0;
            $121 = (($$0$i$i$i189) + 1)|0;
            $$0$i$i$i189 = $121;
           }
           $122 = ((($7)) + 11|0);
           $123 = HEAP8[$122>>0]|0;
           $124 = ($123<<24>>24)<(0);
           $125 = HEAP32[$7>>2]|0;
           $126 = ((($7)) + 4|0);
           $127 = HEAP32[$126>>2]|0;
           $128 = $123&255;
           $129 = $124 ? $125 : $7;
           $130 = $124 ? $127 : $128;
           (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($3,$129,$130)|0);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
          }
          ;HEAP32[$9>>2]=HEAP32[$3>>2]|0;HEAP32[$9+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$3+8>>2]|0;
          $$0$i$i195 = 0;
          while(1) {
           $exitcond$i$i196 = ($$0$i$i195|0)==(3);
           if ($exitcond$i$i196) {
            break;
           }
           $131 = (($3) + ($$0$i$i195<<2)|0);
           HEAP32[$131>>2] = 0;
           $132 = (($$0$i$i195) + 1)|0;
           $$0$i$i195 = $132;
          }
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($7,$9);
          $133 = HEAP32[$$pre$phi218Z2D>>2]|0;
          $134 = ((($2)) + 8|0);
          $135 = HEAP32[$134>>2]|0;
          $136 = ($133>>>0)<($135>>>0);
          if ($136) {
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($133,$7);
           $137 = HEAP32[$$pre$phi218Z2D>>2]|0;
           $138 = ((($137)) + 24|0);
           HEAP32[$$pre$phi218Z2D>>2] = $138;
          } else {
           __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$7);
          }
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
          $139 = ((($$4164199)) + 1|0);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
          $$0150 = $139;$$3143 = 0;
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
         $$1151 = $$0150;$$4144 = $$3143;
        }
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
       $cond = ($$4144|0)==(0);
       if ($cond) {
        $$16 = $$1151;
        break L1;
       }
      }
     }
    } while(0);
    $$16 = $0;
   } else {
    $$16 = $0;
   }
  } else {
   $$16 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$16|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_125parse_noexcept_expressionINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i18 = 0, $$016 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $3 = sp + 36|0;
 $4 = sp + 24|0;
 $5 = sp + 12|0;
 $6 = sp;
 $7 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
 $8 = ($7|0)==($0|0);
 if ($8) {
  $$016 = $0;
 } else {
  $9 = HEAP32[$2>>2]|0;
  $10 = ((($2)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($9|0)==($11|0);
  if ($12) {
   $$016 = $0;
  } else {
   $13 = ((($11)) + -24|0);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$13);
   $14 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6,0,3869)|0);
   ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
   $$0$i$i$i = 0;
   while(1) {
    $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
    if ($exitcond$i$i$i) {
     break;
    }
    $15 = (($6) + ($$0$i$i$i<<2)|0);
    HEAP32[$15>>2] = 0;
    $16 = (($$0$i$i$i) + 1)|0;
    $$0$i$i$i = $16;
   }
   $17 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5,3596)|0);
   ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
   $$0$i$i$i18 = 0;
   while(1) {
    $exitcond$i$i$i19 = ($$0$i$i$i18|0)==(3);
    if ($exitcond$i$i$i19) {
     break;
    }
    $18 = (($5) + ($$0$i$i$i18<<2)|0);
    HEAP32[$18>>2] = 0;
    $19 = (($$0$i$i$i18) + 1)|0;
    $$0$i$i$i18 = $19;
   }
   $20 = HEAP32[$10>>2]|0;
   $21 = ((($20)) + -24|0);
   $22 = ((($21)) + 11|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = ($23<<24>>24)<(0);
   if ($24) {
    $25 = HEAP32[$21>>2]|0;
    HEAP8[$3>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($25,$3);
    $26 = ((($20)) + -20|0);
    HEAP32[$26>>2] = 0;
   } else {
    HEAP8[$3>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($21,$3);
    HEAP8[$22>>0] = 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($21);
   ;HEAP32[$21>>2]=HEAP32[$4>>2]|0;HEAP32[$21+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$21+8>>2]=HEAP32[$4+8>>2]|0;
   $$0$i$i$i$i = 0;
   while(1) {
    $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
    if ($exitcond$i$i$i$i) {
     break;
    }
    $27 = (($4) + ($$0$i$i$i$i<<2)|0);
    HEAP32[$27>>2] = 0;
    $28 = (($$0$i$i$i$i) + 1)|0;
    $$0$i$i$i$i = $28;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
   $$016 = $7;
  }
 }
 STACKTOP = sp;return ($$016|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_116parse_arrow_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$3 = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = $1;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = ($6|0)>(2);
 if ($7) {
  $8 = HEAP8[$0>>0]|0;
  $9 = ($8<<24>>24)==(112);
  if ($9) {
   $10 = ((($0)) + 1|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = ($11<<24>>24)==(116);
   if ($12) {
    $13 = ((($0)) + 2|0);
    $14 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($13,$1,$2)|0);
    $15 = ($14|0)==($13|0);
    if ($15) {
     $$3 = $0;
    } else {
     $16 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($14,$1,$2)|0);
     $17 = ($16|0)==($14|0);
     if ($17) {
      $$3 = $0;
     } else {
      $18 = ((($2)) + 4|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = HEAP32[$2>>2]|0;
      $21 = (($19) - ($20))|0;
      $22 = (($21|0) / 24)&-1;
      $23 = ($22>>>0)<(2);
      if ($23) {
       $$3 = $0;
      } else {
       $24 = $19;
       $25 = ((($24)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$25);
       $26 = HEAP32[$18>>2]|0;
       $27 = ((($26)) + -24|0);
       $28 = $26;
       while(1) {
        $29 = ($28|0)==($27|0);
        if ($29) {
         break;
        }
        $30 = ((($28)) + -24|0);
        HEAP32[$18>>2] = $30;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($30);
        $$pre$i = HEAP32[$18>>2]|0;
        $28 = $$pre$i;
       }
       $31 = ((($26)) + -48|0);
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($31,3866)|0);
       $32 = HEAP32[$18>>2]|0;
       $33 = ((($32)) + -24|0);
       $34 = ((($3)) + 11|0);
       $35 = HEAP8[$34>>0]|0;
       $36 = ($35<<24>>24)<(0);
       $37 = HEAP32[$3>>2]|0;
       $38 = ((($3)) + 4|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = $35&255;
       $41 = $36 ? $37 : $3;
       $42 = $36 ? $39 : $40;
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($33,$41,$42)|0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$3 = $16;
      }
     }
    }
   } else {
    $$3 = $0;
   }
  } else {
   $$3 = $0;
  }
 } else {
  $$3 = $0;
 }
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_127parse_reinterpret_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i47 = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$341 = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i48 = 0, $exitcond$i$i$i51 = 0, $exitcond$i$i$i54 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $3 = sp + 88|0;
 $4 = sp + 64|0;
 $5 = sp + 36|0;
 $6 = sp + 48|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 $10 = $1;
 $11 = $0;
 $12 = (($10) - ($11))|0;
 $13 = ($12|0)>(2);
 if ($13) {
  $14 = HEAP8[$0>>0]|0;
  $15 = ($14<<24>>24)==(114);
  if ($15) {
   $16 = ((($0)) + 1|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = ($17<<24>>24)==(99);
   if ($18) {
    $19 = ((($0)) + 2|0);
    $20 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($19,$1,$2)|0);
    $21 = ($20|0)==($19|0);
    if ($21) {
     $$341 = $0;
    } else {
     $22 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($20,$1,$2)|0);
     $23 = ($22|0)==($20|0);
     if ($23) {
      $$341 = $0;
     } else {
      $24 = ((($2)) + 4|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = HEAP32[$2>>2]|0;
      $27 = (($25) - ($26))|0;
      $28 = (($27|0) / 24)&-1;
      $29 = ($28>>>0)<(2);
      if ($29) {
       $$341 = $0;
      } else {
       $30 = $25;
       $31 = ((($30)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$31);
       $32 = HEAP32[$24>>2]|0;
       $33 = ((($32)) + -24|0);
       $34 = $32;
       while(1) {
        $35 = ($34|0)==($33|0);
        if ($35) {
         break;
        }
        $36 = ((($34)) + -24|0);
        HEAP32[$24>>2] = $36;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($36);
        $$pre$i = HEAP32[$24>>2]|0;
        $34 = $$pre$i;
       }
       $37 = ((($32)) + -48|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9,$37);
       $38 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($9,0,3848)|0);
       ;HEAP32[$8>>2]=HEAP32[$9>>2]|0;HEAP32[$8+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$9+8>>2]|0;
       $$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $39 = (($9) + ($$0$i$i$i<<2)|0);
        HEAP32[$39>>2] = 0;
        $40 = (($$0$i$i$i) + 1)|0;
        $$0$i$i$i = $40;
       }
       $41 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8,3845)|0);
       ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;
       $$0$i$i$i47 = 0;
       while(1) {
        $exitcond$i$i$i48 = ($$0$i$i$i47|0)==(3);
        if ($exitcond$i$i$i48) {
         break;
        }
        $42 = (($8) + ($$0$i$i$i47<<2)|0);
        HEAP32[$42>>2] = 0;
        $43 = (($$0$i$i$i47) + 1)|0;
        $$0$i$i$i47 = $43;
       }
       $44 = ((($3)) + 11|0);
       $45 = HEAP8[$44>>0]|0;
       $46 = ($45<<24>>24)<(0);
       $47 = HEAP32[$3>>2]|0;
       $48 = ((($3)) + 4|0);
       $49 = HEAP32[$48>>2]|0;
       $50 = $45&255;
       $51 = $46 ? $47 : $3;
       $52 = $46 ? $49 : $50;
       $53 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($7,$51,$52)|0);
       ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
       $$0$i$i$i50 = 0;
       while(1) {
        $exitcond$i$i$i51 = ($$0$i$i$i50|0)==(3);
        if ($exitcond$i$i$i51) {
         break;
        }
        $54 = (($7) + ($$0$i$i$i50<<2)|0);
        HEAP32[$54>>2] = 0;
        $55 = (($$0$i$i$i50) + 1)|0;
        $$0$i$i$i50 = $55;
       }
       $56 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6,3596)|0);
       ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
       $$0$i$i$i53 = 0;
       while(1) {
        $exitcond$i$i$i54 = ($$0$i$i$i53|0)==(3);
        if ($exitcond$i$i$i54) {
         break;
        }
        $57 = (($6) + ($$0$i$i$i53<<2)|0);
        HEAP32[$57>>2] = 0;
        $58 = (($$0$i$i$i53) + 1)|0;
        $$0$i$i$i53 = $58;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4,$5);
       $59 = HEAP32[$24>>2]|0;
       $60 = ((($59)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($60,$4);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$341 = $22;
      }
     }
    }
   } else {
    $$341 = $0;
   }
  } else {
   $$341 = $0;
  }
 } else {
  $$341 = $0;
 }
 STACKTOP = sp;return ($$341|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_122parse_static_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i47 = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$341 = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i48 = 0, $exitcond$i$i$i51 = 0, $exitcond$i$i$i54 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $3 = sp + 88|0;
 $4 = sp + 64|0;
 $5 = sp + 36|0;
 $6 = sp + 48|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 $10 = $1;
 $11 = $0;
 $12 = (($10) - ($11))|0;
 $13 = ($12|0)>(2);
 if ($13) {
  $14 = HEAP8[$0>>0]|0;
  $15 = ($14<<24>>24)==(115);
  if ($15) {
   $16 = ((($0)) + 1|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = ($17<<24>>24)==(99);
   if ($18) {
    $19 = ((($0)) + 2|0);
    $20 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($19,$1,$2)|0);
    $21 = ($20|0)==($19|0);
    if ($21) {
     $$341 = $0;
    } else {
     $22 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($20,$1,$2)|0);
     $23 = ($22|0)==($20|0);
     if ($23) {
      $$341 = $0;
     } else {
      $24 = ((($2)) + 4|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = HEAP32[$2>>2]|0;
      $27 = (($25) - ($26))|0;
      $28 = (($27|0) / 24)&-1;
      $29 = ($28>>>0)<(2);
      if ($29) {
       $$341 = $0;
      } else {
       $30 = $25;
       $31 = ((($30)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$31);
       $32 = HEAP32[$24>>2]|0;
       $33 = ((($32)) + -24|0);
       $34 = $32;
       while(1) {
        $35 = ($34|0)==($33|0);
        if ($35) {
         break;
        }
        $36 = ((($34)) + -24|0);
        HEAP32[$24>>2] = $36;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($36);
        $$pre$i = HEAP32[$24>>2]|0;
        $34 = $$pre$i;
       }
       $37 = ((($32)) + -48|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9,$37);
       $38 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($9,0,3832)|0);
       ;HEAP32[$8>>2]=HEAP32[$9>>2]|0;HEAP32[$8+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$9+8>>2]|0;
       $$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $39 = (($9) + ($$0$i$i$i<<2)|0);
        HEAP32[$39>>2] = 0;
        $40 = (($$0$i$i$i) + 1)|0;
        $$0$i$i$i = $40;
       }
       $41 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8,3845)|0);
       ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;
       $$0$i$i$i47 = 0;
       while(1) {
        $exitcond$i$i$i48 = ($$0$i$i$i47|0)==(3);
        if ($exitcond$i$i$i48) {
         break;
        }
        $42 = (($8) + ($$0$i$i$i47<<2)|0);
        HEAP32[$42>>2] = 0;
        $43 = (($$0$i$i$i47) + 1)|0;
        $$0$i$i$i47 = $43;
       }
       $44 = ((($3)) + 11|0);
       $45 = HEAP8[$44>>0]|0;
       $46 = ($45<<24>>24)<(0);
       $47 = HEAP32[$3>>2]|0;
       $48 = ((($3)) + 4|0);
       $49 = HEAP32[$48>>2]|0;
       $50 = $45&255;
       $51 = $46 ? $47 : $3;
       $52 = $46 ? $49 : $50;
       $53 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($7,$51,$52)|0);
       ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
       $$0$i$i$i50 = 0;
       while(1) {
        $exitcond$i$i$i51 = ($$0$i$i$i50|0)==(3);
        if ($exitcond$i$i$i51) {
         break;
        }
        $54 = (($7) + ($$0$i$i$i50<<2)|0);
        HEAP32[$54>>2] = 0;
        $55 = (($$0$i$i$i50) + 1)|0;
        $$0$i$i$i50 = $55;
       }
       $56 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6,3596)|0);
       ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
       $$0$i$i$i53 = 0;
       while(1) {
        $exitcond$i$i$i54 = ($$0$i$i$i53|0)==(3);
        if ($exitcond$i$i$i54) {
         break;
        }
        $57 = (($6) + ($$0$i$i$i53<<2)|0);
        HEAP32[$57>>2] = 0;
        $58 = (($$0$i$i$i53) + 1)|0;
        $$0$i$i$i53 = $58;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4,$5);
       $59 = HEAP32[$24>>2]|0;
       $60 = ((($59)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($60,$4);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$341 = $22;
      }
     }
    }
   } else {
    $$341 = $0;
   }
  } else {
   $$341 = $0;
  }
 } else {
  $$341 = $0;
 }
 STACKTOP = sp;return ($$341|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_120parse_pack_expansionINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $0;
 $5 = (($3) - ($4))|0;
 $6 = ($5|0)>(2);
 if ($6) {
  $7 = HEAP8[$0>>0]|0;
  $8 = ($7<<24>>24)==(115);
  if ($8) {
   $9 = ((($0)) + 1|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = ($10<<24>>24)==(112);
   if ($11) {
    $12 = ((($0)) + 2|0);
    $13 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($12,$1,$2)|0);
    $14 = ($13|0)==($12|0);
    $$ = $14 ? $0 : $13;
    $$1 = $$;
   } else {
    $$1 = $0;
   }
  } else {
   $$1 = $0;
  }
 } else {
  $$1 = $0;
 }
 return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_type_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i27 = 0, $$124 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $3 = sp + 40|0;
 $4 = sp + 12|0;
 $5 = sp + 24|0;
 $6 = sp;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)>(2);
 if ($10) {
  $11 = HEAP8[$0>>0]|0;
  $12 = ($11<<24>>24)==(115);
  if ($12) {
   $13 = ((($0)) + 1|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = ($14<<24>>24)==(116);
   if ($15) {
    $16 = ((($0)) + 2|0);
    $17 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($16,$1,$2)|0);
    $18 = ($17|0)==($16|0);
    if ($18) {
     $$124 = $0;
    } else {
     $19 = HEAP32[$2>>2]|0;
     $20 = ((($2)) + 4|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19|0)==($21|0);
     if ($22) {
      $$124 = $0;
     } else {
      $23 = ((($21)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$23);
      $24 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6,0,3823)|0);
      ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
      $$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $25 = (($6) + ($$0$i$i$i<<2)|0);
       HEAP32[$25>>2] = 0;
       $26 = (($$0$i$i$i) + 1)|0;
       $$0$i$i$i = $26;
      }
      $27 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5,3596)|0);
      ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
      $$0$i$i$i27 = 0;
      while(1) {
       $exitcond$i$i$i28 = ($$0$i$i$i27|0)==(3);
       if ($exitcond$i$i$i28) {
        break;
       }
       $28 = (($5) + ($$0$i$i$i27<<2)|0);
       HEAP32[$28>>2] = 0;
       $29 = (($$0$i$i$i27) + 1)|0;
       $$0$i$i$i27 = $29;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$4);
      $30 = HEAP32[$20>>2]|0;
      $31 = ((($30)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($31,$3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      $$124 = $17;
     }
    }
   } else {
    $$124 = $0;
   }
  } else {
   $$124 = $0;
  }
 } else {
  $$124 = $0;
 }
 STACKTOP = sp;return ($$124|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_expr_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i27 = 0, $$124 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $3 = sp + 40|0;
 $4 = sp + 12|0;
 $5 = sp + 24|0;
 $6 = sp;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)>(2);
 if ($10) {
  $11 = HEAP8[$0>>0]|0;
  $12 = ($11<<24>>24)==(115);
  if ($12) {
   $13 = ((($0)) + 1|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = ($14<<24>>24)==(122);
   if ($15) {
    $16 = ((($0)) + 2|0);
    $17 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($16,$1,$2)|0);
    $18 = ($17|0)==($16|0);
    if ($18) {
     $$124 = $0;
    } else {
     $19 = HEAP32[$2>>2]|0;
     $20 = ((($2)) + 4|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19|0)==($21|0);
     if ($22) {
      $$124 = $0;
     } else {
      $23 = ((($21)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$23);
      $24 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6,0,3823)|0);
      ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
      $$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $25 = (($6) + ($$0$i$i$i<<2)|0);
       HEAP32[$25>>2] = 0;
       $26 = (($$0$i$i$i) + 1)|0;
       $$0$i$i$i = $26;
      }
      $27 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5,3596)|0);
      ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
      $$0$i$i$i27 = 0;
      while(1) {
       $exitcond$i$i$i28 = ($$0$i$i$i27|0)==(3);
       if ($exitcond$i$i$i28) {
        break;
       }
       $28 = (($5) + ($$0$i$i$i27<<2)|0);
       HEAP32[$28>>2] = 0;
       $29 = (($$0$i$i$i27) + 1)|0;
       $$0$i$i$i27 = $29;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$4);
      $30 = HEAP32[$20>>2]|0;
      $31 = ((($30)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($31,$3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      $$124 = $17;
     }
    }
   } else {
    $$124 = $0;
   }
  } else {
   $$124 = $0;
  }
 } else {
  $$124 = $0;
 }
 STACKTOP = sp;return ($$124|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_128parse_sizeof_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i52 = 0, $$045 = 0, $$045$in = 0, $$046 = 0, $$148 = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $exitcond$i$i = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $3 = sp + 40|0;
 $4 = sp + 24|0;
 $5 = sp;
 $6 = sp + 12|0;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)>(2);
 if ($10) {
  $11 = HEAP8[$0>>0]|0;
  $12 = ($11<<24>>24)==(115);
  if ($12) {
   $13 = ((($0)) + 1|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = ($14<<24>>24)==(90);
   if ($15) {
    $16 = ((($0)) + 2|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = ($17<<24>>24)==(84);
    if ($18) {
     $19 = ((($2)) + 4|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = HEAP32[$2>>2]|0;
     $22 = (($20) - ($21))|0;
     $23 = (($22|0) / 24)&-1;
     $24 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($16,$1,$2)|0);
     $25 = HEAP32[$19>>2]|0;
     $26 = HEAP32[$2>>2]|0;
     $27 = (($25) - ($26))|0;
     $28 = (($27|0) / 24)&-1;
     $29 = ($24|0)==($16|0);
     if ($29) {
      $$148 = $0;
     } else {
      ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $30 = (__ZNSt3__211char_traitsIcE6lengthEPKc(3809)|0);
      $31 = ($30>>>0)>(4294967279);
      if ($31) {
       __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
       // unreachable;
      }
      $32 = ($30>>>0)<(11);
      if ($32) {
       $33 = $30&255;
       $34 = ((($4)) + 11|0);
       HEAP8[$34>>0] = $33;
       $$0$i$i = $4;
      } else {
       $35 = (($30) + 16)|0;
       $36 = $35 & -16;
       $37 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($36)|0);
       HEAP32[$4>>2] = $37;
       $38 = $36 | -2147483648;
       $39 = ((($4)) + 8|0);
       HEAP32[$39>>2] = $38;
       $40 = ((($4)) + 4|0);
       HEAP32[$40>>2] = $30;
       $$0$i$i = $37;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i,3809,$30)|0);
      $41 = (($$0$i$i) + ($30)|0);
      HEAP8[$3>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($41,$3);
      $42 = ($23|0)==($28|0);
      L14: do {
       if (!($42)) {
        $43 = HEAP32[$2>>2]|0;
        $44 = (($43) + (($23*24)|0)|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$44);
        $45 = ((($3)) + 11|0);
        $46 = HEAP8[$45>>0]|0;
        $47 = ($46<<24>>24)<(0);
        $48 = HEAP32[$3>>2]|0;
        $49 = ((($3)) + 4|0);
        $50 = HEAP32[$49>>2]|0;
        $51 = $46&255;
        $52 = $47 ? $48 : $3;
        $53 = $47 ? $50 : $51;
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($4,$52,$53)|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
        $54 = ((($3)) + 11|0);
        $55 = ((($3)) + 4|0);
        $$045$in = $23;
        while(1) {
         $$045 = (($$045$in) + 1)|0;
         $56 = ($$045|0)==($28|0);
         if ($56) {
          break L14;
         }
         $57 = HEAP32[$2>>2]|0;
         $58 = (($57) + (($$045*24)|0)|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5,$58);
         $59 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($5,0,3820)|0);
         ;HEAP32[$3>>2]=HEAP32[$5>>2]|0;HEAP32[$3+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$5+8>>2]|0;
         $$0$i$i$i = 0;
         while(1) {
          $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
          if ($exitcond$i$i$i) {
           break;
          }
          $60 = (($5) + ($$0$i$i$i<<2)|0);
          HEAP32[$60>>2] = 0;
          $61 = (($$0$i$i$i) + 1)|0;
          $$0$i$i$i = $61;
         }
         $62 = HEAP8[$54>>0]|0;
         $63 = ($62<<24>>24)<(0);
         $64 = HEAP32[$3>>2]|0;
         $65 = HEAP32[$55>>2]|0;
         $66 = $62&255;
         $67 = $63 ? $64 : $3;
         $68 = $63 ? $65 : $66;
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($4,$67,$68)|0);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
         $$045$in = $$045;
        }
       }
      } while(0);
      (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4,3596)|0);
      $$046 = $28;
      while(1) {
       $69 = ($$046|0)==($23|0);
       if ($69) {
        break;
       }
       $70 = HEAP32[$19>>2]|0;
       $71 = ((($70)) + -24|0);
       $72 = $70;
       while(1) {
        $73 = ($72|0)==($71|0);
        if ($73) {
         break;
        }
        $74 = ((($72)) + -24|0);
        HEAP32[$19>>2] = $74;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($74);
        $$pre$i = HEAP32[$19>>2]|0;
        $72 = $$pre$i;
       }
       $75 = (($$046) + -1)|0;
       $$046 = $75;
      }
      ;HEAP32[$6>>2]=HEAP32[$4>>2]|0;HEAP32[$6+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$4+8>>2]|0;
      $$0$i$i52 = 0;
      while(1) {
       $exitcond$i$i = ($$0$i$i52|0)==(3);
       if ($exitcond$i$i) {
        break;
       }
       $76 = (($4) + ($$0$i$i52<<2)|0);
       HEAP32[$76>>2] = 0;
       $77 = (($$0$i$i52) + 1)|0;
       $$0$i$i52 = $77;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$6);
      $78 = HEAP32[$19>>2]|0;
      $79 = ((($2)) + 8|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = ($78>>>0)<($80>>>0);
      if ($81) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($78,$3);
       $82 = HEAP32[$19>>2]|0;
       $83 = ((($82)) + 24|0);
       HEAP32[$19>>2] = $83;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $$148 = $24;
     }
    } else {
     $$148 = $0;
    }
   } else {
    $$148 = $0;
   }
  } else {
   $$148 = $0;
  }
 } else {
  $$148 = $0;
 }
 STACKTOP = sp;return ($$148|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_137parse_sizeof_function_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i28 = 0, $$125 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i29 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $3 = sp + 40|0;
 $4 = sp + 12|0;
 $5 = sp + 24|0;
 $6 = sp;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)>(2);
 if ($10) {
  $11 = HEAP8[$0>>0]|0;
  $12 = ($11<<24>>24)==(115);
  if ($12) {
   $13 = ((($0)) + 1|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = ($14<<24>>24)==(90);
   if ($15) {
    $16 = ((($0)) + 2|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = ($17<<24>>24)==(102);
    if ($18) {
     $19 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($16,$1,$2)|0);
     $20 = ($19|0)==($16|0);
     if ($20) {
      $$125 = $0;
     } else {
      $21 = HEAP32[$2>>2]|0;
      $22 = ((($2)) + 4|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ($21|0)==($23|0);
      if ($24) {
       $$125 = $0;
      } else {
       $25 = ((($23)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$25);
       $26 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6,0,3809)|0);
       ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
       $$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $27 = (($6) + ($$0$i$i$i<<2)|0);
        HEAP32[$27>>2] = 0;
        $28 = (($$0$i$i$i) + 1)|0;
        $$0$i$i$i = $28;
       }
       $29 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5,3596)|0);
       ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
       $$0$i$i$i28 = 0;
       while(1) {
        $exitcond$i$i$i29 = ($$0$i$i$i28|0)==(3);
        if ($exitcond$i$i$i29) {
         break;
        }
        $30 = (($5) + ($$0$i$i$i28<<2)|0);
        HEAP32[$30>>2] = 0;
        $31 = (($$0$i$i$i28) + 1)|0;
        $$0$i$i$i28 = $31;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$4);
       $32 = HEAP32[$22>>2]|0;
       $33 = ((($32)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($33,$3);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
       $$125 = $19;
      }
     }
    } else {
     $$125 = $0;
    }
   } else {
    $$125 = $0;
   }
  } else {
   $$125 = $0;
  }
 } else {
  $$125 = $0;
 }
 STACKTOP = sp;return ($$125|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_117parse_typeid_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i30 = 0, $$025 = 0, $$127 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i31 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $3 = sp + 40|0;
 $4 = sp + 12|0;
 $5 = sp + 24|0;
 $6 = sp;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)>(2);
 L1: do {
  if ($10) {
   $11 = HEAP8[$0>>0]|0;
   $12 = ($11<<24>>24)==(116);
   if ($12) {
    $13 = ((($0)) + 1|0);
    $14 = HEAP8[$13>>0]|0;
    switch ($14<<24>>24) {
    case 105: case 101:  {
     break;
    }
    default: {
     $$127 = $0;
     break L1;
    }
    }
    $15 = ($14<<24>>24)==(101);
    $16 = ((($0)) + 2|0);
    if ($15) {
     $17 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($16,$1,$2)|0);
     $$025 = $17;
    } else {
     $18 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($16,$1,$2)|0);
     $$025 = $18;
    }
    $19 = ($$025|0)==($16|0);
    if ($19) {
     $$127 = $0;
    } else {
     $20 = HEAP32[$2>>2]|0;
     $21 = ((($2)) + 4|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ($20|0)==($22|0);
     if ($23) {
      $$127 = $0;
     } else {
      $24 = ((($22)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$24);
      $25 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6,0,3801)|0);
      ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
      $$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $26 = (($6) + ($$0$i$i$i<<2)|0);
       HEAP32[$26>>2] = 0;
       $27 = (($$0$i$i$i) + 1)|0;
       $$0$i$i$i = $27;
      }
      $28 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5,3596)|0);
      ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
      $$0$i$i$i30 = 0;
      while(1) {
       $exitcond$i$i$i31 = ($$0$i$i$i30|0)==(3);
       if ($exitcond$i$i$i31) {
        break;
       }
       $29 = (($5) + ($$0$i$i$i30<<2)|0);
       HEAP32[$29>>2] = 0;
       $30 = (($$0$i$i$i30) + 1)|0;
       $$0$i$i$i30 = $30;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$4);
      $31 = HEAP32[$21>>2]|0;
      $32 = ((($31)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($32,$3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      $$127 = $$025;
     }
    }
   } else {
    $$127 = $0;
   }
  } else {
   $$127 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$127|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $3 = ((($0)) + 11|0);
 HEAP8[$3>>0] = 5;
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($0,$1,5)|0);
 $4 = ((($0)) + 5|0);
 HEAP8[$2>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($4,$2);
 $5 = ((($0)) + 12|0);
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $6 = (($5) + ($$0$i$i<<2)|0);
  HEAP32[$6>>2] = 0;
  $7 = (($$0$i$i) + 1)|0;
  $$0$i$i = $7;
 }
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_116parse_throw_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $3 = sp + 24|0;
 $4 = sp;
 $5 = sp + 12|0;
 $6 = $1;
 $7 = $0;
 $8 = (($6) - ($7))|0;
 $9 = ($8|0)>(2);
 if ($9) {
  $10 = HEAP8[$0>>0]|0;
  $11 = ($10<<24>>24)==(116);
  if ($11) {
   $12 = ((($0)) + 1|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = ($13<<24>>24)==(119);
   if ($14) {
    $15 = ((($0)) + 2|0);
    $16 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($15,$1,$2)|0);
    $17 = ($16|0)==($15|0);
    if ($17) {
     $$1 = $0;
    } else {
     $18 = HEAP32[$2>>2]|0;
     $19 = ((($2)) + 4|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $$1 = $0;
     } else {
      $22 = ((($20)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5,$22);
      $23 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($5,0,3794)|0);
      ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
      $$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $24 = (($5) + ($$0$i$i$i<<2)|0);
       HEAP32[$24>>2] = 0;
       $25 = (($$0$i$i$i) + 1)|0;
       $$0$i$i$i = $25;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$4);
      $26 = HEAP32[$19>>2]|0;
      $27 = ((($26)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($27,$3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      $$1 = $16;
     }
    }
   } else {
    $$1 = $0;
   }
  } else {
   $$1 = $0;
  }
 } else {
  $$1 = $0;
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIcE6lengthEPKc($1)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($0,$1,$2);
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 2147483647;
  $phitmp$i = (($9) + -1)|0;
  $10 = $phitmp$i;
 } else {
  $10 = 10;
 }
 $11 = ($10>>>0)<($2>>>0);
 do {
  if ($11) {
   if ($6) {
    $19 = ((($0)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $23 = $20;
   } else {
    $21 = $5&255;
    $23 = $21;
   }
   $22 = (($2) - ($10))|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$10,$22,$23,0,$23,$2,$1);
  } else {
   if ($6) {
    $12 = HEAP32[$0>>2]|0;
    $13 = $12;
   } else {
    $13 = $0;
   }
   (__ZNSt3__211char_traitsIcE4moveEPcPKcj($13,$1,$2)|0);
   $14 = (($13) + ($2)|0);
   HEAP8[$3>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($14,$3);
   $15 = HEAP8[$4>>0]|0;
   $16 = ($15<<24>>24)<(0);
   if ($16) {
    $17 = ((($0)) + 4|0);
    HEAP32[$17>>2] = $2;
    break;
   } else {
    $18 = $2&255;
    HEAP8[$4>>0] = $18;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__211char_traitsIcE4moveEPcPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _memmove(($0|0),($1|0),($2|0))|0;
 }
 return ($0|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$2 = 0, $$pre$i = 0, $$pre$i68 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = $1;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = ($6|0)>(1);
 L1: do {
  if ($7) {
   $8 = HEAP8[$0>>0]|0;
   switch ($8<<24>>24) {
   case 100: case 111:  {
    $9 = ((($0)) + 1|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(110);
    if ($11) {
     $12 = ($8<<24>>24)==(111);
     $13 = ((($0)) + 2|0);
     if (!($12)) {
      $41 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_destructor_nameINS0_2DbEEEPKcS4_S4_RT_($13,$1,$2)|0);
      $42 = ($41|0)==($13|0);
      $$ = $42 ? $0 : $41;
      $$2 = $$;
      break L1;
     }
     $14 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($13,$1,$2)|0);
     $15 = ($14|0)==($13|0);
     if ($15) {
      $$2 = $0;
      break L1;
     }
     $16 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($14,$1,$2)|0);
     $17 = ($16|0)==($14|0);
     if ($17) {
      $$2 = $14;
      break L1;
     }
     $18 = ((($2)) + 4|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = HEAP32[$2>>2]|0;
     $21 = (($19) - ($20))|0;
     $22 = (($21|0) / 24)&-1;
     $23 = ($22>>>0)<(2);
     if ($23) {
      $$2 = $16;
      break L1;
     }
     $24 = $19;
     $25 = ((($24)) + -24|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$25);
     $26 = HEAP32[$18>>2]|0;
     $27 = ((($26)) + -24|0);
     $28 = $26;
     while(1) {
      $29 = ($28|0)==($27|0);
      if ($29) {
       break;
      }
      $30 = ((($28)) + -24|0);
      HEAP32[$18>>2] = $30;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($30);
      $$pre$i = HEAP32[$18>>2]|0;
      $28 = $$pre$i;
     }
     $31 = ((($26)) + -48|0);
     $32 = ((($3)) + 11|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = ($33<<24>>24)<(0);
     $35 = HEAP32[$3>>2]|0;
     $36 = ((($3)) + 4|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = $33&255;
     $39 = $34 ? $35 : $3;
     $40 = $34 ? $37 : $38;
     (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($31,$39,$40)|0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$2 = $16;
     break L1;
    }
    break;
   }
   default: {
   }
   }
   $43 = (__ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
   $44 = ($43|0)==($0|0);
   if ($44) {
    $45 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
    $46 = ($45|0)==($0|0);
    if ($46) {
     $$2 = $0;
    } else {
     $47 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($45,$1,$2)|0);
     $48 = ($47|0)==($45|0);
     if ($48) {
      $$2 = $45;
     } else {
      $49 = ((($2)) + 4|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = HEAP32[$2>>2]|0;
      $52 = (($50) - ($51))|0;
      $53 = (($52|0) / 24)&-1;
      $54 = ($53>>>0)<(2);
      if ($54) {
       $$2 = $47;
      } else {
       $55 = $50;
       $56 = ((($55)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$56);
       $57 = HEAP32[$49>>2]|0;
       $58 = ((($57)) + -24|0);
       $59 = $57;
       while(1) {
        $60 = ($59|0)==($58|0);
        if ($60) {
         break;
        }
        $61 = ((($59)) + -24|0);
        HEAP32[$49>>2] = $61;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($61);
        $$pre$i68 = HEAP32[$49>>2]|0;
        $59 = $$pre$i68;
       }
       $62 = ((($57)) + -48|0);
       $63 = ((($3)) + 11|0);
       $64 = HEAP8[$63>>0]|0;
       $65 = ($64<<24>>24)<(0);
       $66 = HEAP32[$3>>2]|0;
       $67 = ((($3)) + 4|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = $64&255;
       $70 = $65 ? $66 : $3;
       $71 = $65 ? $68 : $69;
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($62,$70,$71)|0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$2 = $47;
      }
     }
    }
   } else {
    $$2 = $43;
   }
  } else {
   $$2 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$2|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$067 = 0, $$1 = 0, $$pre$i = 0, $$sroa$0$0$$sroa_idx$i = 0, $$sroa$0$0$$sroa_idx$i72 = 0, $$sroa$0$0$$sroa_idx$i76 = 0, $$sroa$0$0$copyload$i7381 = 0, $$sroa$0$0$copyload$i7780 = 0, $$sroa$0$0$copyload$i82 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $3 = sp + 8|0;
 $4 = sp;
 $5 = ($0|0)==($1|0);
 L1: do {
  if ($5) {
   $$1 = $0;
  } else {
   $6 = HEAP8[$0>>0]|0;
   $7 = $6 << 24 >> 24;
   switch ($7|0) {
   case 84:  {
    $8 = ((($2)) + 4|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$2>>2]|0;
    $11 = (($9) - ($10))|0;
    $12 = (($11|0) / 24)&-1;
    $13 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
    $14 = HEAP32[$8>>2]|0;
    $15 = HEAP32[$2>>2]|0;
    $16 = (($14) - ($15))|0;
    $17 = (($16|0) / 24)&-1;
    $18 = ($13|0)!=($0|0);
    $19 = (($12) + 1)|0;
    $20 = ($17|0)==($19|0);
    $or$cond = $18 & $20;
    $21 = $14;
    if ($or$cond) {
     $22 = ((($21)) + -24|0);
     $$sroa$0$0$$sroa_idx$i = ((($2)) + 12|0);
     $$sroa$0$0$copyload$i82 = HEAP32[$$sroa$0$0$$sroa_idx$i>>2]|0;
     HEAP32[$4>>2] = $$sroa$0$0$copyload$i82;
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3,$22,$4);
     $23 = ((($2)) + 20|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($2)) + 24|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($24>>>0)<($26>>>0);
     if ($27) {
      $28 = ((($3)) + 12|0);
      HEAP32[$24>>2] = 0;
      $29 = ((($24)) + 4|0);
      HEAP32[$29>>2] = 0;
      $30 = ((($24)) + 8|0);
      $31 = HEAP32[$28>>2]|0;
      HEAP32[$30>>2] = 0;
      $32 = ((($24)) + 12|0);
      HEAP32[$32>>2] = $31;
      $33 = HEAP32[$3>>2]|0;
      HEAP32[$24>>2] = $33;
      $34 = ((($3)) + 4|0);
      $35 = HEAP32[$34>>2]|0;
      HEAP32[$29>>2] = $35;
      $36 = ((($3)) + 8|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($24)) + 8|0);
      HEAP32[$38>>2] = $37;
      HEAP32[$36>>2] = 0;
      HEAP32[$34>>2] = 0;
      HEAP32[$3>>2] = 0;
      $39 = HEAP32[$23>>2]|0;
      $40 = ((($39)) + 16|0);
      HEAP32[$23>>2] = $40;
     } else {
      $41 = ((($2)) + 16|0);
      __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($41,$3);
     }
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
     $$1 = $13;
     break L1;
    } else {
     $$067 = $17;$44 = $21;
    }
    while(1) {
     $42 = ($$067|0)==($12|0);
     if ($42) {
      $$1 = $0;
      break L1;
     }
     $43 = ((($44)) + -24|0);
     $45 = $44;
     while(1) {
      $46 = ($45|0)==($43|0);
      if ($46) {
       break;
      }
      $47 = ((($45)) + -24|0);
      HEAP32[$8>>2] = $47;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($47);
      $$pre$i = HEAP32[$8>>2]|0;
      $45 = $$pre$i;
     }
     $48 = (($$067) + -1)|0;
     $$067 = $48;$44 = $43;
    }
    break;
   }
   case 68:  {
    $49 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
    $50 = ($49|0)==($0|0);
    if ($50) {
     $$1 = $0;
     break L1;
    }
    $51 = HEAP32[$2>>2]|0;
    $52 = ((($2)) + 4|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($51|0)==($53|0);
    if ($54) {
     $$1 = $0;
     break L1;
    }
    $55 = ((($53)) + -24|0);
    $$sroa$0$0$$sroa_idx$i72 = ((($2)) + 12|0);
    $$sroa$0$0$copyload$i7381 = HEAP32[$$sroa$0$0$$sroa_idx$i72>>2]|0;
    HEAP32[$4>>2] = $$sroa$0$0$copyload$i7381;
    __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3,$55,$4);
    $56 = ((($2)) + 20|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ((($2)) + 24|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ($57>>>0)<($59>>>0);
    if ($60) {
     $61 = ((($3)) + 12|0);
     HEAP32[$57>>2] = 0;
     $62 = ((($57)) + 4|0);
     HEAP32[$62>>2] = 0;
     $63 = ((($57)) + 8|0);
     $64 = HEAP32[$61>>2]|0;
     HEAP32[$63>>2] = 0;
     $65 = ((($57)) + 12|0);
     HEAP32[$65>>2] = $64;
     $66 = HEAP32[$3>>2]|0;
     HEAP32[$57>>2] = $66;
     $67 = ((($3)) + 4|0);
     $68 = HEAP32[$67>>2]|0;
     HEAP32[$62>>2] = $68;
     $69 = ((($3)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ((($57)) + 8|0);
     HEAP32[$71>>2] = $70;
     HEAP32[$69>>2] = 0;
     HEAP32[$67>>2] = 0;
     HEAP32[$3>>2] = 0;
     $72 = HEAP32[$56>>2]|0;
     $73 = ((($72)) + 16|0);
     HEAP32[$56>>2] = $73;
    } else {
     $74 = ((($2)) + 16|0);
     __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($74,$3);
    }
    __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
    $$1 = $49;
    break L1;
    break;
   }
   case 83:  {
    $75 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
    $76 = ($75|0)==($0|0);
    if (!($76)) {
     $$1 = $75;
     break L1;
    }
    $77 = $1;
    $78 = $0;
    $79 = (($77) - ($78))|0;
    $80 = ($79|0)>(2);
    if (!($80)) {
     $$1 = $0;
     break L1;
    }
    $81 = ((($0)) + 1|0);
    $82 = HEAP8[$81>>0]|0;
    $83 = ($82<<24>>24)==(116);
    if (!($83)) {
     $$1 = $0;
     break L1;
    }
    $84 = ((($0)) + 2|0);
    $85 = (__ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($84,$1,$2)|0);
    $86 = ($85|0)==($84|0);
    if ($86) {
     $$1 = $0;
     break L1;
    }
    $87 = HEAP32[$2>>2]|0;
    $88 = ((($2)) + 4|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($87|0)==($89|0);
    if ($90) {
     $$1 = $0;
     break L1;
    }
    $91 = ((($89)) + -24|0);
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($91,0,3892)|0);
    $92 = HEAP32[$88>>2]|0;
    $93 = ((($92)) + -24|0);
    $$sroa$0$0$$sroa_idx$i76 = ((($2)) + 12|0);
    $$sroa$0$0$copyload$i7780 = HEAP32[$$sroa$0$0$$sroa_idx$i76>>2]|0;
    HEAP32[$4>>2] = $$sroa$0$0$copyload$i7780;
    __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3,$93,$4);
    $94 = ((($2)) + 20|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ((($2)) + 24|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($95>>>0)<($97>>>0);
    if ($98) {
     $99 = ((($3)) + 12|0);
     HEAP32[$95>>2] = 0;
     $100 = ((($95)) + 4|0);
     HEAP32[$100>>2] = 0;
     $101 = ((($95)) + 8|0);
     $102 = HEAP32[$99>>2]|0;
     HEAP32[$101>>2] = 0;
     $103 = ((($95)) + 12|0);
     HEAP32[$103>>2] = $102;
     $104 = HEAP32[$3>>2]|0;
     HEAP32[$95>>2] = $104;
     $105 = ((($3)) + 4|0);
     $106 = HEAP32[$105>>2]|0;
     HEAP32[$100>>2] = $106;
     $107 = ((($3)) + 8|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = ((($95)) + 8|0);
     HEAP32[$109>>2] = $108;
     HEAP32[$107>>2] = 0;
     HEAP32[$105>>2] = 0;
     HEAP32[$3>>2] = 0;
     $110 = HEAP32[$94>>2]|0;
     $111 = ((($110)) + 16|0);
     HEAP32[$94>>2] = $111;
    } else {
     $112 = ((($2)) + 16|0);
     __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($112,$3);
    }
    __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
    $$1 = $85;
    break L1;
    break;
   }
   default: {
    $$1 = $0;
    break L1;
   }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_132parse_unresolved_qualifier_levelINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
 return ($3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$3 = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = ($0|0)==($1|0);
 if ($4) {
  $$3 = $0;
 } else {
  $5 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
  $6 = ($5|0)==($0|0);
  if ($6) {
   $$3 = $0;
  } else {
   $7 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($5,$1,$2)|0);
   $8 = ($7|0)==($5|0);
   if ($8) {
    $$3 = $5;
   } else {
    $9 = ((($2)) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = HEAP32[$2>>2]|0;
    $12 = (($10) - ($11))|0;
    $13 = (($12|0) / 24)&-1;
    $14 = ($13>>>0)<(2);
    if ($14) {
     $$3 = $0;
    } else {
     $15 = $10;
     $16 = ((($15)) + -24|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$16);
     $17 = HEAP32[$9>>2]|0;
     $18 = ((($17)) + -24|0);
     $19 = $17;
     while(1) {
      $20 = ($19|0)==($18|0);
      if ($20) {
       break;
      }
      $21 = ((($19)) + -24|0);
      HEAP32[$9>>2] = $21;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($21);
      $$pre$i = HEAP32[$9>>2]|0;
      $19 = $$pre$i;
     }
     $22 = ((($17)) + -48|0);
     $23 = ((($3)) + 11|0);
     $24 = HEAP8[$23>>0]|0;
     $25 = ($24<<24>>24)<(0);
     $26 = HEAP32[$3>>2]|0;
     $27 = ((($3)) + 4|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = $24&255;
     $30 = $25 ? $26 : $3;
     $31 = $25 ? $28 : $29;
     (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($22,$30,$31)|0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$3 = $7;
    }
   }
  }
 }
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$1 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==($1|0);
 L1: do {
  if ($3) {
   $$1 = $0;
  } else {
   $4 = HEAP8[$0>>0]|0;
   $5 = $4 << 24 >> 24;
   switch ($5|0) {
   case 68: case 67:  {
    $6 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_ctor_dtor_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
    $$1 = $6;
    break L1;
    break;
   }
   case 85:  {
    $7 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_unnamed_type_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
    $$1 = $7;
    break L1;
    break;
   }
   case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49:  {
    $8 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
    $$1 = $8;
    break L1;
    break;
   }
   default: {
    $9 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
    return ($9|0);
   }
   }
  }
 } while(0);
 return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_120parse_ctor_dtor_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$023 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $3 = sp + 40|0;
 $4 = sp + 24|0;
 $5 = sp;
 $6 = sp + 12|0;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)>(1);
 L1: do {
  if ($10) {
   $11 = HEAP32[$2>>2]|0;
   $12 = ((($2)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($11|0)==($13|0);
   if ($14) {
    $$023 = $0;
   } else {
    $15 = HEAP8[$0>>0]|0;
    $16 = $15 << 24 >> 24;
    switch ($16|0) {
    case 67:  {
     $17 = ((($0)) + 1|0);
     $18 = HEAP8[$17>>0]|0;
     $19 = $18 << 24 >> 24;
     switch ($19|0) {
     case 53: case 51: case 50: case 49:  {
      break;
     }
     default: {
      $$023 = $0;
      break L1;
     }
     }
     $20 = ((($13)) + -24|0);
     __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($4,$20);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$4);
     $21 = HEAP32[$12>>2]|0;
     $22 = ((($2)) + 8|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = ($21>>>0)<($23>>>0);
     if ($24) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($21,$3);
      $25 = HEAP32[$12>>2]|0;
      $26 = ((($25)) + 24|0);
      HEAP32[$12>>2] = $26;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     $27 = ((($0)) + 2|0);
     $28 = ((($2)) + 60|0);
     HEAP8[$28>>0] = 1;
     $$023 = $27;
     break L1;
     break;
    }
    case 68:  {
     break;
    }
    default: {
     $$023 = $0;
     break L1;
    }
    }
    $29 = ((($0)) + 1|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = $30 << 24 >> 24;
    switch ($31|0) {
    case 53: case 50: case 49: case 48:  {
     break;
    }
    default: {
     $$023 = $0;
     break L1;
    }
    }
    $32 = ((($13)) + -24|0);
    __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($6,$32);
    $33 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6,0,3668)|0);
    ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
    $$0$i$i$i = 0;
    while(1) {
     $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
     if ($exitcond$i$i$i) {
      break;
     }
     $34 = (($6) + ($$0$i$i$i<<2)|0);
     HEAP32[$34>>2] = 0;
     $35 = (($$0$i$i$i) + 1)|0;
     $$0$i$i$i = $35;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$5);
    $36 = HEAP32[$12>>2]|0;
    $37 = ((($2)) + 8|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($36>>>0)<($38>>>0);
    if ($39) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($36,$3);
     $40 = HEAP32[$12>>2]|0;
     $41 = ((($40)) + 24|0);
     HEAP32[$12>>2] = $41;
    } else {
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    $42 = ((($0)) + 2|0);
    $43 = ((($2)) + 60|0);
    HEAP8[$43>>0] = 1;
    $$023 = $42;
   }
  } else {
   $$023 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$023|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_123parse_unnamed_type_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i134 = 0, $$0105 = 0, $$0105$lcssa = 0, $$0106 = 0, $$0110 = 0, $$0110$lcssa = 0, $$0116 = 0, $$2108 = 0, $$3109 = 0, $$7 = 0, $$byval_copy = 0, $$pre$i = 0, $$pre$i132 = 0, $$pre$i138 = 0, $$pre$i140 = 0, $$pre$i143 = 0, $$pre$i147 = 0, $$pre$i149 = 0;
 var $$pre$i151 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i$i = 0, $isdigit = 0, $isdigit127 = 0, $isdigit129 = 0, $isdigit131 = 0, $isdigittmp = 0, $isdigittmp126 = 0, $isdigittmp128 = 0;
 var $isdigittmp130 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $$byval_copy = sp + 68|0;
 $3 = sp + 16|0;
 $4 = sp + 56|0;
 $5 = sp + 44|0;
 $6 = sp;
 $7 = sp + 40|0;
 $8 = $1;
 $9 = $0;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)>(2);
 L1: do {
  if ($11) {
   $12 = HEAP8[$0>>0]|0;
   $13 = ($12<<24>>24)==(85);
   if ($13) {
    $14 = ((($0)) + 1|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    switch ($16|0) {
    case 116:  {
     ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
     $17 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4399)|0);
     $18 = ($17>>>0)>(4294967279);
     if ($18) {
      __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
      // unreachable;
     }
     $19 = ($17>>>0)<(11);
     if ($19) {
      $20 = $17&255;
      $21 = ((($4)) + 11|0);
      HEAP8[$21>>0] = $20;
      $$0$i$i = $4;
     } else {
      $22 = (($17) + 16)|0;
      $23 = $22 & -16;
      $24 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($23)|0);
      HEAP32[$4>>2] = $24;
      $25 = $23 | -2147483648;
      $26 = ((($4)) + 8|0);
      HEAP32[$26>>2] = $25;
      $27 = ((($4)) + 4|0);
      HEAP32[$27>>2] = $17;
      $$0$i$i = $24;
     }
     (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i,4399,$17)|0);
     $28 = (($$0$i$i) + ($17)|0);
     HEAP8[$$byval_copy>>0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($28,$$byval_copy);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$4);
     $29 = ((($2)) + 4|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ((($2)) + 8|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($30>>>0)<($32>>>0);
     if ($33) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($30,$3);
      $34 = HEAP32[$29>>2]|0;
      $35 = ((($34)) + 24|0);
      HEAP32[$29>>2] = $35;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     $36 = ((($0)) + 2|0);
     $37 = ($36|0)==($1|0);
     if ($37) {
      $38 = HEAP32[$29>>2]|0;
      $39 = ((($38)) + -24|0);
      $40 = $38;
      while(1) {
       $41 = ($40|0)==($39|0);
       if ($41) {
        $$7 = $0;
        break L1;
       }
       $42 = ((($40)) + -24|0);
       HEAP32[$29>>2] = $42;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($42);
       $$pre$i = HEAP32[$29>>2]|0;
       $40 = $$pre$i;
      }
     }
     $43 = HEAP8[$36>>0]|0;
     $44 = $43 << 24 >> 24;
     $isdigittmp128 = (($44) + -48)|0;
     $isdigit129 = ($isdigittmp128>>>0)<(10);
     if ($isdigit129) {
      $45 = ((($0)) + 3|0);
      $$0110 = $45;
      while(1) {
       $46 = ($$0110|0)==($1|0);
       if ($46) {
        $$0110$lcssa = $1;
        break;
       }
       $47 = HEAP8[$$0110>>0]|0;
       $48 = $47 << 24 >> 24;
       $isdigittmp130 = (($48) + -48)|0;
       $isdigit131 = ($isdigittmp130>>>0)<(10);
       if (!($isdigit131)) {
        $$0110$lcssa = $$0110;
        break;
       }
       $49 = ((($$0110)) + 1|0);
       $$0110 = $49;
      }
      $50 = HEAP32[$29>>2]|0;
      $51 = ((($50)) + -24|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE23__append_forward_unsafeIPKcEERS7_T_SC_($51,$36,$$0110$lcssa);
      $$0116 = $$0110$lcssa;
     } else {
      $$0116 = $36;
     }
     $52 = HEAP32[$29>>2]|0;
     $53 = ((($52)) + -24|0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($53,39);
     $54 = ($$0116|0)==($1|0);
     if (!($54)) {
      $55 = HEAP8[$$0116>>0]|0;
      $56 = ($55<<24>>24)==(95);
      if ($56) {
       $62 = ((($$0116)) + 1|0);
       $$7 = $62;
       break L1;
      }
     }
     $57 = HEAP32[$29>>2]|0;
     $58 = ((($57)) + -24|0);
     $59 = $57;
     while(1) {
      $60 = ($59|0)==($58|0);
      if ($60) {
       $$7 = $0;
       break L1;
      }
      $61 = ((($59)) + -24|0);
      HEAP32[$29>>2] = $61;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($61);
      $$pre$i132 = HEAP32[$29>>2]|0;
      $59 = $$pre$i132;
     }
     break;
    }
    case 108:  {
     break;
    }
    default: {
     $$7 = $0;
     break L1;
    }
    }
    ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
    $63 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4408)|0);
    $64 = ($63>>>0)>(4294967279);
    if ($64) {
     __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($5);
     // unreachable;
    }
    $65 = ($63>>>0)<(11);
    if ($65) {
     $66 = $63&255;
     $67 = ((($5)) + 11|0);
     HEAP8[$67>>0] = $66;
     $$0$i$i134 = $5;
    } else {
     $68 = (($63) + 16)|0;
     $69 = $68 & -16;
     $70 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($69)|0);
     HEAP32[$5>>2] = $70;
     $71 = $69 | -2147483648;
     $72 = ((($5)) + 8|0);
     HEAP32[$72>>2] = $71;
     $73 = ((($5)) + 4|0);
     HEAP32[$73>>2] = $63;
     $$0$i$i134 = $70;
    }
    (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i134,4408,$63)|0);
    $74 = (($$0$i$i134) + ($63)|0);
    HEAP8[$$byval_copy>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($74,$$byval_copy);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$5);
    $75 = ((($2)) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ((($2)) + 8|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ($76>>>0)<($78>>>0);
    if ($79) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($76,$3);
     $80 = HEAP32[$75>>2]|0;
     $81 = ((($80)) + 24|0);
     HEAP32[$75>>2] = $81;
    } else {
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $82 = ((($0)) + 2|0);
    $83 = HEAP8[$82>>0]|0;
    $84 = ($83<<24>>24)==(118);
    do {
     if ($84) {
      $85 = HEAP32[$75>>2]|0;
      $86 = ((($85)) + -24|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($86,41);
      $87 = ((($0)) + 3|0);
      $$2108 = $87;
     } else {
      $88 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($82,$1,$2)|0);
      $89 = ($88|0)==($82|0);
      if ($89) {
       $90 = HEAP32[$75>>2]|0;
       $91 = ((($90)) + -24|0);
       $92 = $90;
       while(1) {
        $93 = ($92|0)==($91|0);
        if ($93) {
         $$7 = $0;
         break L1;
        }
        $94 = ((($92)) + -24|0);
        HEAP32[$75>>2] = $94;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($94);
        $$pre$i138 = HEAP32[$75>>2]|0;
        $92 = $$pre$i138;
       }
      }
      $95 = HEAP32[$75>>2]|0;
      $96 = HEAP32[$2>>2]|0;
      $97 = (($95) - ($96))|0;
      $98 = (($97|0) / 24)&-1;
      $99 = ($98>>>0)<(2);
      if ($99) {
       $$7 = $0;
       break L1;
      }
      $100 = $95;
      $101 = ((($100)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$101);
      $102 = HEAP32[$75>>2]|0;
      $103 = ((($102)) + -24|0);
      $104 = $102;
      while(1) {
       $105 = ($104|0)==($103|0);
       if ($105) {
        break;
       }
       $106 = ((($104)) + -24|0);
       HEAP32[$75>>2] = $106;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($106);
       $$pre$i140 = HEAP32[$75>>2]|0;
       $104 = $$pre$i140;
      }
      $107 = ((($102)) + -48|0);
      $108 = ((($3)) + 11|0);
      $109 = HEAP8[$108>>0]|0;
      $110 = ($109<<24>>24)<(0);
      $111 = HEAP32[$3>>2]|0;
      $112 = ((($3)) + 4|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = $109&255;
      $115 = $110 ? $111 : $3;
      $116 = $110 ? $113 : $114;
      (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($107,$115,$116)|0);
      $$0106 = $88;
      while(1) {
       $117 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($$0106,$1,$2)|0);
       $118 = ($117|0)==($$0106|0);
       if ($118) {
        label = 60;
        break;
       }
       $119 = HEAP32[$75>>2]|0;
       $120 = HEAP32[$2>>2]|0;
       $121 = (($119) - ($120))|0;
       $122 = (($121|0) / 24)&-1;
       $123 = ($122>>>0)<(2);
       if ($123) {
        label = 85;
        break;
       }
       $124 = $119;
       $125 = ((($124)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$125);
       $126 = HEAP8[$108>>0]|0;
       $127 = ($126<<24>>24)<(0);
       if ($127) {
        $128 = HEAP32[$3>>2]|0;
        HEAP8[$$byval_copy>>0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($128,$$byval_copy);
        HEAP32[$112>>2] = 0;
       } else {
        HEAP8[$$byval_copy>>0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($3,$$byval_copy);
        HEAP8[$108>>0] = 0;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($3);
       ;HEAP32[$3>>2]=HEAP32[$6>>2]|0;HEAP32[$3+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$6+8>>2]|0;
       $$0$i$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
        if ($exitcond$i$i$i$i) {
         break;
        }
        $129 = (($6) + ($$0$i$i$i$i<<2)|0);
        HEAP32[$129>>2] = 0;
        $130 = (($$0$i$i$i$i) + 1)|0;
        $$0$i$i$i$i = $130;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
       $131 = HEAP32[$75>>2]|0;
       $132 = ((($131)) + -24|0);
       $133 = $131;
       while(1) {
        $134 = ($133|0)==($132|0);
        if ($134) {
         break;
        }
        $135 = ((($133)) + -24|0);
        HEAP32[$75>>2] = $135;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($135);
        $$pre$i143 = HEAP32[$75>>2]|0;
        $133 = $$pre$i143;
       }
       $136 = HEAP8[$108>>0]|0;
       $137 = ($136<<24>>24)<(0);
       $138 = HEAP32[$112>>2]|0;
       $139 = $136&255;
       $140 = $137 ? $138 : $139;
       $141 = ($140|0)==(0);
       if ($141) {
        $$0106 = $117;
        continue;
       }
       $142 = ((($131)) + -48|0);
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($142,3820)|0);
       $143 = HEAP32[$75>>2]|0;
       $144 = ((($143)) + -24|0);
       $145 = HEAP8[$108>>0]|0;
       $146 = ($145<<24>>24)<(0);
       $147 = HEAP32[$3>>2]|0;
       $148 = HEAP32[$112>>2]|0;
       $149 = $145&255;
       $150 = $146 ? $147 : $3;
       $151 = $146 ? $148 : $149;
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($144,$150,$151)|0);
       $$0106 = $117;
      }
      if ((label|0) == 60) {
       $152 = HEAP32[$75>>2]|0;
       $153 = ((($152)) + -24|0);
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($153,3596)|0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$2108 = $$0106;
       break;
      }
      else if ((label|0) == 85) {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$7 = $0;
       break L1;
      }
     }
    } while(0);
    $154 = ($$2108|0)==($1|0);
    if (!($154)) {
     $155 = HEAP8[$$2108>>0]|0;
     $156 = ($155<<24>>24)==(69);
     if ($156) {
      $162 = ((($$2108)) + 1|0);
      $163 = ($162|0)==($1|0);
      if ($163) {
       $164 = HEAP32[$75>>2]|0;
       $165 = ((($164)) + -24|0);
       $166 = $164;
       while(1) {
        $167 = ($166|0)==($165|0);
        if ($167) {
         $$7 = $0;
         break L1;
        }
        $168 = ((($166)) + -24|0);
        HEAP32[$75>>2] = $168;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($168);
        $$pre$i149 = HEAP32[$75>>2]|0;
        $166 = $$pre$i149;
       }
      }
      $169 = HEAP8[$162>>0]|0;
      $170 = $169 << 24 >> 24;
      $isdigittmp = (($170) + -48)|0;
      $isdigit = ($isdigittmp>>>0)<(10);
      if ($isdigit) {
       $171 = ((($$2108)) + 2|0);
       $$0105 = $171;
       while(1) {
        $172 = ($$0105|0)==($1|0);
        if ($172) {
         $$0105$lcssa = $1;
         break;
        }
        $173 = HEAP8[$$0105>>0]|0;
        $174 = $173 << 24 >> 24;
        $isdigittmp126 = (($174) + -48)|0;
        $isdigit127 = ($isdigittmp126>>>0)<(10);
        if (!($isdigit127)) {
         $$0105$lcssa = $$0105;
         break;
        }
        $175 = ((($$0105)) + 1|0);
        $$0105 = $175;
       }
       $176 = HEAP32[$75>>2]|0;
       $177 = ((($176)) + -24|0);
       $178 = ((($177)) + 11|0);
       $179 = HEAP8[$178>>0]|0;
       $180 = ($179<<24>>24)<(0);
       if ($180) {
        $181 = HEAP32[$177>>2]|0;
        $183 = $181;
       } else {
        $183 = $177;
       }
       $182 = ((($183)) + 7|0);
       $184 = $182;
       HEAP32[$7>>2] = $184;
       ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueENS_11__wrap_iterIPcEEE4typeENSD_ISA_EESC_SC_($177,$$byval_copy,$162,$$0105$lcssa)|0);
       $$3109 = $$0105$lcssa;
      } else {
       $$3109 = $162;
      }
      $185 = ($$3109|0)==($1|0);
      if (!($185)) {
       $186 = HEAP8[$$3109>>0]|0;
       $187 = ($186<<24>>24)==(95);
       if ($187) {
        $193 = ((($$3109)) + 1|0);
        $$7 = $193;
        break;
       }
      }
      $188 = HEAP32[$75>>2]|0;
      $189 = ((($188)) + -24|0);
      $190 = $188;
      while(1) {
       $191 = ($190|0)==($189|0);
       if ($191) {
        $$7 = $0;
        break L1;
       }
       $192 = ((($190)) + -24|0);
       HEAP32[$75>>2] = $192;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($192);
       $$pre$i151 = HEAP32[$75>>2]|0;
       $190 = $$pre$i151;
      }
     }
    }
    $157 = HEAP32[$75>>2]|0;
    $158 = ((($157)) + -24|0);
    $159 = $157;
    while(1) {
     $160 = ($159|0)==($158|0);
     if ($160) {
      $$7 = $0;
      break L1;
     }
     $161 = ((($159)) + -24|0);
     HEAP32[$75>>2] = $161;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($161);
     $$pre$i147 = HEAP32[$75>>2]|0;
     $159 = $$pre$i147;
    }
   } else {
    $$7 = $0;
   }
  } else {
   $$7 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$7|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$3 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $3 = sp;
 $4 = $1;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = ($6|0)>(1);
 L1: do {
  if ($7) {
   $8 = HEAP8[$0>>0]|0;
   $9 = $8 << 24 >> 24;
   do {
    switch ($9|0) {
    case 97:  {
     $10 = ((($0)) + 1|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = $11 << 24 >> 24;
     switch ($12|0) {
     case 97:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3,3898);
      $13 = ((($2)) + 4|0);
      $14 = HEAP32[$13>>2]|0;
      $15 = ((($2)) + 8|0);
      $16 = HEAP32[$15>>2]|0;
      $17 = ($14>>>0)<($16>>>0);
      if ($17) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($14,$3);
       $18 = HEAP32[$13>>2]|0;
       $19 = ((($18)) + 24|0);
       HEAP32[$13>>2] = $19;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $20 = ((($0)) + 2|0);
      $$3 = $20;
      break L1;
      break;
     }
     case 110: case 100:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3,3909);
      $21 = ((($2)) + 4|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ((($2)) + 8|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($22>>>0)<($24>>>0);
      if ($25) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($22,$3);
       $26 = HEAP32[$21>>2]|0;
       $27 = ((($26)) + 24|0);
       HEAP32[$21>>2] = $27;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $28 = ((($0)) + 2|0);
      $$3 = $28;
      break L1;
      break;
     }
     case 78:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3,3919);
      $29 = ((($2)) + 4|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = ((($2)) + 8|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30>>>0)<($32>>>0);
      if ($33) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($30,$3);
       $34 = HEAP32[$29>>2]|0;
       $35 = ((($34)) + 24|0);
       HEAP32[$29>>2] = $35;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $36 = ((($0)) + 2|0);
      $$3 = $36;
      break L1;
      break;
     }
     case 83:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3,3930);
      $37 = ((($2)) + 4|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = ((($2)) + 8|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($38>>>0)<($40>>>0);
      if ($41) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($38,$3);
       $42 = HEAP32[$37>>2]|0;
       $43 = ((($42)) + 24|0);
       HEAP32[$37>>2] = $43;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $44 = ((($0)) + 2|0);
      $$3 = $44;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 99:  {
     $45 = ((($0)) + 1|0);
     $46 = HEAP8[$45>>0]|0;
     $47 = $46 << 24 >> 24;
     switch ($47|0) {
     case 108:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3,3940);
      $48 = ((($2)) + 4|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = ((($2)) + 8|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($49>>>0)<($51>>>0);
      if ($52) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($49,$3);
       $53 = HEAP32[$48>>2]|0;
       $54 = ((($53)) + 24|0);
       HEAP32[$48>>2] = $54;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $55 = ((($0)) + 2|0);
      $$3 = $55;
      break L1;
      break;
     }
     case 109:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3,3951);
      $56 = ((($2)) + 4|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ((($2)) + 8|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = ($57>>>0)<($59>>>0);
      if ($60) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($57,$3);
       $61 = HEAP32[$56>>2]|0;
       $62 = ((($61)) + 24|0);
       HEAP32[$56>>2] = $62;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $63 = ((($0)) + 2|0);
      $$3 = $63;
      break L1;
      break;
     }
     case 111:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3,3961);
      $64 = ((($2)) + 4|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ((($2)) + 8|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($65>>>0)<($67>>>0);
      if ($68) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($65,$3);
       $69 = HEAP32[$64>>2]|0;
       $70 = ((($69)) + 24|0);
       HEAP32[$64>>2] = $70;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $71 = ((($0)) + 2|0);
      $$3 = $71;
      break L1;
      break;
     }
     case 118:  {
      $72 = ((($2)) + 63|0);
      $73 = HEAP8[$72>>0]|0;
      HEAP8[$72>>0] = 0;
      $74 = ((($0)) + 2|0);
      $75 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($74,$1,$2)|0);
      HEAP8[$72>>0] = $73;
      $76 = ($75|0)==($74|0);
      if ($76) {
       $$3 = $0;
       break L1;
      }
      $77 = HEAP32[$2>>2]|0;
      $78 = ((($2)) + 4|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ($77|0)==($79|0);
      if ($80) {
       $$3 = $0;
       break L1;
      }
      $81 = ((($79)) + -24|0);
      (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($81,0,3971)|0);
      $82 = ((($2)) + 60|0);
      HEAP8[$82>>0] = 1;
      $$3 = $75;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 100:  {
     $83 = ((($0)) + 1|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = $84 << 24 >> 24;
     switch ($85|0) {
     case 97:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($3,3981);
      $86 = ((($2)) + 4|0);
      $87 = HEAP32[$86>>2]|0;
      $88 = ((($2)) + 8|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = ($87>>>0)<($89>>>0);
      if ($90) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($87,$3);
       $91 = HEAP32[$86>>2]|0;
       $92 = ((($91)) + 24|0);
       HEAP32[$86>>2] = $92;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $93 = ((($0)) + 2|0);
      $$3 = $93;
      break L1;
      break;
     }
     case 101:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3,3999);
      $94 = ((($2)) + 4|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = ((($2)) + 8|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = ($95>>>0)<($97>>>0);
      if ($98) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($95,$3);
       $99 = HEAP32[$94>>2]|0;
       $100 = ((($99)) + 24|0);
       HEAP32[$94>>2] = $100;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $101 = ((($0)) + 2|0);
      $$3 = $101;
      break L1;
      break;
     }
     case 108:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj16EEERAT__Kc($3);
      $102 = ((($2)) + 4|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = ((($2)) + 8|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = ($103>>>0)<($105>>>0);
      if ($106) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($103,$3);
       $107 = HEAP32[$102>>2]|0;
       $108 = ((($107)) + 24|0);
       HEAP32[$102>>2] = $108;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $109 = ((($0)) + 2|0);
      $$3 = $109;
      break L1;
      break;
     }
     case 118:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3,4009);
      $110 = ((($2)) + 4|0);
      $111 = HEAP32[$110>>2]|0;
      $112 = ((($2)) + 8|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($111>>>0)<($113>>>0);
      if ($114) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($111,$3);
       $115 = HEAP32[$110>>2]|0;
       $116 = ((($115)) + 24|0);
       HEAP32[$110>>2] = $116;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $117 = ((($0)) + 2|0);
      $$3 = $117;
      break L1;
      break;
     }
     case 86:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3,4019);
      $118 = ((($2)) + 4|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ((($2)) + 8|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($119>>>0)<($121>>>0);
      if ($122) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($119,$3);
       $123 = HEAP32[$118>>2]|0;
       $124 = ((($123)) + 24|0);
       HEAP32[$118>>2] = $124;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $125 = ((($0)) + 2|0);
      $$3 = $125;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 101:  {
     $126 = ((($0)) + 1|0);
     $127 = HEAP8[$126>>0]|0;
     $128 = $127 << 24 >> 24;
     switch ($128|0) {
     case 111:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3,4030);
      $129 = ((($2)) + 4|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = ((($2)) + 8|0);
      $132 = HEAP32[$131>>2]|0;
      $133 = ($130>>>0)<($132>>>0);
      if ($133) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($130,$3);
       $134 = HEAP32[$129>>2]|0;
       $135 = ((($134)) + 24|0);
       HEAP32[$129>>2] = $135;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $136 = ((($0)) + 2|0);
      $$3 = $136;
      break L1;
      break;
     }
     case 79:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3,4040);
      $137 = ((($2)) + 4|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ((($2)) + 8|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($138>>>0)<($140>>>0);
      if ($141) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($138,$3);
       $142 = HEAP32[$137>>2]|0;
       $143 = ((($142)) + 24|0);
       HEAP32[$137>>2] = $143;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $144 = ((($0)) + 2|0);
      $$3 = $144;
      break L1;
      break;
     }
     case 113:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3,4051);
      $145 = ((($2)) + 4|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ((($2)) + 8|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($146>>>0)<($148>>>0);
      if ($149) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($146,$3);
       $150 = HEAP32[$145>>2]|0;
       $151 = ((($150)) + 24|0);
       HEAP32[$145>>2] = $151;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $152 = ((($0)) + 2|0);
      $$3 = $152;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 103:  {
     $153 = ((($0)) + 1|0);
     $154 = HEAP8[$153>>0]|0;
     $155 = $154 << 24 >> 24;
     switch ($155|0) {
     case 101:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3,4062);
      $156 = ((($2)) + 4|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ((($2)) + 8|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($157>>>0)<($159>>>0);
      if ($160) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($157,$3);
       $161 = HEAP32[$156>>2]|0;
       $162 = ((($161)) + 24|0);
       HEAP32[$156>>2] = $162;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $163 = ((($0)) + 2|0);
      $$3 = $163;
      break L1;
      break;
     }
     case 116:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3,4073);
      $164 = ((($2)) + 4|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ((($2)) + 8|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($165>>>0)<($167>>>0);
      if ($168) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($165,$3);
       $169 = HEAP32[$164>>2]|0;
       $170 = ((($169)) + 24|0);
       HEAP32[$164>>2] = $170;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $171 = ((($0)) + 2|0);
      $$3 = $171;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 105:  {
     $172 = ((($0)) + 1|0);
     $173 = HEAP8[$172>>0]|0;
     $174 = ($173<<24>>24)==(120);
     if (!($174)) {
      $$3 = $0;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3,4083);
     $175 = ((($2)) + 4|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = ((($2)) + 8|0);
     $178 = HEAP32[$177>>2]|0;
     $179 = ($176>>>0)<($178>>>0);
     if ($179) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($176,$3);
      $180 = HEAP32[$175>>2]|0;
      $181 = ((($180)) + 24|0);
      HEAP32[$175>>2] = $181;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $182 = ((($0)) + 2|0);
     $$3 = $182;
     break L1;
     break;
    }
    case 108:  {
     $183 = ((($0)) + 1|0);
     $184 = HEAP8[$183>>0]|0;
     $185 = $184 << 24 >> 24;
     switch ($185|0) {
     case 101:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3,4094);
      $186 = ((($2)) + 4|0);
      $187 = HEAP32[$186>>2]|0;
      $188 = ((($2)) + 8|0);
      $189 = HEAP32[$188>>2]|0;
      $190 = ($187>>>0)<($189>>>0);
      if ($190) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($187,$3);
       $191 = HEAP32[$186>>2]|0;
       $192 = ((($191)) + 24|0);
       HEAP32[$186>>2] = $192;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $193 = ((($0)) + 2|0);
      $$3 = $193;
      break L1;
      break;
     }
     case 105:  {
      $194 = ((($0)) + 2|0);
      $195 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($194,$1,$2)|0);
      $196 = ($195|0)==($194|0);
      if ($196) {
       $$3 = $0;
       break L1;
      }
      $197 = HEAP32[$2>>2]|0;
      $198 = ((($2)) + 4|0);
      $199 = HEAP32[$198>>2]|0;
      $200 = ($197|0)==($199|0);
      if ($200) {
       $$3 = $0;
       break L1;
      }
      $201 = ((($199)) + -24|0);
      (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($201,0,4105)|0);
      $$3 = $195;
      break L1;
      break;
     }
     case 115:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3,4117);
      $202 = ((($2)) + 4|0);
      $203 = HEAP32[$202>>2]|0;
      $204 = ((($2)) + 8|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = ($203>>>0)<($205>>>0);
      if ($206) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($203,$3);
       $207 = HEAP32[$202>>2]|0;
       $208 = ((($207)) + 24|0);
       HEAP32[$202>>2] = $208;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $209 = ((($0)) + 2|0);
      $$3 = $209;
      break L1;
      break;
     }
     case 83:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($3,4128);
      $210 = ((($2)) + 4|0);
      $211 = HEAP32[$210>>2]|0;
      $212 = ((($2)) + 8|0);
      $213 = HEAP32[$212>>2]|0;
      $214 = ($211>>>0)<($213>>>0);
      if ($214) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($211,$3);
       $215 = HEAP32[$210>>2]|0;
       $216 = ((($215)) + 24|0);
       HEAP32[$210>>2] = $216;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $217 = ((($0)) + 2|0);
      $$3 = $217;
      break L1;
      break;
     }
     case 116:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3,4140);
      $218 = ((($2)) + 4|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = ((($2)) + 8|0);
      $221 = HEAP32[$220>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($219,$3);
       $223 = HEAP32[$218>>2]|0;
       $224 = ((($223)) + 24|0);
       HEAP32[$218>>2] = $224;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $225 = ((($0)) + 2|0);
      $$3 = $225;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 109:  {
     $226 = ((($0)) + 1|0);
     $227 = HEAP8[$226>>0]|0;
     $228 = $227 << 24 >> 24;
     switch ($228|0) {
     case 105:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3,4150);
      $229 = ((($2)) + 4|0);
      $230 = HEAP32[$229>>2]|0;
      $231 = ((($2)) + 8|0);
      $232 = HEAP32[$231>>2]|0;
      $233 = ($230>>>0)<($232>>>0);
      if ($233) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($230,$3);
       $234 = HEAP32[$229>>2]|0;
       $235 = ((($234)) + 24|0);
       HEAP32[$229>>2] = $235;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $236 = ((($0)) + 2|0);
      $$3 = $236;
      break L1;
      break;
     }
     case 73:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3,4160);
      $237 = ((($2)) + 4|0);
      $238 = HEAP32[$237>>2]|0;
      $239 = ((($2)) + 8|0);
      $240 = HEAP32[$239>>2]|0;
      $241 = ($238>>>0)<($240>>>0);
      if ($241) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($238,$3);
       $242 = HEAP32[$237>>2]|0;
       $243 = ((($242)) + 24|0);
       HEAP32[$237>>2] = $243;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $244 = ((($0)) + 2|0);
      $$3 = $244;
      break L1;
      break;
     }
     case 108:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3,3999);
      $245 = ((($2)) + 4|0);
      $246 = HEAP32[$245>>2]|0;
      $247 = ((($2)) + 8|0);
      $248 = HEAP32[$247>>2]|0;
      $249 = ($246>>>0)<($248>>>0);
      if ($249) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($246,$3);
       $250 = HEAP32[$245>>2]|0;
       $251 = ((($250)) + 24|0);
       HEAP32[$245>>2] = $251;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $252 = ((($0)) + 2|0);
      $$3 = $252;
      break L1;
      break;
     }
     case 76:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3,4171);
      $253 = ((($2)) + 4|0);
      $254 = HEAP32[$253>>2]|0;
      $255 = ((($2)) + 8|0);
      $256 = HEAP32[$255>>2]|0;
      $257 = ($254>>>0)<($256>>>0);
      if ($257) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($254,$3);
       $258 = HEAP32[$253>>2]|0;
       $259 = ((($258)) + 24|0);
       HEAP32[$253>>2] = $259;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $260 = ((($0)) + 2|0);
      $$3 = $260;
      break L1;
      break;
     }
     case 109:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3,4182);
      $261 = ((($2)) + 4|0);
      $262 = HEAP32[$261>>2]|0;
      $263 = ((($2)) + 8|0);
      $264 = HEAP32[$263>>2]|0;
      $265 = ($262>>>0)<($264>>>0);
      if ($265) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($262,$3);
       $266 = HEAP32[$261>>2]|0;
       $267 = ((($266)) + 24|0);
       HEAP32[$261>>2] = $267;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $268 = ((($0)) + 2|0);
      $$3 = $268;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 110:  {
     $269 = ((($0)) + 1|0);
     $270 = HEAP8[$269>>0]|0;
     $271 = $270 << 24 >> 24;
     switch ($271|0) {
     case 97:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($3,4193);
      $272 = ((($2)) + 4|0);
      $273 = HEAP32[$272>>2]|0;
      $274 = ((($2)) + 8|0);
      $275 = HEAP32[$274>>2]|0;
      $276 = ($273>>>0)<($275>>>0);
      if ($276) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($273,$3);
       $277 = HEAP32[$272>>2]|0;
       $278 = ((($277)) + 24|0);
       HEAP32[$272>>2] = $278;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $279 = ((($0)) + 2|0);
      $$3 = $279;
      break L1;
      break;
     }
     case 101:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3,4208);
      $280 = ((($2)) + 4|0);
      $281 = HEAP32[$280>>2]|0;
      $282 = ((($2)) + 8|0);
      $283 = HEAP32[$282>>2]|0;
      $284 = ($281>>>0)<($283>>>0);
      if ($284) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($281,$3);
       $285 = HEAP32[$280>>2]|0;
       $286 = ((($285)) + 24|0);
       HEAP32[$280>>2] = $286;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $287 = ((($0)) + 2|0);
      $$3 = $287;
      break L1;
      break;
     }
     case 103:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3,4150);
      $288 = ((($2)) + 4|0);
      $289 = HEAP32[$288>>2]|0;
      $290 = ((($2)) + 8|0);
      $291 = HEAP32[$290>>2]|0;
      $292 = ($289>>>0)<($291>>>0);
      if ($292) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($289,$3);
       $293 = HEAP32[$288>>2]|0;
       $294 = ((($293)) + 24|0);
       HEAP32[$288>>2] = $294;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $295 = ((($0)) + 2|0);
      $$3 = $295;
      break L1;
      break;
     }
     case 116:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3,4219);
      $296 = ((($2)) + 4|0);
      $297 = HEAP32[$296>>2]|0;
      $298 = ((($2)) + 8|0);
      $299 = HEAP32[$298>>2]|0;
      $300 = ($297>>>0)<($299>>>0);
      if ($300) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($297,$3);
       $301 = HEAP32[$296>>2]|0;
       $302 = ((($301)) + 24|0);
       HEAP32[$296>>2] = $302;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $303 = ((($0)) + 2|0);
      $$3 = $303;
      break L1;
      break;
     }
     case 119:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($3,4229);
      $304 = ((($2)) + 4|0);
      $305 = HEAP32[$304>>2]|0;
      $306 = ((($2)) + 8|0);
      $307 = HEAP32[$306>>2]|0;
      $308 = ($305>>>0)<($307>>>0);
      if ($308) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($305,$3);
       $309 = HEAP32[$304>>2]|0;
       $310 = ((($309)) + 24|0);
       HEAP32[$304>>2] = $310;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $311 = ((($0)) + 2|0);
      $$3 = $311;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 111:  {
     $312 = ((($0)) + 1|0);
     $313 = HEAP8[$312>>0]|0;
     $314 = $313 << 24 >> 24;
     switch ($314|0) {
     case 111:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3,4242);
      $315 = ((($2)) + 4|0);
      $316 = HEAP32[$315>>2]|0;
      $317 = ((($2)) + 8|0);
      $318 = HEAP32[$317>>2]|0;
      $319 = ($316>>>0)<($318>>>0);
      if ($319) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($316,$3);
       $320 = HEAP32[$315>>2]|0;
       $321 = ((($320)) + 24|0);
       HEAP32[$315>>2] = $321;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $322 = ((($0)) + 2|0);
      $$3 = $322;
      break L1;
      break;
     }
     case 114:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3,4253);
      $323 = ((($2)) + 4|0);
      $324 = HEAP32[$323>>2]|0;
      $325 = ((($2)) + 8|0);
      $326 = HEAP32[$325>>2]|0;
      $327 = ($324>>>0)<($326>>>0);
      if ($327) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($324,$3);
       $328 = HEAP32[$323>>2]|0;
       $329 = ((($328)) + 24|0);
       HEAP32[$323>>2] = $329;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $330 = ((($0)) + 2|0);
      $$3 = $330;
      break L1;
      break;
     }
     case 82:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3,4263);
      $331 = ((($2)) + 4|0);
      $332 = HEAP32[$331>>2]|0;
      $333 = ((($2)) + 8|0);
      $334 = HEAP32[$333>>2]|0;
      $335 = ($332>>>0)<($334>>>0);
      if ($335) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($332,$3);
       $336 = HEAP32[$331>>2]|0;
       $337 = ((($336)) + 24|0);
       HEAP32[$331>>2] = $337;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $338 = ((($0)) + 2|0);
      $$3 = $338;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 112:  {
     $339 = ((($0)) + 1|0);
     $340 = HEAP8[$339>>0]|0;
     $341 = $340 << 24 >> 24;
     switch ($341|0) {
     case 109:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($3,4274);
      $342 = ((($2)) + 4|0);
      $343 = HEAP32[$342>>2]|0;
      $344 = ((($2)) + 8|0);
      $345 = HEAP32[$344>>2]|0;
      $346 = ($343>>>0)<($345>>>0);
      if ($346) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($343,$3);
       $347 = HEAP32[$342>>2]|0;
       $348 = ((($347)) + 24|0);
       HEAP32[$342>>2] = $348;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $349 = ((($0)) + 2|0);
      $$3 = $349;
      break L1;
      break;
     }
     case 108:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3,4286);
      $350 = ((($2)) + 4|0);
      $351 = HEAP32[$350>>2]|0;
      $352 = ((($2)) + 8|0);
      $353 = HEAP32[$352>>2]|0;
      $354 = ($351>>>0)<($353>>>0);
      if ($354) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($351,$3);
       $355 = HEAP32[$350>>2]|0;
       $356 = ((($355)) + 24|0);
       HEAP32[$350>>2] = $356;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $357 = ((($0)) + 2|0);
      $$3 = $357;
      break L1;
      break;
     }
     case 76:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3,4296);
      $358 = ((($2)) + 4|0);
      $359 = HEAP32[$358>>2]|0;
      $360 = ((($2)) + 8|0);
      $361 = HEAP32[$360>>2]|0;
      $362 = ($359>>>0)<($361>>>0);
      if ($362) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($359,$3);
       $363 = HEAP32[$358>>2]|0;
       $364 = ((($363)) + 24|0);
       HEAP32[$358>>2] = $364;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $365 = ((($0)) + 2|0);
      $$3 = $365;
      break L1;
      break;
     }
     case 112:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3,4307);
      $366 = ((($2)) + 4|0);
      $367 = HEAP32[$366>>2]|0;
      $368 = ((($2)) + 8|0);
      $369 = HEAP32[$368>>2]|0;
      $370 = ($367>>>0)<($369>>>0);
      if ($370) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($367,$3);
       $371 = HEAP32[$366>>2]|0;
       $372 = ((($371)) + 24|0);
       HEAP32[$366>>2] = $372;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $373 = ((($0)) + 2|0);
      $$3 = $373;
      break L1;
      break;
     }
     case 115:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3,4286);
      $374 = ((($2)) + 4|0);
      $375 = HEAP32[$374>>2]|0;
      $376 = ((($2)) + 8|0);
      $377 = HEAP32[$376>>2]|0;
      $378 = ($375>>>0)<($377>>>0);
      if ($378) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($375,$3);
       $379 = HEAP32[$374>>2]|0;
       $380 = ((($379)) + 24|0);
       HEAP32[$374>>2] = $380;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $381 = ((($0)) + 2|0);
      $$3 = $381;
      break L1;
      break;
     }
     case 116:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3,4318);
      $382 = ((($2)) + 4|0);
      $383 = HEAP32[$382>>2]|0;
      $384 = ((($2)) + 8|0);
      $385 = HEAP32[$384>>2]|0;
      $386 = ($383>>>0)<($385>>>0);
      if ($386) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($383,$3);
       $387 = HEAP32[$382>>2]|0;
       $388 = ((($387)) + 24|0);
       HEAP32[$382>>2] = $388;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $389 = ((($0)) + 2|0);
      $$3 = $389;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 113:  {
     $390 = ((($0)) + 1|0);
     $391 = HEAP8[$390>>0]|0;
     $392 = ($391<<24>>24)==(117);
     if (!($392)) {
      $$3 = $0;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3,4329);
     $393 = ((($2)) + 4|0);
     $394 = HEAP32[$393>>2]|0;
     $395 = ((($2)) + 8|0);
     $396 = HEAP32[$395>>2]|0;
     $397 = ($394>>>0)<($396>>>0);
     if ($397) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($394,$3);
      $398 = HEAP32[$393>>2]|0;
      $399 = ((($398)) + 24|0);
      HEAP32[$393>>2] = $399;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $400 = ((($0)) + 2|0);
     $$3 = $400;
     break L1;
     break;
    }
    case 114:  {
     $401 = ((($0)) + 1|0);
     $402 = HEAP8[$401>>0]|0;
     $403 = $402 << 24 >> 24;
     switch ($403|0) {
     case 109:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3,4339);
      $404 = ((($2)) + 4|0);
      $405 = HEAP32[$404>>2]|0;
      $406 = ((($2)) + 8|0);
      $407 = HEAP32[$406>>2]|0;
      $408 = ($405>>>0)<($407>>>0);
      if ($408) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($405,$3);
       $409 = HEAP32[$404>>2]|0;
       $410 = ((($409)) + 24|0);
       HEAP32[$404>>2] = $410;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $411 = ((($0)) + 2|0);
      $$3 = $411;
      break L1;
      break;
     }
     case 77:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3,4349);
      $412 = ((($2)) + 4|0);
      $413 = HEAP32[$412>>2]|0;
      $414 = ((($2)) + 8|0);
      $415 = HEAP32[$414>>2]|0;
      $416 = ($413>>>0)<($415>>>0);
      if ($416) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($413,$3);
       $417 = HEAP32[$412>>2]|0;
       $418 = ((($417)) + 24|0);
       HEAP32[$412>>2] = $418;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $419 = ((($0)) + 2|0);
      $$3 = $419;
      break L1;
      break;
     }
     case 115:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3,4360);
      $420 = ((($2)) + 4|0);
      $421 = HEAP32[$420>>2]|0;
      $422 = ((($2)) + 8|0);
      $423 = HEAP32[$422>>2]|0;
      $424 = ($421>>>0)<($423>>>0);
      if ($424) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($421,$3);
       $425 = HEAP32[$420>>2]|0;
       $426 = ((($425)) + 24|0);
       HEAP32[$420>>2] = $426;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $427 = ((($0)) + 2|0);
      $$3 = $427;
      break L1;
      break;
     }
     case 83:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($3,4371);
      $428 = ((($2)) + 4|0);
      $429 = HEAP32[$428>>2]|0;
      $430 = ((($2)) + 8|0);
      $431 = HEAP32[$430>>2]|0;
      $432 = ($429>>>0)<($431>>>0);
      if ($432) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($429,$3);
       $433 = HEAP32[$428>>2]|0;
       $434 = ((($433)) + 24|0);
       HEAP32[$428>>2] = $434;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $435 = ((($0)) + 2|0);
      $$3 = $435;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 118:  {
     $436 = ((($0)) + 1|0);
     $437 = HEAP8[$436>>0]|0;
     $438 = $437 << 24 >> 24;
     $isdigittmp = (($438) + -48)|0;
     $isdigit = ($isdigittmp>>>0)<(10);
     if (!($isdigit)) {
      $$3 = $0;
      break L1;
     }
     $439 = ((($0)) + 2|0);
     $440 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($439,$1,$2)|0);
     $441 = ($440|0)==($439|0);
     if ($441) {
      $$3 = $0;
      break L1;
     }
     $442 = HEAP32[$2>>2]|0;
     $443 = ((($2)) + 4|0);
     $444 = HEAP32[$443>>2]|0;
     $445 = ($442|0)==($444|0);
     if ($445) {
      $$3 = $0;
      break L1;
     }
     $446 = ((($444)) + -24|0);
     (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($446,0,3971)|0);
     $$3 = $440;
     break L1;
     break;
    }
    default: {
     $$3 = $0;
     break L1;
    }
    }
   } while(0);
  } else {
   $$3 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $3 = ((($0)) + 11|0);
 HEAP8[$3>>0] = 10;
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($0,$1,10)|0);
 $4 = ((($0)) + 10|0);
 HEAP8[$2>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($4,$2);
 $5 = ((($0)) + 12|0);
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $6 = (($5) + ($$0$i$i<<2)|0);
  HEAP32[$6>>2] = 0;
  $7 = (($$0$i$i) + 1)|0;
  $$0$i$i = $7;
 }
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $3 = ((($0)) + 11|0);
 HEAP8[$3>>0] = 9;
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($0,$1,9)|0);
 $4 = ((($0)) + 9|0);
 HEAP8[$2>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($4,$2);
 $5 = ((($0)) + 12|0);
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $6 = (($5) + ($$0$i$i<<2)|0);
  HEAP32[$6>>2] = 0;
  $7 = (($$0$i$i) + 1)|0;
  $$0$i$i = $7;
 }
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $3 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj(32)|0);
 HEAP32[$0>>2] = $3;
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = -2147483616;
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = 17;
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($3,$1,17)|0);
 $6 = ((($3)) + 17|0);
 HEAP8[$2>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($6,$2);
 $7 = ((($0)) + 12|0);
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $8 = (($7) + ($$0$i$i<<2)|0);
  HEAP32[$8>>2] = 0;
  $9 = (($$0$i$i) + 1)|0;
  $$0$i$i = $9;
 }
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj16EEERAT__Kc($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $2 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj(16)|0);
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = -2147483632;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = 15;
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($2,4383,15)|0);
 $5 = ((($2)) + 15|0);
 HEAP8[$1>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($5,$1);
 $6 = ((($0)) + 12|0);
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $7 = (($6) + ($$0$i$i<<2)|0);
  HEAP32[$7>>2] = 0;
  $8 = (($$0$i$i) + 1)|0;
  $$0$i$i = $8;
 }
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $3 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj(16)|0);
 HEAP32[$0>>2] = $3;
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = -2147483632;
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = 11;
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($3,$1,11)|0);
 $6 = ((($3)) + 11|0);
 HEAP8[$2>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($6,$2);
 $7 = ((($0)) + 12|0);
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $8 = (($7) + ($$0$i$i<<2)|0);
  HEAP32[$8>>2] = 0;
  $9 = (($$0$i$i) + 1)|0;
  $$0$i$i = $9;
 }
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $3 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj(16)|0);
 HEAP32[$0>>2] = $3;
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = -2147483632;
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = 14;
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($3,$1,14)|0);
 $6 = ((($3)) + 14|0);
 HEAP8[$2>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($6,$2);
 $7 = ((($0)) + 12|0);
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $8 = (($7) + ($$0$i$i<<2)|0);
  HEAP32[$8>>2] = 0;
  $9 = (($$0$i$i) + 1)|0;
  $$0$i$i = $9;
 }
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $3 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj(16)|0);
 HEAP32[$0>>2] = $3;
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = -2147483632;
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = 12;
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($3,$1,12)|0);
 $6 = ((($3)) + 12|0);
 HEAP8[$2>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($6,$2);
 $7 = ((($0)) + 12|0);
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $8 = (($7) + ($$0$i$i<<2)|0);
  HEAP32[$8>>2] = 0;
  $9 = (($$0$i$i) + 1)|0;
  $$0$i$i = $9;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE23__append_forward_unsafeIPKcEERS7_T_SC_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i$i = 0, $$021$i$i = 0, $$021$ph$i$i = 0, $$040 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep23$i$i = 0, $scevgep5 = 0, $scevgep6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = $1;
 $4 = sp + 12|0;
 $5 = sp;
 $6 = ((($0)) + 11|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)<(0);
 if ($8) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 & 2147483647;
  $phitmp$i = (($14) + -1)|0;
  $49 = $11;$50 = $phitmp$i;
 } else {
  $9 = $7&255;
  $49 = $9;$50 = 10;
 }
 $15 = $2;
 $16 = (($15) - ($3))|0;
 $17 = ($16|0)==(0);
 do {
  if (!($17)) {
   if ($8) {
    $18 = HEAP32[$0>>2]|0;
    $19 = ((($0)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $23 = $18;$24 = $20;
   } else {
    $21 = $7&255;
    $23 = $0;$24 = $21;
   }
   $22 = (($23) + ($24)|0);
   $25 = (__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($1,$23,$22)|0);
   if ($25) {
    ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
    $26 = ($16>>>0)>(4294967279);
    if ($26) {
     __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($5);
     // unreachable;
    }
    $27 = ($16>>>0)<(11);
    if ($27) {
     $28 = $16&255;
     $29 = ((($5)) + 11|0);
     HEAP8[$29>>0] = $28;
     $$021$ph$i$i = $5;
    } else {
     $30 = (($16) + 16)|0;
     $31 = $30 & -16;
     $32 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($31)|0);
     HEAP32[$5>>2] = $32;
     $33 = $31 | -2147483648;
     $34 = ((($5)) + 8|0);
     HEAP32[$34>>2] = $33;
     $35 = ((($5)) + 4|0);
     HEAP32[$35>>2] = $16;
     $$021$ph$i$i = $32;
    }
    $$0$i$i = $1;$$021$i$i = $$021$ph$i$i;
    while(1) {
     $36 = ($$0$i$i|0)==($2|0);
     if ($36) {
      break;
     }
     __ZNSt3__211char_traitsIcE6assignERcRKc($$021$i$i,$$0$i$i);
     $37 = ((($$0$i$i)) + 1|0);
     $38 = ((($$021$i$i)) + 1|0);
     $$0$i$i = $37;$$021$i$i = $38;
    }
    $scevgep23$i$i = (($$021$ph$i$i) + ($16)|0);
    HEAP8[$4>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($scevgep23$i$i,$4);
    $39 = ((($5)) + 11|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = ($40<<24>>24)<(0);
    $42 = HEAP32[$5>>2]|0;
    $43 = ((($5)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = $40&255;
    $46 = $41 ? $42 : $5;
    $47 = $41 ? $44 : $45;
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($0,$46,$47)|0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    break;
   }
   $48 = (($50) - ($49))|0;
   $51 = ($48>>>0)<($16>>>0);
   if ($51) {
    $52 = (($49) + ($16))|0;
    $53 = (($52) - ($50))|0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($0,$50,$53,$49,$49,0);
   }
   $54 = HEAP8[$6>>0]|0;
   $55 = ($54<<24>>24)<(0);
   if ($55) {
    $56 = HEAP32[$0>>2]|0;
    $58 = $56;
   } else {
    $58 = $0;
   }
   $57 = (($58) + ($49)|0);
   $59 = (($49) - ($3))|0;
   $scevgep = (($2) + ($59)|0);
   $scevgep5 = $scevgep;
   $$0 = $57;$$040 = $1;
   while(1) {
    $60 = ($$040|0)==($2|0);
    if ($60) {
     break;
    }
    __ZNSt3__211char_traitsIcE6assignERcRKc($$0,$$040);
    $61 = ((($$0)) + 1|0);
    $62 = ((($$040)) + 1|0);
    $$0 = $61;$$040 = $62;
   }
   $scevgep6 = (($58) + ($scevgep5)|0);
   HEAP8[$4>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($scevgep6,$4);
   $63 = (($49) + ($16))|0;
   $64 = HEAP8[$6>>0]|0;
   $65 = ($64<<24>>24)<(0);
   if ($65) {
    $66 = ((($0)) + 4|0);
    HEAP32[$66>>2] = $63;
    break;
   } else {
    $67 = $63&255;
    HEAP8[$6>>0] = $67;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = sp + 1|0;
 HEAP8[$2>>0] = $1;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $8 = ((($0)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 & 2147483647;
  $11 = (($10) + -1)|0;
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $$018 = $13;$$019 = $11;
 } else {
  $7 = $5&255;
  $$018 = $7;$$019 = 10;
 }
 $14 = ($$018|0)==($$019|0);
 if ($14) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($0,$$019,1,$$019,$$019,0);
  $15 = HEAP8[$4>>0]|0;
  $16 = ($15<<24>>24)<(0);
  if ($16) {
   label = 8;
  } else {
   label = 7;
  }
 } else {
  if ($6) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $17 = (($$018) + 1)|0;
  $18 = $17&255;
  HEAP8[$4>>0] = $18;
  $$pn = $0;
 }
 else if ((label|0) == 8) {
  $19 = HEAP32[$0>>2]|0;
  $20 = (($$018) + 1)|0;
  $21 = ((($0)) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;
 }
 $$0 = (($$pn) + ($$018)|0);
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0,$2);
 $22 = ((($$0)) + 1|0);
 HEAP8[$3>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($22,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueENS_11__wrap_iterIPcEEE4typeENSD_ISA_EESC_SC_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$i$i = 0, $$021$i$i = 0, $$021$ph$i$i = 0, $$059 = 0, $$1 = 0, $$byval_copy = 0, $$pre = 0, $$sroa$0$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $phitmp$i = 0, $scevgep23$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 16|0;
 $4 = sp;
 $5 = sp + 12|0;
 $6 = ((($0)) + 11|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)<(0);
 if ($8) {
  $9 = HEAP32[$0>>2]|0;
  $10 = $9;
 } else {
  $10 = $0;
 }
 $11 = $10;
 $12 = HEAP32[$1>>2]|0;
 $13 = (($12) - ($11))|0;
 $14 = $3;
 $15 = $2;
 $16 = (($14) - ($15))|0;
 $17 = ($16|0)==(0);
 do {
  if ($17) {
   $81 = $7;
   label = 35;
  } else {
   if ($8) {
    $18 = HEAP32[$0>>2]|0;
    $19 = ((($0)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $23 = $18;$24 = $20;
   } else {
    $21 = $7&255;
    $23 = $0;$24 = $21;
   }
   $22 = (($23) + ($24)|0);
   $25 = (__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($2,$23,$22)|0);
   if ($25) {
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    $26 = ($16>>>0)>(4294967279);
    if ($26) {
     __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
     // unreachable;
    }
    $27 = ($16>>>0)<(11);
    if ($27) {
     $28 = $16&255;
     $29 = ((($4)) + 11|0);
     HEAP8[$29>>0] = $28;
     $$021$ph$i$i = $4;
    } else {
     $30 = (($16) + 16)|0;
     $31 = $30 & -16;
     $32 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($31)|0);
     HEAP32[$4>>2] = $32;
     $33 = $31 | -2147483648;
     $34 = ((($4)) + 8|0);
     HEAP32[$34>>2] = $33;
     $35 = ((($4)) + 4|0);
     HEAP32[$35>>2] = $16;
     $$021$ph$i$i = $32;
    }
    $$0$i$i = $2;$$021$i$i = $$021$ph$i$i;
    while(1) {
     $36 = ($$0$i$i|0)==($3|0);
     if ($36) {
      break;
     }
     __ZNSt3__211char_traitsIcE6assignERcRKc($$021$i$i,$$0$i$i);
     $37 = ((($$0$i$i)) + 1|0);
     $38 = ((($$021$i$i)) + 1|0);
     $$0$i$i = $37;$$021$i$i = $38;
    }
    $scevgep23$i$i = (($$021$ph$i$i) + ($16)|0);
    HEAP8[$$byval_copy>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($scevgep23$i$i,$$byval_copy);
    HEAP32[$5>>2] = $12;
    $39 = ((($4)) + 11|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = ($40<<24>>24)<(0);
    $42 = HEAP32[$4>>2]|0;
    $43 = ((($4)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = $40&255;
    $46 = $41 ? $42 : $4;
    $47 = $41 ? $44 : $45;
    $48 = (($46) + ($47)|0);
    ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;
    $49 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueENS_11__wrap_iterIPcEEE4typeENSD_ISA_EESC_SC_($0,$$byval_copy,$46,$48)|0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    $$sroa$0$1 = $49;
    break;
   }
   $50 = HEAP8[$6>>0]|0;
   $51 = ($50<<24>>24)<(0);
   if ($51) {
    $53 = ((($0)) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ((($0)) + 8|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = $56 & 2147483647;
    $phitmp$i = (($57) + -1)|0;
    $59 = $54;$60 = $phitmp$i;
   } else {
    $52 = $50&255;
    $59 = $52;$60 = 10;
   }
   $58 = (($60) - ($59))|0;
   $61 = ($58>>>0)<($16>>>0);
   if ($61) {
    $68 = (($59) + ($16))|0;
    $69 = (($68) - ($60))|0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($0,$60,$69,$59,$13,$16);
    $70 = HEAP32[$0>>2]|0;
    $$0 = $70;
   } else {
    if ($51) {
     $62 = HEAP32[$0>>2]|0;
     $66 = $62;
    } else {
     $66 = $0;
    }
    $63 = (($59) - ($13))|0;
    $64 = ($63|0)==(0);
    if ($64) {
     $$0 = $66;
    } else {
     $65 = (($66) + ($13)|0);
     $67 = (($65) + ($16)|0);
     (__ZNSt3__211char_traitsIcE4moveEPcPKcj($67,$65,$63)|0);
     $$0 = $66;
    }
   }
   $71 = (($59) + ($16))|0;
   $72 = HEAP8[$6>>0]|0;
   $73 = ($72<<24>>24)<(0);
   if ($73) {
    $74 = ((($0)) + 4|0);
    HEAP32[$74>>2] = $71;
   } else {
    $75 = $71&255;
    HEAP8[$6>>0] = $75;
   }
   $76 = (($$0) + ($71)|0);
   HEAP8[$$byval_copy>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($76,$$byval_copy);
   $77 = (($$0) + ($13)|0);
   $$059 = $2;$$1 = $77;
   while(1) {
    $78 = ($$059|0)==($3|0);
    if ($78) {
     break;
    }
    __ZNSt3__211char_traitsIcE6assignERcRKc($$1,$$059);
    $79 = ((($$1)) + 1|0);
    $80 = ((($$059)) + 1|0);
    $$059 = $80;$$1 = $79;
   }
   $$pre = HEAP8[$6>>0]|0;
   $81 = $$pre;
   label = 35;
  }
 } while(0);
 if ((label|0) == 35) {
  $82 = ($81<<24>>24)<(0);
  if ($82) {
   $83 = HEAP32[$0>>2]|0;
   $85 = $83;
  } else {
   $85 = $0;
  }
  $84 = (($85) + ($13)|0);
  $$sroa$0$1 = $84;
 }
 STACKTOP = sp;return ($$sroa$0$1|0);
}
function __ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)<=($0>>>0);
 $4 = ($0>>>0)<($2>>>0);
 $$ = $3 & $4;
 return ($$|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (-17 - ($1))|0;
 $7 = ($6>>>0)<($2>>>0);
 if ($7) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $8 = ((($0)) + 11|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)<(0);
 if ($10) {
  $11 = HEAP32[$0>>2]|0;
  $22 = $11;
 } else {
  $22 = $0;
 }
 $12 = ($1>>>0)<(2147483623);
 if ($12) {
  $13 = (($2) + ($1))|0;
  $14 = $1 << 1;
  $15 = ($13>>>0)<($14>>>0);
  $$sroa$speculated = $15 ? $14 : $13;
  $16 = ($$sroa$speculated>>>0)<(11);
  $17 = (($$sroa$speculated) + 16)|0;
  $18 = $17 & -16;
  $phitmp = $16 ? 11 : $18;
  $19 = $phitmp;
 } else {
  $19 = -17;
 }
 $20 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($19)|0);
 $21 = ($4|0)==(0);
 if (!($21)) {
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($20,$22,$4)|0);
 }
 $23 = (($3) - ($4))|0;
 $24 = ($23|0)==(0);
 if (!($24)) {
  $25 = (($20) + ($4)|0);
  $26 = (($25) + ($5)|0);
  $27 = (($22) + ($4)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($26,$27,$23)|0);
 }
 $28 = ($1|0)==(10);
 if (!($28)) {
  __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj($22);
 }
 HEAP32[$0>>2] = $20;
 $29 = $19 | -2147483648;
 $30 = ((($0)) + 8|0);
 HEAP32[$30>>2] = $29;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i35 = 0, $$0$i$i38 = 0, $$0$i$i42 = 0, $$0$i$i46 = 0, $$0$i$i48 = 0, $$021$i$i = 0, $$021$ph$i$i = 0, $$032$ph = 0, $$033 = 0, $$033$ph = 0, $$1 = 0, $$2 = 0, $$2$pn = 0, $$pre = 0, $$pre57 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $scevgep23$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $4&255;
 $9 = $5 ? $7 : $8;
 $10 = ($9|0)==(0);
 L1: do {
  if ($10) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($0,$1);
  } else {
   $11 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4418)|0);
   $12 = HEAP8[$3>>0]|0;
   $13 = ($12<<24>>24)<(0);
   $14 = HEAP32[$6>>2]|0;
   $15 = $12&255;
   $16 = $13 ? $14 : $15;
   $17 = ($11|0)==($16|0);
   if ($17) {
    $18 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($1,4418,$11)|0);
    $19 = ($18|0)==(0);
    if ($19) {
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($1,4430);
     ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
     $20 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4501)|0);
     $21 = ($20>>>0)>(4294967279);
     if ($21) {
      __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
      // unreachable;
     }
     $22 = ($20>>>0)<(11);
     if ($22) {
      $23 = $20&255;
      $24 = ((($0)) + 11|0);
      HEAP8[$24>>0] = $23;
      $$0$i$i35 = $0;
     } else {
      $25 = (($20) + 16)|0;
      $26 = $25 & -16;
      $27 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($26)|0);
      HEAP32[$0>>2] = $27;
      $28 = $26 | -2147483648;
      $29 = ((($0)) + 8|0);
      HEAP32[$29>>2] = $28;
      $30 = ((($0)) + 4|0);
      HEAP32[$30>>2] = $20;
      $$0$i$i35 = $27;
     }
     (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i35,4501,$20)|0);
     $31 = (($$0$i$i35) + ($20)|0);
     HEAP8[$2>>0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($31,$2);
     break;
    }
   }
   $32 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4514)|0);
   $33 = HEAP8[$3>>0]|0;
   $34 = ($33<<24>>24)<(0);
   $35 = HEAP32[$6>>2]|0;
   $36 = $33&255;
   $37 = $34 ? $35 : $36;
   $38 = ($32|0)==($37|0);
   if ($38) {
    $39 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($1,4514,$32)|0);
    $40 = ($39|0)==(0);
    if ($40) {
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($1,4527);
     ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
     $41 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4577)|0);
     $42 = ($41>>>0)>(4294967279);
     if ($42) {
      __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
      // unreachable;
     }
     $43 = ($41>>>0)<(11);
     if ($43) {
      $44 = $41&255;
      $45 = ((($0)) + 11|0);
      HEAP8[$45>>0] = $44;
      $$0$i$i38 = $0;
     } else {
      $46 = (($41) + 16)|0;
      $47 = $46 & -16;
      $48 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($47)|0);
      HEAP32[$0>>2] = $48;
      $49 = $47 | -2147483648;
      $50 = ((($0)) + 8|0);
      HEAP32[$50>>2] = $49;
      $51 = ((($0)) + 4|0);
      HEAP32[$51>>2] = $41;
      $$0$i$i38 = $48;
     }
     (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i38,4577,$41)|0);
     $52 = (($$0$i$i38) + ($41)|0);
     HEAP8[$2>>0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($52,$2);
     break;
    }
   }
   $53 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4591)|0);
   $54 = HEAP8[$3>>0]|0;
   $55 = ($54<<24>>24)<(0);
   $56 = HEAP32[$6>>2]|0;
   $57 = $54&255;
   $58 = $55 ? $56 : $57;
   $59 = ($53|0)==($58|0);
   if ($59) {
    $60 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($1,4591,$53)|0);
    $61 = ($60|0)==(0);
    if ($61) {
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($1,4604);
     ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
     $62 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4654)|0);
     $63 = ($62>>>0)>(4294967279);
     if ($63) {
      __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
      // unreachable;
     }
     $64 = ($62>>>0)<(11);
     if ($64) {
      $65 = $62&255;
      $66 = ((($0)) + 11|0);
      HEAP8[$66>>0] = $65;
      $$0$i$i42 = $0;
     } else {
      $67 = (($62) + 16)|0;
      $68 = $67 & -16;
      $69 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($68)|0);
      HEAP32[$0>>2] = $69;
      $70 = $68 | -2147483648;
      $71 = ((($0)) + 8|0);
      HEAP32[$71>>2] = $70;
      $72 = ((($0)) + 4|0);
      HEAP32[$72>>2] = $62;
      $$0$i$i42 = $69;
     }
     (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i42,4654,$62)|0);
     $73 = (($$0$i$i42) + ($62)|0);
     HEAP8[$2>>0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($73,$2);
     break;
    }
   }
   $74 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4668)|0);
   $75 = HEAP8[$3>>0]|0;
   $76 = ($75<<24>>24)<(0);
   $77 = HEAP32[$6>>2]|0;
   $78 = $75&255;
   $79 = $76 ? $77 : $78;
   $80 = ($74|0)==($79|0);
   do {
    if ($80) {
     $81 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($1,4668,$74)|0);
     $82 = ($81|0)==(0);
     if (!($82)) {
      $$pre = HEAP8[$3>>0]|0;
      $$pre57 = HEAP32[$6>>2]|0;
      $100 = $$pre57;$95 = $$pre;
      break;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($1,4682);
     ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
     $83 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4733)|0);
     $84 = ($83>>>0)>(4294967279);
     if ($84) {
      __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
      // unreachable;
     }
     $85 = ($83>>>0)<(11);
     if ($85) {
      $86 = $83&255;
      $87 = ((($0)) + 11|0);
      HEAP8[$87>>0] = $86;
      $$0$i$i46 = $0;
     } else {
      $88 = (($83) + 16)|0;
      $89 = $88 & -16;
      $90 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($89)|0);
      HEAP32[$0>>2] = $90;
      $91 = $89 | -2147483648;
      $92 = ((($0)) + 8|0);
      HEAP32[$92>>2] = $91;
      $93 = ((($0)) + 4|0);
      HEAP32[$93>>2] = $83;
      $$0$i$i46 = $90;
     }
     (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i46,4733,$83)|0);
     $94 = (($$0$i$i46) + ($83)|0);
     HEAP8[$2>>0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($94,$2);
     break L1;
    } else {
     $100 = $77;$95 = $75;
    }
   } while(0);
   $96 = ($95<<24>>24)<(0);
   $97 = HEAP32[$1>>2]|0;
   $98 = $95&255;
   $99 = $96 ? $97 : $1;
   $101 = $96 ? $100 : $98;
   $102 = (($99) + ($101)|0);
   $103 = ((($102)) + -1|0);
   $104 = HEAP8[$103>>0]|0;
   $105 = ($104<<24>>24)==(62);
   L50: do {
    if ($105) {
     $$032$ph = 1;$$033$ph = $102;
     L51: while(1) {
      $$033 = $$033$ph;
      L53: while(1) {
       $106 = ((($$033)) + -1|0);
       $107 = ($106|0)==($99|0);
       if ($107) {
        break L51;
       }
       $110 = ((($$033)) + -2|0);
       $111 = HEAP8[$110>>0]|0;
       switch ($111<<24>>24) {
       case 60:  {
        label = 43;
        break L53;
        break;
       }
       case 62:  {
        label = 44;
        break L53;
        break;
       }
       default: {
        $$033 = $106;
       }
       }
      }
      if ((label|0) == 43) {
       label = 0;
       $112 = (($$032$ph) + -1)|0;
       $113 = ($112|0)==(0);
       if ($113) {
        $$2 = $110;
        break L50;
       } else {
        $$032$ph = $112;$$033$ph = $106;
        continue;
       }
      }
      else if ((label|0) == 44) {
       label = 0;
       $114 = (($$032$ph) + 1)|0;
       $$032$ph = $114;$$033$ph = $106;
       continue;
      }
     }
     ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
     $$0$i$i48 = 0;
     while(1) {
      $exitcond$i$i = ($$0$i$i48|0)==(3);
      if ($exitcond$i$i) {
       break L1;
      }
      $108 = (($0) + ($$0$i$i48<<2)|0);
      HEAP32[$108>>2] = 0;
      $109 = (($$0$i$i48) + 1)|0;
      $$0$i$i48 = $109;
     }
    } else {
     $$2 = $102;
    }
   } while(0);
   $$2$pn = $$2;
   while(1) {
    $$0 = ((($$2$pn)) + -1|0);
    $115 = ($$0|0)==($99|0);
    if ($115) {
     $$1 = $99;
     break;
    }
    $116 = HEAP8[$$0>>0]|0;
    $117 = ($116<<24>>24)==(58);
    if ($117) {
     $$1 = $$2$pn;
     break;
    } else {
     $$2$pn = $$0;
    }
   }
   ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
   $118 = $$1;
   $119 = $$2;
   $120 = (($119) - ($118))|0;
   $121 = ($120>>>0)>(4294967279);
   if ($121) {
    __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
    // unreachable;
   }
   $122 = ($120>>>0)<(11);
   if ($122) {
    $123 = $120&255;
    $124 = ((($0)) + 11|0);
    HEAP8[$124>>0] = $123;
    $$021$ph$i$i = $0;
   } else {
    $125 = (($120) + 16)|0;
    $126 = $125 & -16;
    $127 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($126)|0);
    HEAP32[$0>>2] = $127;
    $128 = $126 | -2147483648;
    $129 = ((($0)) + 8|0);
    HEAP32[$129>>2] = $128;
    $130 = ((($0)) + 4|0);
    HEAP32[$130>>2] = $120;
    $$021$ph$i$i = $127;
   }
   $$0$i$i = $$1;$$021$i$i = $$021$ph$i$i;
   while(1) {
    $131 = ($$0$i$i|0)==($$2|0);
    if ($131) {
     break;
    }
    __ZNSt3__211char_traitsIcE6assignERcRKc($$021$i$i,$$0$i$i);
    $132 = ((($$0$i$i)) + 1|0);
    $133 = ((($$021$i$i)) + 1|0);
    $$0$i$i = $132;$$021$i$i = $133;
   }
   $scevgep23$i$i = (($$021$ph$i$i) + ($120)|0);
   HEAP8[$2>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($scevgep23$i$i,$2);
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = HEAP32[$1>>2]|0;
  $7 = ((($1)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8>>>0)>(4294967279);
  if ($9) {
   __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
   // unreachable;
  }
  $10 = ($8>>>0)<(11);
  if ($10) {
   $11 = $8&255;
   $12 = ((($0)) + 11|0);
   HEAP8[$12>>0] = $11;
   $$0$i = $0;
  } else {
   $13 = (($8) + 16)|0;
   $14 = $13 & -16;
   $15 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($14)|0);
   HEAP32[$0>>2] = $15;
   $16 = $14 | -2147483648;
   $17 = ((($0)) + 8|0);
   HEAP32[$17>>2] = $16;
   $18 = ((($0)) + 4|0);
   HEAP32[$18>>2] = $8;
   $$0$i = $15;
  }
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i,$6,$8)|0);
  $19 = (($$0$i) + ($8)|0);
  HEAP8[$2>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($19,$2);
 } else {
  ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 }
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_destructor_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$019 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==($1|0);
 if ($3) {
  $$1 = $0;
 } else {
  $4 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
  $5 = ($4|0)==($0|0);
  if ($5) {
   $6 = (__ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
   $$019 = $6;
  } else {
   $$019 = $4;
  }
  $7 = ($$019|0)==($0|0);
  if ($7) {
   $$1 = $0;
  } else {
   $8 = HEAP32[$2>>2]|0;
   $9 = ((($2)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8|0)==($10|0);
   if ($11) {
    $$1 = $0;
   } else {
    $12 = ((($10)) + -24|0);
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($12,0,3668)|0);
    $$1 = $$019;
   }
  }
 }
 return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $$0$i$i1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $exitcond$i$i = 0, $exitcond$i$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($$0$i$i) + 1)|0;
  $$0$i$i = $2;
 }
 $3 = ((($0)) + 12|0);
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
 $$0$i$i1 = 0;
 while(1) {
  $exitcond$i$i2 = ($$0$i$i1|0)==(3);
  if ($exitcond$i$i2) {
   break;
  }
  $4 = (($3) + ($$0$i$i1<<2)|0);
  HEAP32[$4>>2] = 0;
  $5 = (($$0$i$i1) + 1)|0;
  $$0$i$i1 = $5;
 }
 return;
}
function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE24__emplace_back_slow_pathIJEEEvDpOT_($0) {
 $0 = $0|0;
 var $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = sp;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = (($5|0) / 24)&-1;
 $7 = (($6) + 1)|0;
 $8 = (__ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8max_sizeEv($0)|0);
 $9 = ($8>>>0)<($7>>>0);
 if ($9) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $10 = ((($0)) + 12|0);
  $11 = ((($0)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$0>>2]|0;
  $14 = (($12) - ($13))|0;
  $15 = (($14|0) / 24)&-1;
  $16 = $8 >>> 1;
  $17 = ($15>>>0)<($16>>>0);
  $18 = $15 << 1;
  $19 = ($18>>>0)<($7>>>0);
  $$sroa$speculated$i = $19 ? $7 : $18;
  $$sroa$speculated$$i = $17 ? $$sroa$speculated$i : $8;
  $20 = HEAP32[$2>>2]|0;
  $21 = (($20) - ($13))|0;
  $22 = (($21|0) / 24)&-1;
  __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($1,$$sroa$speculated$$i,$22,$10);
  $23 = ((($1)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  ;HEAP32[$24>>2]=0|0;HEAP32[$24+4>>2]=0|0;HEAP32[$24+8>>2]=0|0;HEAP32[$24+12>>2]=0|0;HEAP32[$24+16>>2]=0|0;HEAP32[$24+20>>2]=0|0;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($24);
  $25 = ((($24)) + 24|0);
  HEAP32[$23>>2] = $25;
  __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0,$1);
  __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($1);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 178956970;
}
function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 if ($6) {
  $8 = 0;
 } else {
  $7 = (__ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE8allocateEj($3,$1)|0);
  $8 = $7;
 }
 HEAP32[$0>>2] = $8;
 $9 = (($8) + (($2*24)|0)|0);
 $10 = ((($0)) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($0)) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = (($8) + (($1*24)|0)|0);
 $13 = ((($0)) + 12|0);
 HEAP32[$13>>2] = $12;
 return;
}
function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $$0$i = $4;
 while(1) {
  $6 = ($$0$i|0)==($2|0);
  if ($6) {
   break;
  }
  $7 = HEAP32[$5>>2]|0;
  $8 = ((($7)) + -24|0);
  $9 = ((($$0$i)) + -24|0);
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($8,$9);
  $10 = HEAP32[$5>>2]|0;
  $11 = ((($10)) + -24|0);
  HEAP32[$5>>2] = $11;
  $$0$i = $9;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $13;
 HEAP32[$5>>2] = $12;
 $14 = ((($1)) + 8|0);
 $15 = HEAP32[$3>>2]|0;
 $16 = HEAP32[$14>>2]|0;
 HEAP32[$3>>2] = $16;
 HEAP32[$14>>2] = $15;
 $17 = ((($0)) + 8|0);
 $18 = ((($1)) + 12|0);
 $19 = HEAP32[$17>>2]|0;
 $20 = HEAP32[$18>>2]|0;
 HEAP32[$17>>2] = $20;
 HEAP32[$18>>2] = $19;
 $21 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $21;
 return;
}
function __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 while(1) {
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($2|0);
  if ($5) {
   break;
  }
  $6 = ((($4)) + -24|0);
  HEAP32[$3>>2] = $6;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $9 = $7;
  $10 = ((($0)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) - ($9))|0;
  $15 = (($14|0) / 24)&-1;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE10deallocateEPS2_j($11,$7,$15);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($1*24)|0;
 $4 = (__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj($2,$3)|0);
 return ($4|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8align_upEj($1)|0);
 $3 = ((($0)) + 4096|0);
 $4 = ((($0)) + 4096|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 $7 = $5;
 $8 = (($6) - ($7))|0;
 $9 = ($8>>>0)<($2>>>0);
 if ($9) {
  $11 = (_malloc($2)|0);
  $$0 = $11;
 } else {
  $10 = (($5) + ($2)|0);
  HEAP32[$4>>2] = $10;
  $$0 = $5;
 }
 return ($$0|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$i$i$i = 0, $$025 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $4 = sp + 24|0;
 $5 = sp;
 $6 = sp + 12|0;
 $7 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($0,$1)|0);
 $8 = ($7|0)==($0|0);
 $9 = ($7|0)==($1|0);
 $or$cond = $8 | $9;
 if ($or$cond) {
  $$1 = $0;
 } else {
  $10 = HEAP8[$7>>0]|0;
  $11 = ($10<<24>>24)==(69);
  if ($11) {
   $12 = ((($2)) + 11|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = ($13<<24>>24)<(0);
   $15 = ((($2)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $13&255;
   $18 = $14 ? $16 : $17;
   $19 = ($18>>>0)>(3);
   do {
    if ($19) {
     __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($6,3598,$2);
     $20 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6,3596)|0);
     ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
     $$0$i$i$i = 0;
     while(1) {
      $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
      if ($exitcond$i$i$i) {
       break;
      }
      $21 = (($6) + ($$0$i$i$i<<2)|0);
      HEAP32[$21>>2] = 0;
      $22 = (($$0$i$i$i) + 1)|0;
      $$0$i$i$i = $22;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4,$5);
     $23 = ((($3)) + 4|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($3)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($24>>>0)<($26>>>0);
     if ($27) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($24,$4);
      $28 = HEAP32[$23>>2]|0;
      $29 = ((($28)) + 24|0);
      HEAP32[$23>>2] = $29;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($3,$4);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    } else {
     $30 = ((($3)) + 4|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ((($3)) + 8|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($31>>>0)<($33>>>0);
     if ($34) {
      ;HEAP32[$31>>2]=0|0;HEAP32[$31+4>>2]=0|0;HEAP32[$31+8>>2]=0|0;HEAP32[$31+12>>2]=0|0;HEAP32[$31+16>>2]=0|0;HEAP32[$31+20>>2]=0|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($31);
      $35 = HEAP32[$30>>2]|0;
      $36 = ((($35)) + 24|0);
      HEAP32[$30>>2] = $36;
      break;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE24__emplace_back_slow_pathIJEEEvDpOT_($3);
      break;
     }
    }
   } while(0);
   $37 = HEAP8[$0>>0]|0;
   $38 = ($37<<24>>24)==(110);
   $39 = ((($3)) + 4|0);
   if ($38) {
    $40 = HEAP32[$39>>2]|0;
    $41 = ((($40)) + -24|0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($41,45);
    $42 = ((($0)) + 1|0);
    $$025 = $42;
   } else {
    $$025 = $0;
   }
   $43 = HEAP32[$39>>2]|0;
   $44 = ((($43)) + -24|0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE23__append_forward_unsafeIPKcEERS7_T_SC_($44,$$025,$7);
   $45 = HEAP8[$12>>0]|0;
   $46 = ($45<<24>>24)<(0);
   $47 = HEAP32[$15>>2]|0;
   $48 = $45&255;
   $49 = $46 ? $47 : $48;
   $50 = ($49>>>0)<(4);
   if ($50) {
    $51 = HEAP32[$39>>2]|0;
    $52 = ((($51)) + -24|0);
    $53 = HEAP32[$2>>2]|0;
    $54 = $46 ? $53 : $2;
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($52,$54,$49)|0);
   }
   $55 = ((($7)) + 1|0);
   $$1 = $55;
  } else {
   $$1 = $0;
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $3 = ((($0)) + 11|0);
 HEAP8[$3>>0] = 4;
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($0,$1,4)|0);
 $4 = ((($0)) + 4|0);
 HEAP8[$2>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($4,$2);
 $5 = ((($0)) + 12|0);
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $6 = (($5) + ($$0$i$i<<2)|0);
  HEAP32[$6>>2] = 0;
  $7 = (($$0$i$i) + 1)|0;
  $$0$i$i = $7;
 }
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIfNS0_2DbEEEPKcS4_S4_RT0_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $$0$i$i57 = 0, $$049$add = 0, $$049$idx = 0, $$049$ptr = 0, $$050 = 0, $$07$i$i = 0, $$247$ph = 0, $$3 = 0, $$add = 0, $$ptr = 0, $$v = 0, $$v56 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit55 = 0, $isdigittmp = 0, $isdigittmp54 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer = sp;
 $3 = sp + 44|0;
 $4 = sp + 48|0;
 $5 = sp + 8|0;
 $6 = sp + 32|0;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9>>>0)>(8);
 L1: do {
  if ($10) {
   $$049$idx = 0;$$050 = $3;
   while(1) {
    $$049$ptr = (($0) + ($$049$idx)|0);
    $11 = ($$049$idx|0)==(8);
    $12 = HEAP8[$$049$ptr>>0]|0;
    $13 = $12 << 24 >> 24;
    if ($11) {
     label = 6;
     break;
    }
    $14 = (_isxdigit($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     break;
    }
    $isdigittmp = (($13) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    $$v = $isdigit ? 0 : 9;
    $16 = (($$v) + ($13))|0;
    $$049$add = $$049$idx | 1;
    $$ptr = (($0) + ($$049$add)|0);
    $17 = HEAP8[$$ptr>>0]|0;
    $18 = $17 << 24 >> 24;
    $isdigittmp54 = (($18) + -48)|0;
    $isdigit55 = ($isdigittmp54>>>0)<(10);
    $$v56 = $isdigit55 ? 208 : 169;
    $19 = $16 << 4;
    $20 = (($19) + ($18))|0;
    $21 = (($20) + ($$v56))|0;
    $22 = $21&255;
    HEAP8[$$050>>0] = $22;
    $$add = (($$049$idx) + 2)|0;
    $23 = ((($$050)) + 1|0);
    $$049$idx = $$add;$$050 = $23;
   }
   do {
    if ((label|0) == 6) {
     $24 = ($12<<24>>24)==(69);
     if ($24) {
      $25 = ($$050|0)==($3|0);
      L11: do {
       if (!($25)) {
        $$0$i$i = $$050;$$07$i$i = $3;
        while(1) {
         $26 = ((($$0$i$i)) + -1|0);
         $27 = ($$07$i$i>>>0)<($26>>>0);
         if (!($27)) {
          break L11;
         }
         $28 = HEAP8[$$07$i$i>>0]|0;
         $29 = HEAP8[$26>>0]|0;
         HEAP8[$$07$i$i>>0] = $29;
         HEAP8[$26>>0] = $28;
         $30 = ((($$07$i$i)) + 1|0);
         $$0$i$i = $26;$$07$i$i = $30;
        }
       }
      } while(0);
      dest=$4; stop=dest+24|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $31 = +HEAPF32[$3>>2];
      $32 = $31;
      HEAPF64[$vararg_buffer>>3] = $32;
      $33 = (_snprintf($4,24,4910,$vararg_buffer)|0);
      $34 = ($33>>>0)>(23);
      if ($34) {
       break;
      }
      ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
      $35 = ($33>>>0)<(11);
      if ($35) {
       $36 = $33&255;
       $37 = ((($6)) + 11|0);
       HEAP8[$37>>0] = $36;
       $$0$i$i57 = $6;
      } else {
       $38 = (($33) + 16)|0;
       $39 = $38 & -16;
       $40 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($39)|0);
       HEAP32[$6>>2] = $40;
       $41 = $39 | -2147483648;
       $42 = ((($6)) + 8|0);
       HEAP32[$42>>2] = $41;
       $43 = ((($6)) + 4|0);
       HEAP32[$43>>2] = $33;
       $$0$i$i57 = $40;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i57,$4,$33)|0);
      $44 = (($$0$i$i57) + ($33)|0);
      HEAP8[$vararg_buffer>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($44,$vararg_buffer);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($5,$6);
      $45 = ((($2)) + 4|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = ((($2)) + 8|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($46>>>0)<($48>>>0);
      if ($49) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($46,$5);
       $50 = HEAP32[$45>>2]|0;
       $51 = ((($50)) + 24|0);
       HEAP32[$45>>2] = $51;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$5);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      $52 = ((($$049$ptr)) + 1|0);
      $$247$ph = $52;
     } else {
      $$247$ph = $0;
     }
     $$3 = $$247$ph;
     break L1;
    }
   } while(0);
   $$3 = $0;
  } else {
   $$3 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIdNS0_2DbEEEPKcS4_S4_RT0_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $$0$i$i57 = 0, $$049$add = 0, $$049$idx = 0, $$049$ptr = 0, $$050 = 0, $$07$i$i = 0, $$247$ph = 0, $$3 = 0, $$add = 0, $$ptr = 0, $$v = 0, $$v56 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $isdigit = 0, $isdigit55 = 0, $isdigittmp = 0, $isdigittmp54 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer = sp + 8|0;
 $3 = sp;
 $4 = sp + 56|0;
 $5 = sp + 16|0;
 $6 = sp + 40|0;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9>>>0)>(16);
 L1: do {
  if ($10) {
   $$049$idx = 0;$$050 = $3;
   while(1) {
    $$049$ptr = (($0) + ($$049$idx)|0);
    $11 = ($$049$idx|0)==(16);
    $12 = HEAP8[$$049$ptr>>0]|0;
    $13 = $12 << 24 >> 24;
    if ($11) {
     label = 6;
     break;
    }
    $14 = (_isxdigit($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     break;
    }
    $isdigittmp = (($13) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    $$v = $isdigit ? 0 : 9;
    $16 = (($$v) + ($13))|0;
    $$049$add = $$049$idx | 1;
    $$ptr = (($0) + ($$049$add)|0);
    $17 = HEAP8[$$ptr>>0]|0;
    $18 = $17 << 24 >> 24;
    $isdigittmp54 = (($18) + -48)|0;
    $isdigit55 = ($isdigittmp54>>>0)<(10);
    $$v56 = $isdigit55 ? 208 : 169;
    $19 = $16 << 4;
    $20 = (($19) + ($18))|0;
    $21 = (($20) + ($$v56))|0;
    $22 = $21&255;
    HEAP8[$$050>>0] = $22;
    $$add = (($$049$idx) + 2)|0;
    $23 = ((($$050)) + 1|0);
    $$049$idx = $$add;$$050 = $23;
   }
   do {
    if ((label|0) == 6) {
     $24 = ($12<<24>>24)==(69);
     if ($24) {
      $25 = ($$050|0)==($3|0);
      L11: do {
       if (!($25)) {
        $$0$i$i = $$050;$$07$i$i = $3;
        while(1) {
         $26 = ((($$0$i$i)) + -1|0);
         $27 = ($$07$i$i>>>0)<($26>>>0);
         if (!($27)) {
          break L11;
         }
         $28 = HEAP8[$$07$i$i>>0]|0;
         $29 = HEAP8[$26>>0]|0;
         HEAP8[$$07$i$i>>0] = $29;
         HEAP8[$26>>0] = $28;
         $30 = ((($$07$i$i)) + 1|0);
         $$0$i$i = $26;$$07$i$i = $30;
        }
       }
      } while(0);
      dest=$4; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $31 = +HEAPF64[$3>>3];
      HEAPF64[$vararg_buffer>>3] = $31;
      $32 = (_snprintf($4,32,4907,$vararg_buffer)|0);
      $33 = ($32>>>0)>(31);
      if ($33) {
       break;
      }
      ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
      $34 = ($32>>>0)<(11);
      if ($34) {
       $35 = $32&255;
       $36 = ((($6)) + 11|0);
       HEAP8[$36>>0] = $35;
       $$0$i$i57 = $6;
      } else {
       $37 = (($32) + 16)|0;
       $38 = $37 & -16;
       $39 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($38)|0);
       HEAP32[$6>>2] = $39;
       $40 = $38 | -2147483648;
       $41 = ((($6)) + 8|0);
       HEAP32[$41>>2] = $40;
       $42 = ((($6)) + 4|0);
       HEAP32[$42>>2] = $32;
       $$0$i$i57 = $39;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i57,$4,$32)|0);
      $43 = (($$0$i$i57) + ($32)|0);
      HEAP8[$vararg_buffer>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($43,$vararg_buffer);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($5,$6);
      $44 = ((($2)) + 4|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = ((($2)) + 8|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($45>>>0)<($47>>>0);
      if ($48) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($45,$5);
       $49 = HEAP32[$44>>2]|0;
       $50 = ((($49)) + 24|0);
       HEAP32[$44>>2] = $50;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$5);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      $51 = ((($$049$ptr)) + 1|0);
      $$247$ph = $51;
     } else {
      $$247$ph = $0;
     }
     $$3 = $$247$ph;
     break L1;
    }
   } while(0);
   $$3 = $0;
  } else {
   $$3 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIeNS0_2DbEEEPKcS4_S4_RT0_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $$0$i$i57 = 0, $$049$add = 0, $$049$idx = 0, $$049$ptr = 0, $$050 = 0, $$07$i$i = 0, $$247$ph = 0, $$3 = 0, $$add = 0, $$ptr = 0, $$v = 0, $$v56 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $isdigit = 0, $isdigit55 = 0, $isdigittmp = 0, $isdigittmp54 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer = sp + 8|0;
 $3 = sp;
 $4 = sp + 56|0;
 $5 = sp + 16|0;
 $6 = sp + 40|0;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9>>>0)>(20);
 L1: do {
  if ($10) {
   $$049$idx = 0;$$050 = $3;
   while(1) {
    $$049$ptr = (($0) + ($$049$idx)|0);
    $11 = ($$049$idx|0)==(20);
    $12 = HEAP8[$$049$ptr>>0]|0;
    $13 = $12 << 24 >> 24;
    if ($11) {
     label = 6;
     break;
    }
    $14 = (_isxdigit($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     break;
    }
    $isdigittmp = (($13) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    $$v = $isdigit ? 0 : 9;
    $16 = (($$v) + ($13))|0;
    $$049$add = $$049$idx | 1;
    $$ptr = (($0) + ($$049$add)|0);
    $17 = HEAP8[$$ptr>>0]|0;
    $18 = $17 << 24 >> 24;
    $isdigittmp54 = (($18) + -48)|0;
    $isdigit55 = ($isdigittmp54>>>0)<(10);
    $$v56 = $isdigit55 ? 208 : 169;
    $19 = $16 << 4;
    $20 = (($19) + ($18))|0;
    $21 = (($20) + ($$v56))|0;
    $22 = $21&255;
    HEAP8[$$050>>0] = $22;
    $$add = (($$049$idx) + 2)|0;
    $23 = ((($$050)) + 1|0);
    $$049$idx = $$add;$$050 = $23;
   }
   do {
    if ((label|0) == 6) {
     $24 = ($12<<24>>24)==(69);
     if ($24) {
      $25 = ($$050|0)==($3|0);
      L11: do {
       if (!($25)) {
        $$0$i$i = $$050;$$07$i$i = $3;
        while(1) {
         $26 = ((($$0$i$i)) + -1|0);
         $27 = ($$07$i$i>>>0)<($26>>>0);
         if (!($27)) {
          break L11;
         }
         $28 = HEAP8[$$07$i$i>>0]|0;
         $29 = HEAP8[$26>>0]|0;
         HEAP8[$$07$i$i>>0] = $29;
         HEAP8[$26>>0] = $28;
         $30 = ((($$07$i$i)) + 1|0);
         $$0$i$i = $26;$$07$i$i = $30;
        }
       }
      } while(0);
      dest=$4; stop=dest+40|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $31 = +HEAPF64[$3>>3];
      HEAPF64[$vararg_buffer>>3] = $31;
      $32 = (_snprintf($4,40,4902,$vararg_buffer)|0);
      $33 = ($32>>>0)>(39);
      if ($33) {
       break;
      }
      ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
      $34 = ($32>>>0)<(11);
      if ($34) {
       $35 = $32&255;
       $36 = ((($6)) + 11|0);
       HEAP8[$36>>0] = $35;
       $$0$i$i57 = $6;
      } else {
       $37 = (($32) + 16)|0;
       $38 = $37 & -16;
       $39 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($38)|0);
       HEAP32[$6>>2] = $39;
       $40 = $38 | -2147483648;
       $41 = ((($6)) + 8|0);
       HEAP32[$41>>2] = $40;
       $42 = ((($6)) + 4|0);
       HEAP32[$42>>2] = $32;
       $$0$i$i57 = $39;
      }
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i57,$4,$32)|0);
      $43 = (($$0$i$i57) + ($32)|0);
      HEAP8[$vararg_buffer>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($43,$vararg_buffer);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($5,$6);
      $44 = ((($2)) + 4|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = ((($2)) + 8|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($45>>>0)<($47>>>0);
      if ($48) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($45,$5);
       $49 = HEAP32[$44>>2]|0;
       $50 = ((($49)) + 24|0);
       HEAP32[$44>>2] = $50;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($2,$5);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      $51 = ((($$049$ptr)) + 1|0);
      $$247$ph = $51;
     } else {
      $$247$ph = $0;
     }
     $$3 = $$247$ph;
     break L1;
    }
   } while(0);
   $$3 = $0;
  } else {
   $$3 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $3 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj(16)|0);
 HEAP32[$0>>2] = $3;
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = -2147483632;
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = 13;
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($3,$1,13)|0);
 $6 = ((($3)) + 13|0);
 HEAP8[$2>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($6,$2);
 $7 = ((($0)) + 12|0);
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $8 = (($7) + ($$0$i$i<<2)|0);
  HEAP32[$8>>2] = 0;
  $9 = (($$0$i$i) + 1)|0;
  $$0$i$i = $9;
 }
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_117parse_nested_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0151$off0$ph = 0, $$0157 = 0, $$1158 = 0, $$2159 = 0, $$2159$ph = 0, $$4166 = 0, $$pre$i = 0, $$pre$i183 = 0, $$pre$i185 = 0, $$pre$i194 = 0, $$pre$i203 = 0, $$pre$i211 = 0, $$pre$i220 = 0, $$sink = 0, $$sroa$0$0$$sroa_idx$i207 = 0, $$sroa$0$0$copyload$i191226 = 0, $$sroa$0$0$copyload$i200224 = 0, $$sroa$0$0$copyload$i208223 = 0, $$sroa$0$0$copyload$i217225 = 0, $$sroa$0$0$copyload$i227 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond179 = 0, $or$cond180 = 0, $or$cond181 = 0, $or$cond182 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $3 = sp + 36|0;
 $4 = sp + 24|0;
 $5 = sp + 8|0;
 $6 = sp;
 $7 = ($0|0)==($1|0);
 L1: do {
  if ($7) {
   $$4166 = $0;
  } else {
   $8 = HEAP8[$0>>0]|0;
   $9 = ($8<<24>>24)==(78);
   if ($9) {
    $10 = ((($0)) + 1|0);
    $11 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($10,$1,$3)|0);
    $12 = ($11|0)==($1|0);
    L4: do {
     if (!($12)) {
      $13 = ((($2)) + 52|0);
      HEAP32[$13>>2] = 0;
      $14 = HEAP8[$11>>0]|0;
      switch ($14<<24>>24) {
      case 82:  {
       $$sink = 1;
       label = 6;
       break;
      }
      case 79:  {
       $$sink = 2;
       label = 6;
       break;
      }
      default: {
       $$0157 = $11;
      }
      }
      if ((label|0) == 6) {
       HEAP32[$13>>2] = $$sink;
       $15 = ((($11)) + 1|0);
       $$0157 = $15;
      }
      $16 = ((($2)) + 4|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = ((($2)) + 8|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = ($17>>>0)<($19>>>0);
      if ($20) {
       ;HEAP32[$17>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;HEAP32[$17+12>>2]=0|0;HEAP32[$17+16>>2]=0|0;HEAP32[$17+20>>2]=0|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($17);
       $21 = HEAP32[$16>>2]|0;
       $22 = ((($21)) + 24|0);
       HEAP32[$16>>2] = $22;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE24__emplace_back_slow_pathIJEEEvDpOT_($2);
      }
      $23 = $1;
      $24 = $$0157;
      $25 = (($23) - ($24))|0;
      $26 = ($25|0)>(1);
      if ($26) {
       $27 = HEAP8[$$0157>>0]|0;
       $28 = ($27<<24>>24)==(83);
       if ($28) {
        $29 = ((($$0157)) + 1|0);
        $30 = HEAP8[$29>>0]|0;
        $31 = ($30<<24>>24)==(116);
        if ($31) {
         $32 = ((($$0157)) + 2|0);
         $33 = HEAP32[$16>>2]|0;
         $34 = ((($33)) + -24|0);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($34,4974);
         $$1158 = $32;
        } else {
         $$1158 = $$0157;
        }
       } else {
        $$1158 = $$0157;
       }
      } else {
       $$1158 = $$0157;
      }
      $35 = ($$1158|0)==($1|0);
      if ($35) {
       $64 = HEAP32[$16>>2]|0;
       $65 = ((($64)) + -24|0);
       $66 = $64;
       while(1) {
        $67 = ($66|0)==($65|0);
        if ($67) {
         break L4;
        }
        $68 = ((($66)) + -24|0);
        HEAP32[$16>>2] = $68;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($68);
        $$pre$i = HEAP32[$16>>2]|0;
        $66 = $$pre$i;
       }
      }
      $36 = ((($4)) + 11|0);
      $37 = ((($4)) + 4|0);
      $$sroa$0$0$$sroa_idx$i207 = ((($2)) + 12|0);
      $38 = ((($2)) + 20|0);
      $39 = ((($2)) + 24|0);
      $40 = ((($5)) + 12|0);
      $41 = ((($5)) + 4|0);
      $42 = ((($5)) + 8|0);
      $43 = ((($2)) + 16|0);
      $44 = ((($5)) + 12|0);
      $45 = ((($5)) + 4|0);
      $46 = ((($5)) + 8|0);
      $47 = ((($5)) + 11|0);
      $48 = ((($5)) + 4|0);
      $49 = ((($5)) + 11|0);
      $50 = ((($5)) + 4|0);
      $51 = ((($5)) + 12|0);
      $52 = ((($5)) + 4|0);
      $53 = ((($5)) + 8|0);
      $54 = ((($5)) + 12|0);
      $55 = ((($5)) + 4|0);
      $56 = ((($5)) + 8|0);
      $57 = ((($5)) + 11|0);
      $58 = ((($5)) + 4|0);
      $59 = ((($5)) + 12|0);
      $60 = ((($5)) + 4|0);
      $61 = ((($5)) + 8|0);
      $62 = ((($5)) + 11|0);
      $63 = ((($5)) + 4|0);
      $$0151$off0$ph = 0;$$2159$ph = $$1158;
      L26: while(1) {
       $$2159 = $$2159$ph;
       L28: while(1) {
        $69 = HEAP8[$$2159>>0]|0;
        $70 = ($69<<24>>24)==(69);
        if ($70) {
         break L26;
        }
        $71 = $69 << 24 >> 24;
        switch ($71|0) {
        case 83:  {
         label = 21;
         break L28;
         break;
        }
        case 84:  {
         label = 37;
         break L28;
         break;
        }
        case 68:  {
         label = 51;
         break L28;
         break;
        }
        case 73:  {
         break;
        }
        case 76:  {
         $241 = ((($$2159)) + 1|0);
         $242 = ($241|0)==($1|0);
         if ($242) {
          break L4;
         } else {
          $$2159 = $241;
          continue L28;
         }
         break;
        }
        default: {
         break L28;
        }
        }
        $208 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($$2159,$1,$2)|0);
        $209 = ($208|0)==($$2159|0);
        $210 = ($208|0)==($1|0);
        $or$cond181 = $209 | $210;
        if ($or$cond181) {
         break L4;
        }
        $211 = HEAP32[$16>>2]|0;
        $212 = ((($211)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4,$212);
        $213 = HEAP32[$16>>2]|0;
        $214 = ((($213)) + -24|0);
        $215 = $213;
        while(1) {
         $216 = ($215|0)==($214|0);
         if ($216) {
          break;
         }
         $217 = ((($215)) + -24|0);
         HEAP32[$16>>2] = $217;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($217);
         $$pre$i203 = HEAP32[$16>>2]|0;
         $215 = $$pre$i203;
        }
        $218 = ((($213)) + -48|0);
        $219 = HEAP8[$36>>0]|0;
        $220 = ($219<<24>>24)<(0);
        $221 = HEAP32[$4>>2]|0;
        $222 = HEAP32[$37>>2]|0;
        $223 = $219&255;
        $224 = $220 ? $221 : $4;
        $225 = $220 ? $222 : $223;
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($218,$224,$225)|0);
        $226 = HEAP32[$16>>2]|0;
        $227 = ((($226)) + -24|0);
        $$sroa$0$0$copyload$i208223 = HEAP32[$$sroa$0$0$$sroa_idx$i207>>2]|0;
        HEAP32[$6>>2] = $$sroa$0$0$copyload$i208223;
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($5,$227,$6);
        $228 = HEAP32[$38>>2]|0;
        $229 = HEAP32[$39>>2]|0;
        $230 = ($228>>>0)<($229>>>0);
        if ($230) {
         HEAP32[$228>>2] = 0;
         $231 = ((($228)) + 4|0);
         HEAP32[$231>>2] = 0;
         $232 = ((($228)) + 8|0);
         $233 = HEAP32[$40>>2]|0;
         HEAP32[$232>>2] = 0;
         $234 = ((($228)) + 12|0);
         HEAP32[$234>>2] = $233;
         $235 = HEAP32[$5>>2]|0;
         HEAP32[$228>>2] = $235;
         $236 = HEAP32[$41>>2]|0;
         HEAP32[$231>>2] = $236;
         $237 = HEAP32[$42>>2]|0;
         $238 = ((($228)) + 8|0);
         HEAP32[$238>>2] = $237;
         HEAP32[$42>>2] = 0;
         HEAP32[$41>>2] = 0;
         HEAP32[$5>>2] = 0;
         $239 = HEAP32[$38>>2]|0;
         $240 = ((($239)) + 16|0);
         HEAP32[$38>>2] = $240;
        } else {
         __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($43,$5);
        }
        __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($5);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
        $$2159 = $208;
       }
       L43: do {
        if ((label|0) == 21) {
         label = 0;
         $72 = ((($$2159)) + 1|0);
         $73 = ($72|0)==($1|0);
         if (!($73)) {
          $74 = HEAP8[$72>>0]|0;
          $75 = ($74<<24>>24)==(116);
          if ($75) {
           break;
          }
         }
         $76 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($$2159,$1,$2)|0);
         $77 = ($76|0)==($$2159|0);
         $78 = ($76|0)==($1|0);
         $or$cond = $77 | $78;
         if ($or$cond) {
          break L4;
         }
         $79 = HEAP32[$16>>2]|0;
         $80 = ((($79)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4,$80);
         $81 = HEAP32[$16>>2]|0;
         $82 = ((($81)) + -24|0);
         $83 = $81;
         while(1) {
          $84 = ($83|0)==($82|0);
          if ($84) {
           break;
          }
          $85 = ((($83)) + -24|0);
          HEAP32[$16>>2] = $85;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($85);
          $$pre$i183 = HEAP32[$16>>2]|0;
          $83 = $$pre$i183;
         }
         $86 = ((($81)) + -48|0);
         $87 = ((($86)) + 11|0);
         $88 = HEAP8[$87>>0]|0;
         $89 = ($88<<24>>24)<(0);
         if ($89) {
          $90 = ((($81)) + -44|0);
          $91 = HEAP32[$90>>2]|0;
          $93 = $91;
         } else {
          $92 = $88&255;
          $93 = $92;
         }
         $94 = ($93|0)==(0);
         if ($94) {
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($86,$4);
         } else {
          __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($5,3670,$4);
          $95 = HEAP32[$16>>2]|0;
          $96 = ((($95)) + -24|0);
          $97 = HEAP8[$49>>0]|0;
          $98 = ($97<<24>>24)<(0);
          $99 = HEAP32[$5>>2]|0;
          $100 = HEAP32[$50>>2]|0;
          $101 = $97&255;
          $102 = $98 ? $99 : $5;
          $103 = $98 ? $100 : $101;
          (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($96,$102,$103)|0);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
          $104 = HEAP32[$16>>2]|0;
          $105 = ((($104)) + -24|0);
          $$sroa$0$0$copyload$i227 = HEAP32[$$sroa$0$0$$sroa_idx$i207>>2]|0;
          HEAP32[$6>>2] = $$sroa$0$0$copyload$i227;
          __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($5,$105,$6);
          $106 = HEAP32[$38>>2]|0;
          $107 = HEAP32[$39>>2]|0;
          $108 = ($106>>>0)<($107>>>0);
          if ($108) {
           HEAP32[$106>>2] = 0;
           $109 = ((($106)) + 4|0);
           HEAP32[$109>>2] = 0;
           $110 = ((($106)) + 8|0);
           $111 = HEAP32[$51>>2]|0;
           HEAP32[$110>>2] = 0;
           $112 = ((($106)) + 12|0);
           HEAP32[$112>>2] = $111;
           $113 = HEAP32[$5>>2]|0;
           HEAP32[$106>>2] = $113;
           $114 = HEAP32[$52>>2]|0;
           HEAP32[$109>>2] = $114;
           $115 = HEAP32[$53>>2]|0;
           $116 = ((($106)) + 8|0);
           HEAP32[$116>>2] = $115;
           HEAP32[$53>>2] = 0;
           HEAP32[$52>>2] = 0;
           HEAP32[$5>>2] = 0;
           $117 = HEAP32[$38>>2]|0;
           $118 = ((($117)) + 16|0);
           HEAP32[$38>>2] = $118;
          } else {
           __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($43,$5);
          }
          __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($5);
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
         $$0151$off0$ph = 1;$$2159$ph = $76;
         continue L26;
        }
        else if ((label|0) == 37) {
         label = 0;
         $119 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($$2159,$1,$2)|0);
         $120 = ($119|0)==($$2159|0);
         $121 = ($119|0)==($1|0);
         $or$cond179 = $120 | $121;
         if ($or$cond179) {
          break L4;
         }
         $122 = HEAP32[$16>>2]|0;
         $123 = ((($122)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4,$123);
         $124 = HEAP32[$16>>2]|0;
         $125 = ((($124)) + -24|0);
         $126 = $124;
         while(1) {
          $127 = ($126|0)==($125|0);
          if ($127) {
           break;
          }
          $128 = ((($126)) + -24|0);
          HEAP32[$16>>2] = $128;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($128);
          $$pre$i185 = HEAP32[$16>>2]|0;
          $126 = $$pre$i185;
         }
         $129 = ((($124)) + -48|0);
         $130 = ((($129)) + 11|0);
         $131 = HEAP8[$130>>0]|0;
         $132 = ($131<<24>>24)<(0);
         if ($132) {
          $133 = ((($124)) + -44|0);
          $134 = HEAP32[$133>>2]|0;
          $136 = $134;
         } else {
          $135 = $131&255;
          $136 = $135;
         }
         $137 = ($136|0)==(0);
         if ($137) {
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($129,$4);
         } else {
          __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($5,3670,$4);
          $138 = HEAP32[$16>>2]|0;
          $139 = ((($138)) + -24|0);
          $140 = HEAP8[$57>>0]|0;
          $141 = ($140<<24>>24)<(0);
          $142 = HEAP32[$5>>2]|0;
          $143 = HEAP32[$58>>2]|0;
          $144 = $140&255;
          $145 = $141 ? $142 : $5;
          $146 = $141 ? $143 : $144;
          (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($139,$145,$146)|0);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
         }
         $147 = HEAP32[$16>>2]|0;
         $148 = ((($147)) + -24|0);
         $$sroa$0$0$copyload$i191226 = HEAP32[$$sroa$0$0$$sroa_idx$i207>>2]|0;
         HEAP32[$6>>2] = $$sroa$0$0$copyload$i191226;
         __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($5,$148,$6);
         $149 = HEAP32[$38>>2]|0;
         $150 = HEAP32[$39>>2]|0;
         $151 = ($149>>>0)<($150>>>0);
         if ($151) {
          HEAP32[$149>>2] = 0;
          $152 = ((($149)) + 4|0);
          HEAP32[$152>>2] = 0;
          $153 = ((($149)) + 8|0);
          $154 = HEAP32[$54>>2]|0;
          HEAP32[$153>>2] = 0;
          $155 = ((($149)) + 12|0);
          HEAP32[$155>>2] = $154;
          $156 = HEAP32[$5>>2]|0;
          HEAP32[$149>>2] = $156;
          $157 = HEAP32[$55>>2]|0;
          HEAP32[$152>>2] = $157;
          $158 = HEAP32[$56>>2]|0;
          $159 = ((($149)) + 8|0);
          HEAP32[$159>>2] = $158;
          HEAP32[$56>>2] = 0;
          HEAP32[$55>>2] = 0;
          HEAP32[$5>>2] = 0;
          $160 = HEAP32[$38>>2]|0;
          $161 = ((($160)) + 16|0);
          HEAP32[$38>>2] = $161;
         } else {
          __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($43,$5);
         }
         __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($5);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
         $$0151$off0$ph = 1;$$2159$ph = $119;
         continue L26;
        }
        else if ((label|0) == 51) {
         label = 0;
         $162 = ((($$2159)) + 1|0);
         $163 = ($162|0)==($1|0);
         if (!($163)) {
          $164 = HEAP8[$162>>0]|0;
          switch ($164<<24>>24) {
          case 84: case 116:  {
           break;
          }
          default: {
           break L43;
          }
          }
         }
         $165 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($$2159,$1,$2)|0);
         $166 = ($165|0)==($$2159|0);
         $167 = ($165|0)==($1|0);
         $or$cond180 = $166 | $167;
         if ($or$cond180) {
          break L4;
         }
         $168 = HEAP32[$16>>2]|0;
         $169 = ((($168)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4,$169);
         $170 = HEAP32[$16>>2]|0;
         $171 = ((($170)) + -24|0);
         $172 = $170;
         while(1) {
          $173 = ($172|0)==($171|0);
          if ($173) {
           break;
          }
          $174 = ((($172)) + -24|0);
          HEAP32[$16>>2] = $174;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($174);
          $$pre$i194 = HEAP32[$16>>2]|0;
          $172 = $$pre$i194;
         }
         $175 = ((($170)) + -48|0);
         $176 = ((($175)) + 11|0);
         $177 = HEAP8[$176>>0]|0;
         $178 = ($177<<24>>24)<(0);
         if ($178) {
          $179 = ((($170)) + -44|0);
          $180 = HEAP32[$179>>2]|0;
          $182 = $180;
         } else {
          $181 = $177&255;
          $182 = $181;
         }
         $183 = ($182|0)==(0);
         if ($183) {
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($175,$4);
         } else {
          __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($5,3670,$4);
          $184 = HEAP32[$16>>2]|0;
          $185 = ((($184)) + -24|0);
          $186 = HEAP8[$62>>0]|0;
          $187 = ($186<<24>>24)<(0);
          $188 = HEAP32[$5>>2]|0;
          $189 = HEAP32[$63>>2]|0;
          $190 = $186&255;
          $191 = $187 ? $188 : $5;
          $192 = $187 ? $189 : $190;
          (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($185,$191,$192)|0);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
         }
         $193 = HEAP32[$16>>2]|0;
         $194 = ((($193)) + -24|0);
         $$sroa$0$0$copyload$i200224 = HEAP32[$$sroa$0$0$$sroa_idx$i207>>2]|0;
         HEAP32[$6>>2] = $$sroa$0$0$copyload$i200224;
         __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($5,$194,$6);
         $195 = HEAP32[$38>>2]|0;
         $196 = HEAP32[$39>>2]|0;
         $197 = ($195>>>0)<($196>>>0);
         if ($197) {
          HEAP32[$195>>2] = 0;
          $198 = ((($195)) + 4|0);
          HEAP32[$198>>2] = 0;
          $199 = ((($195)) + 8|0);
          $200 = HEAP32[$59>>2]|0;
          HEAP32[$199>>2] = 0;
          $201 = ((($195)) + 12|0);
          HEAP32[$201>>2] = $200;
          $202 = HEAP32[$5>>2]|0;
          HEAP32[$195>>2] = $202;
          $203 = HEAP32[$60>>2]|0;
          HEAP32[$198>>2] = $203;
          $204 = HEAP32[$61>>2]|0;
          $205 = ((($195)) + 8|0);
          HEAP32[$205>>2] = $204;
          HEAP32[$61>>2] = 0;
          HEAP32[$60>>2] = 0;
          HEAP32[$5>>2] = 0;
          $206 = HEAP32[$38>>2]|0;
          $207 = ((($206)) + 16|0);
          HEAP32[$38>>2] = $207;
         } else {
          __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($43,$5);
         }
         __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($5);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
         $$0151$off0$ph = 1;$$2159$ph = $165;
         continue L26;
        }
       } while(0);
       $243 = (__ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($$2159,$1,$2)|0);
       $244 = ($243|0)==($$2159|0);
       $245 = ($243|0)==($1|0);
       $or$cond182 = $244 | $245;
       if ($or$cond182) {
        break L4;
       }
       $246 = HEAP32[$16>>2]|0;
       $247 = ((($246)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4,$247);
       $248 = HEAP32[$16>>2]|0;
       $249 = ((($248)) + -24|0);
       $250 = $248;
       while(1) {
        $251 = ($250|0)==($249|0);
        if ($251) {
         break;
        }
        $252 = ((($250)) + -24|0);
        HEAP32[$16>>2] = $252;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($252);
        $$pre$i211 = HEAP32[$16>>2]|0;
        $250 = $$pre$i211;
       }
       $253 = ((($248)) + -48|0);
       $254 = ((($253)) + 11|0);
       $255 = HEAP8[$254>>0]|0;
       $256 = ($255<<24>>24)<(0);
       if ($256) {
        $257 = ((($248)) + -44|0);
        $258 = HEAP32[$257>>2]|0;
        $260 = $258;
       } else {
        $259 = $255&255;
        $260 = $259;
       }
       $261 = ($260|0)==(0);
       if ($261) {
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($253,$4);
       } else {
        __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($5,3670,$4);
        $262 = HEAP32[$16>>2]|0;
        $263 = ((($262)) + -24|0);
        $264 = HEAP8[$47>>0]|0;
        $265 = ($264<<24>>24)<(0);
        $266 = HEAP32[$5>>2]|0;
        $267 = HEAP32[$48>>2]|0;
        $268 = $264&255;
        $269 = $265 ? $266 : $5;
        $270 = $265 ? $267 : $268;
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($263,$269,$270)|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
       }
       $271 = HEAP32[$16>>2]|0;
       $272 = ((($271)) + -24|0);
       $$sroa$0$0$copyload$i217225 = HEAP32[$$sroa$0$0$$sroa_idx$i207>>2]|0;
       HEAP32[$6>>2] = $$sroa$0$0$copyload$i217225;
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($5,$272,$6);
       $273 = HEAP32[$38>>2]|0;
       $274 = HEAP32[$39>>2]|0;
       $275 = ($273>>>0)<($274>>>0);
       if ($275) {
        HEAP32[$273>>2] = 0;
        $276 = ((($273)) + 4|0);
        HEAP32[$276>>2] = 0;
        $277 = ((($273)) + 8|0);
        $278 = HEAP32[$44>>2]|0;
        HEAP32[$277>>2] = 0;
        $279 = ((($273)) + 12|0);
        HEAP32[$279>>2] = $278;
        $280 = HEAP32[$5>>2]|0;
        HEAP32[$273>>2] = $280;
        $281 = HEAP32[$45>>2]|0;
        HEAP32[$276>>2] = $281;
        $282 = HEAP32[$46>>2]|0;
        $283 = ((($273)) + 8|0);
        HEAP32[$283>>2] = $282;
        HEAP32[$46>>2] = 0;
        HEAP32[$45>>2] = 0;
        HEAP32[$5>>2] = 0;
        $284 = HEAP32[$38>>2]|0;
        $285 = ((($284)) + 16|0);
        HEAP32[$38>>2] = $285;
       } else {
        __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($43,$5);
       }
       __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($5);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
       $$0151$off0$ph = 1;$$2159$ph = $243;
      }
      $286 = ((($$2159)) + 1|0);
      $287 = HEAP32[$3>>2]|0;
      $288 = ((($2)) + 48|0);
      HEAP32[$288>>2] = $287;
      L123: do {
       if ($$0151$off0$ph) {
        $289 = ((($2)) + 16|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = HEAP32[$38>>2]|0;
        $292 = ($290|0)==($291|0);
        if (!($292)) {
         $293 = ((($291)) + -16|0);
         $294 = $291;
         while(1) {
          $295 = ($294|0)==($293|0);
          if ($295) {
           break L123;
          }
          $296 = ((($294)) + -16|0);
          HEAP32[$38>>2] = $296;
          __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($296);
          $$pre$i220 = HEAP32[$38>>2]|0;
          $294 = $$pre$i220;
         }
        }
       }
      } while(0);
      $$4166 = $286;
      break L1;
     }
    } while(0);
    $$4166 = $0;
   } else {
    $$4166 = $0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$4166|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_116parse_local_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$4 = 0, $$pre$i = 0, $$pre$i78 = 0, $$pre$i80 = 0, $$pre$i83 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = ($0|0)==($1|0);
 L1: do {
  if ($4) {
   $$4 = $0;
  } else {
   $5 = HEAP8[$0>>0]|0;
   $6 = ($5<<24>>24)==(90);
   if ($6) {
    $7 = ((($0)) + 1|0);
    $8 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($7,$1,$2)|0);
    $9 = ($8|0)==($7|0);
    $10 = ($8|0)==($1|0);
    $or$cond = $9 | $10;
    if ($or$cond) {
     $$4 = $0;
    } else {
     $11 = HEAP8[$8>>0]|0;
     $12 = ($11<<24>>24)==(69);
     if ($12) {
      $13 = ((($8)) + 1|0);
      $14 = ($13|0)==($1|0);
      if ($14) {
       $$4 = $0;
      } else {
       $15 = HEAP8[$13>>0]|0;
       $16 = $15 << 24 >> 24;
       switch ($16|0) {
       case 115:  {
        $17 = ((($8)) + 2|0);
        $18 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($17,$1)|0);
        $19 = HEAP32[$2>>2]|0;
        $20 = ((($2)) + 4|0);
        $21 = HEAP32[$20>>2]|0;
        $22 = ($19|0)==($21|0);
        if ($22) {
         $$4 = $18;
         break L1;
        }
        $23 = ((($21)) + -24|0);
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($23,4957)|0);
        $$4 = $18;
        break L1;
        break;
       }
       case 100:  {
        $24 = ((($8)) + 2|0);
        $25 = ($24|0)==($1|0);
        if ($25) {
         $$4 = $0;
         break L1;
        }
        $26 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($24,$1)|0);
        $27 = ($26|0)==($1|0);
        if ($27) {
         $$4 = $0;
         break L1;
        }
        $28 = HEAP8[$26>>0]|0;
        $29 = ($28<<24>>24)==(95);
        if (!($29)) {
         $$4 = $0;
         break L1;
        }
        $30 = ((($26)) + 1|0);
        $31 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($30,$1,$2)|0);
        $32 = ($31|0)==($30|0);
        $33 = ((($2)) + 4|0);
        if ($32) {
         $58 = HEAP32[$33>>2]|0;
         $59 = ((($58)) + -24|0);
         $60 = $58;
         while(1) {
          $61 = ($60|0)==($59|0);
          if ($61) {
           $$4 = $0;
           break L1;
          }
          $62 = ((($60)) + -24|0);
          HEAP32[$33>>2] = $62;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($62);
          $$pre$i78 = HEAP32[$33>>2]|0;
          $60 = $$pre$i78;
         }
        }
        $34 = HEAP32[$33>>2]|0;
        $35 = HEAP32[$2>>2]|0;
        $36 = (($34) - ($35))|0;
        $37 = (($36|0) / 24)&-1;
        $38 = ($37>>>0)<(2);
        if ($38) {
         $$4 = $0;
         break L1;
        }
        $39 = $34;
        $40 = ((($39)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$40);
        $41 = HEAP32[$33>>2]|0;
        $42 = ((($41)) + -24|0);
        $43 = $41;
        while(1) {
         $44 = ($43|0)==($42|0);
         if ($44) {
          break;
         }
         $45 = ((($43)) + -24|0);
         HEAP32[$33>>2] = $45;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($45);
         $$pre$i = HEAP32[$33>>2]|0;
         $43 = $$pre$i;
        }
        $46 = ((($41)) + -48|0);
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($46,3670)|0);
        $47 = HEAP32[$33>>2]|0;
        $48 = ((($47)) + -24|0);
        $49 = ((($3)) + 11|0);
        $50 = HEAP8[$49>>0]|0;
        $51 = ($50<<24>>24)<(0);
        $52 = HEAP32[$3>>2]|0;
        $53 = ((($3)) + 4|0);
        $54 = HEAP32[$53>>2]|0;
        $55 = $50&255;
        $56 = $51 ? $52 : $3;
        $57 = $51 ? $54 : $55;
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($48,$56,$57)|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
        $$4 = $31;
        break L1;
        break;
       }
       default: {
        $63 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($13,$1,$2)|0);
        $64 = ($63|0)==($13|0);
        if ($64) {
         $91 = ((($2)) + 4|0);
         $92 = HEAP32[$91>>2]|0;
         $93 = ((($92)) + -24|0);
         $94 = $92;
         while(1) {
          $95 = ($94|0)==($93|0);
          if ($95) {
           $$4 = $0;
           break L1;
          }
          $96 = ((($94)) + -24|0);
          HEAP32[$91>>2] = $96;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($96);
          $$pre$i83 = HEAP32[$91>>2]|0;
          $94 = $$pre$i83;
         }
        }
        $65 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($63,$1)|0);
        $66 = ((($2)) + 4|0);
        $67 = HEAP32[$66>>2]|0;
        $68 = HEAP32[$2>>2]|0;
        $69 = (($67) - ($68))|0;
        $70 = (($69|0) / 24)&-1;
        $71 = ($70>>>0)<(2);
        if ($71) {
         $$4 = $65;
         break L1;
        }
        $72 = $67;
        $73 = ((($72)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$73);
        $74 = HEAP32[$66>>2]|0;
        $75 = ((($74)) + -24|0);
        $76 = $74;
        while(1) {
         $77 = ($76|0)==($75|0);
         if ($77) {
          break;
         }
         $78 = ((($76)) + -24|0);
         HEAP32[$66>>2] = $78;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($78);
         $$pre$i80 = HEAP32[$66>>2]|0;
         $76 = $$pre$i80;
        }
        $79 = ((($74)) + -48|0);
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($79,3670)|0);
        $80 = HEAP32[$66>>2]|0;
        $81 = ((($80)) + -24|0);
        $82 = ((($3)) + 11|0);
        $83 = HEAP8[$82>>0]|0;
        $84 = ($83<<24>>24)<(0);
        $85 = HEAP32[$3>>2]|0;
        $86 = ((($3)) + 4|0);
        $87 = HEAP32[$86>>2]|0;
        $88 = $83&255;
        $89 = $84 ? $85 : $3;
        $90 = $84 ? $87 : $88;
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($81,$89,$90)|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
        $$4 = $65;
        break L1;
       }
       }
      }
     } else {
      $$4 = $0;
     }
    }
   } else {
    $$4 = $0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$4|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_unscoped_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$026$off0 = 0, $$027 = 0, $$1 = 0, $$mux = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $brmerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $0;
 $5 = (($3) - ($4))|0;
 $6 = ($5|0)>(1);
 if ($6) {
  $7 = HEAP8[$0>>0]|0;
  $8 = ($7<<24>>24)==(83);
  if ($8) {
   $9 = ((($0)) + 1|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = ($10<<24>>24)==(116);
   if ($11) {
    $12 = ((($0)) + 2|0);
    $13 = ($12|0)==($1|0);
    if ($13) {
     $$026$off0 = 0;$$027 = $1;
    } else {
     $14 = HEAP8[$12>>0]|0;
     $15 = ($14<<24>>24)==(76);
     $16 = ((($0)) + 3|0);
     $$ = $15 ? $16 : $12;
     $$026$off0 = 0;$$027 = $$;
    }
   } else {
    $$026$off0 = 1;$$027 = $0;
   }
  } else {
   $$026$off0 = 1;$$027 = $0;
  }
  $17 = (__ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($$027,$1,$2)|0);
  $18 = ($17|0)==($$027|0);
  $brmerge = $$026$off0 | $18;
  $$mux = $18 ? $0 : $17;
  if ($brmerge) {
   $$1 = $$mux;
  } else {
   $19 = HEAP32[$2>>2]|0;
   $20 = ((($2)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($19|0)==($21|0);
   if ($22) {
    $$1 = $0;
   } else {
    $23 = ((($21)) + -24|0);
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($23,0,3892)|0);
    $$1 = $17;
   }
  }
 } else {
  $$1 = $0;
 }
 return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$029 = 0, $$1 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit32 = 0, $isdigit34 = 0, $isdigit36 = 0, $isdigittmp = 0, $isdigittmp31 = 0, $isdigittmp33 = 0, $isdigittmp35 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 L1: do {
  if ($2) {
   $$1 = $0;
  } else {
   $3 = HEAP8[$0>>0]|0;
   $4 = ($3<<24>>24)==(95);
   if (!($4)) {
    $18 = $3 << 24 >> 24;
    $isdigittmp = (($18) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    if ($isdigit) {
     $$pn = $0;
    } else {
     $$1 = $0;
     break;
    }
    while(1) {
     $$0 = ((($$pn)) + 1|0);
     $19 = ($$0|0)==($1|0);
     if ($19) {
      $$1 = $1;
      break L1;
     }
     $20 = HEAP8[$$0>>0]|0;
     $21 = $20 << 24 >> 24;
     $isdigittmp31 = (($21) + -48)|0;
     $isdigit32 = ($isdigittmp31>>>0)<(10);
     if ($isdigit32) {
      $$pn = $$0;
     } else {
      $$1 = $$0;
      break L1;
     }
    }
   }
   $5 = ((($0)) + 1|0);
   $6 = ($5|0)==($1|0);
   if ($6) {
    $$1 = $0;
   } else {
    $7 = HEAP8[$5>>0]|0;
    $8 = $7 << 24 >> 24;
    $isdigittmp33 = (($8) + -48)|0;
    $isdigit34 = ($isdigittmp33>>>0)<(10);
    if ($isdigit34) {
     $9 = ((($0)) + 2|0);
     $$1 = $9;
     break;
    }
    $10 = ($7<<24>>24)==(95);
    if ($10) {
     $11 = ((($0)) + 2|0);
     $$029 = $11;
     while(1) {
      $12 = ($$029|0)==($1|0);
      if ($12) {
       $$1 = $0;
       break L1;
      }
      $13 = HEAP8[$$029>>0]|0;
      $14 = $13 << 24 >> 24;
      $isdigittmp35 = (($14) + -48)|0;
      $isdigit36 = ($isdigittmp35>>>0)<(10);
      if (!($isdigit36)) {
       break;
      }
      $15 = ((($$029)) + 1|0);
      $$029 = $15;
     }
     $16 = ($13<<24>>24)==(95);
     $17 = ((($$029)) + 1|0);
     $$ = $16 ? $17 : $0;
     return ($$|0);
    } else {
     $$1 = $0;
    }
   }
  }
 } while(0);
 return ($$1|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 if (!($2)) {
  $3 = ((($1)) + 11|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)<(0);
  $6 = HEAP32[$1>>2]|0;
  $7 = ((($1)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $4&255;
  $10 = $5 ? $6 : $1;
  $11 = $5 ? $8 : $9;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($0,$10,$11);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj22EEERAT__Kc($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $2 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj(32)|0);
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = -2147483616;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = 21;
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($2,4989,21)|0);
 $5 = ((($2)) + 21|0);
 HEAP8[$1>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($5,$1);
 $6 = ((($0)) + 12|0);
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $7 = (($6) + ($$0$i$i<<2)|0);
  HEAP32[$7>>2] = 0;
  $8 = (($$0$i$i) + 1)|0;
  $$0$i$i = $8;
 }
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2IS4_EERKNS1_IT_Lj4096EEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 return;
}
function __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp + 20|0;
 $3 = sp;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 4;
 $9 = (($8) + 1)|0;
 $10 = (__ZNKSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE8max_sizeEv($0)|0);
 $11 = ($10>>>0)<($9>>>0);
 if ($11) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $12 = ((($0)) + 12|0);
  $13 = ((($0)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$0>>2]|0;
  $16 = (($14) - ($15))|0;
  $17 = $16 >> 4;
  $18 = $10 >>> 1;
  $19 = ($17>>>0)<($18>>>0);
  $20 = $16 >> 3;
  $21 = ($20>>>0)<($9>>>0);
  $$sroa$speculated$i = $21 ? $9 : $20;
  $$sroa$speculated$$i = $19 ? $$sroa$speculated$i : $10;
  $22 = HEAP32[$4>>2]|0;
  $23 = (($22) - ($15))|0;
  $24 = $23 >> 4;
  __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_($3,$$sroa$speculated$$i,$24,$12);
  $25 = ((($3)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2IS4_EERKNS1_IT_Lj4096EEE($2,$1);
  HEAP32[$26>>2] = 0;
  $27 = ((($26)) + 4|0);
  HEAP32[$27>>2] = 0;
  $28 = ((($26)) + 8|0);
  $29 = HEAP32[$2>>2]|0;
  HEAP32[$28>>2] = 0;
  $30 = ((($26)) + 12|0);
  HEAP32[$30>>2] = $29;
  $31 = ((($26)) + 16|0);
  HEAP32[$25>>2] = $31;
  __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($0,$3);
  __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$051 = 0, $$4 = 0, $$58 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond57 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==($1|0);
 L1: do {
  if ($3) {
   $$4 = $0;
  } else {
   $4 = HEAP8[$0>>0]|0;
   $5 = $4 << 24 >> 24;
   switch ($5|0) {
   case 88:  {
    $6 = ((($0)) + 1|0);
    $7 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($6,$1,$2)|0);
    $8 = ($7|0)==($6|0);
    $9 = ($7|0)==($1|0);
    $or$cond = $8 | $9;
    if ($or$cond) {
     $$4 = $0;
     break L1;
    }
    $10 = HEAP8[$7>>0]|0;
    $11 = ($10<<24>>24)==(69);
    $12 = ((($7)) + 1|0);
    $$ = $11 ? $12 : $0;
    $$4 = $$;
    break L1;
    break;
   }
   case 74:  {
    $13 = ((($0)) + 1|0);
    $14 = ($13|0)==($1|0);
    if ($14) {
     $$4 = $0;
     break L1;
    } else {
     $$051 = $13;
    }
    while(1) {
     $15 = HEAP8[$$051>>0]|0;
     $16 = ($15<<24>>24)==(69);
     if ($16) {
      break;
     }
     $17 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($$051,$1,$2)|0);
     $18 = ($17|0)==($$051|0);
     if ($18) {
      $$4 = $0;
      break L1;
     } else {
      $$051 = $17;
     }
    }
    $19 = ((($$051)) + 1|0);
    $$4 = $19;
    break L1;
    break;
   }
   case 76:  {
    $20 = ((($0)) + 1|0);
    $21 = ($20|0)==($1|0);
    if (!($21)) {
     $22 = HEAP8[$20>>0]|0;
     $23 = ($22<<24>>24)==(90);
     if ($23) {
      $24 = ((($0)) + 2|0);
      $25 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($24,$1,$2)|0);
      $26 = ($25|0)==($24|0);
      $27 = ($25|0)==($1|0);
      $or$cond57 = $26 | $27;
      if ($or$cond57) {
       $$4 = $0;
       break L1;
      }
      $28 = HEAP8[$25>>0]|0;
      $29 = ($28<<24>>24)==(69);
      $30 = ((($25)) + 1|0);
      $$58 = $29 ? $30 : $0;
      $$4 = $$58;
      break L1;
     }
    }
    $31 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
    $$4 = $31;
    break L1;
    break;
   }
   default: {
    $32 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
    $$4 = $32;
    break L1;
   }
   }
  }
 } while(0);
 return ($$4|0);
}
function __ZNKSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 268435455;
}
function __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 if ($6) {
  $8 = 0;
 } else {
  $7 = (__ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EE8allocateEj($3,$1)|0);
  $8 = $7;
 }
 HEAP32[$0>>2] = $8;
 $9 = (($8) + ($2<<4)|0);
 $10 = ((($0)) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($0)) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = (($8) + ($1<<4)|0);
 $13 = ((($0)) + 12|0);
 HEAP32[$13>>2] = $12;
 return;
}
function __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $$0$i = $4;
 while(1) {
  $6 = ($$0$i|0)==($2|0);
  if ($6) {
   break;
  }
  $7 = HEAP32[$5>>2]|0;
  $8 = ((($7)) + -16|0);
  $9 = ((($$0$i)) + -16|0);
  $10 = ((($$0$i)) + -4|0);
  HEAP32[$8>>2] = 0;
  $11 = ((($7)) + -12|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($7)) + -8|0);
  $13 = HEAP32[$10>>2]|0;
  HEAP32[$12>>2] = 0;
  $14 = ((($7)) + -4|0);
  HEAP32[$14>>2] = $13;
  $15 = HEAP32[$9>>2]|0;
  HEAP32[$8>>2] = $15;
  $16 = ((($$0$i)) + -12|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$11>>2] = $17;
  $18 = ((($$0$i)) + -8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($7)) + -8|0);
  HEAP32[$20>>2] = $19;
  HEAP32[$18>>2] = 0;
  HEAP32[$16>>2] = 0;
  HEAP32[$9>>2] = 0;
  $21 = HEAP32[$5>>2]|0;
  $22 = ((($21)) + -16|0);
  HEAP32[$5>>2] = $22;
  $$0$i = $9;
 }
 $23 = HEAP32[$0>>2]|0;
 $24 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $24;
 HEAP32[$5>>2] = $23;
 $25 = ((($1)) + 8|0);
 $26 = HEAP32[$3>>2]|0;
 $27 = HEAP32[$25>>2]|0;
 HEAP32[$3>>2] = $27;
 HEAP32[$25>>2] = $26;
 $28 = ((($0)) + 8|0);
 $29 = ((($1)) + 12|0);
 $30 = HEAP32[$28>>2]|0;
 $31 = HEAP32[$29>>2]|0;
 HEAP32[$28>>2] = $31;
 HEAP32[$29>>2] = $30;
 $32 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $32;
 return;
}
function __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 while(1) {
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($2|0);
  if ($5) {
   break;
  }
  $6 = ((($4)) + -16|0);
  HEAP32[$3>>2] = $6;
  __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($6);
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $9 = $7;
  $10 = ((($0)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) - ($9))|0;
  $15 = $14 >> 4;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EE10deallocateEPS8_j($11,$7,$15);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = $1 << 4;
 $4 = (__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj($2,$3)|0);
 return ($4|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj3EEERAT__Kc($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $2 = ((($0)) + 11|0);
 HEAP8[$2>>0] = 2;
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($0,5014,2)|0);
 $3 = ((($0)) + 2|0);
 HEAP8[$1>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($3,$1);
 $4 = ((($0)) + 12|0);
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $5 = (($4) + ($$0$i$i<<2)|0);
  HEAP32[$5>>2] = 0;
  $6 = (($$0$i$i) + 1)|0;
  $$0$i$i = $6;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEjjPKcj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$014 = 0, $$069 = 0, $$070 = 0, $$074 = 0, $$215 = 0, $$3 = 0, $$316 = 0, $$373 = 0, $$377 = 0, $$4 = 0, $$sroa$speculated = 0, $$sroa$speculated17 = 0, $$sroa$speculated18 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ((($0)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $8 = ((($0)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9>>>0)<(11);
  $$sroa$speculated17 = $10 ? $9 : 11;
  $11 = ((($0)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 & 2147483647;
  $phitmp$i = (($13) + -1)|0;
  $$sroa$speculated18 = $$sroa$speculated17;$15 = $9;$17 = $phitmp$i;
 } else {
  $6 = $4&255;
  $7 = ($6>>>0)<(11);
  $$sroa$speculated = $7 ? $6 : 11;
  $$sroa$speculated18 = $$sroa$speculated;$15 = $6;$17 = 10;
 }
 $14 = (($$sroa$speculated18) - ($15))|0;
 $16 = (($14) + ($17))|0;
 $18 = ($16>>>0)<($1>>>0);
 if ($18) {
  $47 = (($1) - ($$sroa$speculated18))|0;
  $48 = (($47) + ($15))|0;
  $49 = (($48) - ($17))|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$17,$49,$15,0,$$sroa$speculated18,$1,5017);
 } else {
  if ($5) {
   $19 = HEAP32[$0>>2]|0;
   $24 = $19;
  } else {
   $24 = $0;
  }
  $20 = ($$sroa$speculated18|0)==($1|0);
  do {
   if ($20) {
    $$215 = $1;$$3 = 0;$$373 = 5017;$$377 = $1;
    label = 17;
   } else {
    $21 = (($15) - ($$sroa$speculated18))|0;
    $22 = ($21|0)==(0);
    if ($22) {
     $$215 = $$sroa$speculated18;$$3 = 0;$$373 = 5017;$$377 = $1;
     label = 17;
    } else {
     $23 = ($$sroa$speculated18>>>0)>($1>>>0);
     if ($23) {
      (__ZNSt3__211char_traitsIcE4moveEPcPKcj($24,5017,$1)|0);
      $37 = (($24) + ($1)|0);
      $38 = (($24) + ($$sroa$speculated18)|0);
      (__ZNSt3__211char_traitsIcE4moveEPcPKcj($37,$38,$21)|0);
      $$316 = $$sroa$speculated18;$$4 = $1;
      break;
     }
     $25 = ($24>>>0)<(5017>>>0);
     $26 = (($24) + ($15)|0);
     $27 = ($26>>>0)>(5017>>>0);
     $or$cond = $25 & $27;
     do {
      if ($or$cond) {
       $28 = (($24) + ($$sroa$speculated18)|0);
       $29 = ($28>>>0)>(5017>>>0);
       if ($29) {
        (__ZNSt3__211char_traitsIcE4moveEPcPKcj($24,5017,$$sroa$speculated18)|0);
        $32 = (5017 + ($1)|0);
        $33 = (($1) - ($$sroa$speculated18))|0;
        $$014 = 0;$$069 = $$sroa$speculated18;$$070 = $32;$$074 = $33;
        break;
       } else {
        $30 = (($1) - ($$sroa$speculated18))|0;
        $31 = (5017 + ($30)|0);
        $$014 = $$sroa$speculated18;$$069 = 0;$$070 = $31;$$074 = $1;
        break;
       }
      } else {
       $$014 = $$sroa$speculated18;$$069 = 0;$$070 = 5017;$$074 = $1;
      }
     } while(0);
     $34 = (($24) + ($$069)|0);
     $35 = (($34) + ($$074)|0);
     $36 = (($34) + ($$014)|0);
     (__ZNSt3__211char_traitsIcE4moveEPcPKcj($35,$36,$21)|0);
     $$215 = $$014;$$3 = $$069;$$373 = $$070;$$377 = $$074;
     label = 17;
    }
   }
  } while(0);
  if ((label|0) == 17) {
   $39 = (($24) + ($$3)|0);
   (__ZNSt3__211char_traitsIcE4moveEPcPKcj($39,$$373,$$377)|0);
   $$316 = $$215;$$4 = $$377;
  }
  $40 = (($$4) - ($$316))|0;
  $41 = (($40) + ($15))|0;
  $42 = HEAP8[$3>>0]|0;
  $43 = ($42<<24>>24)<(0);
  if ($43) {
   $44 = ((($0)) + 4|0);
   HEAP32[$44>>2] = $41;
  } else {
   $45 = $41&255;
   HEAP8[$3>>0] = $45;
  }
  $46 = (($24) + ($41)|0);
  HEAP8[$2>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($46,$2);
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZNSt3__211char_traitsIcE7compareEPKcS3_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
 } else {
  $4 = (_memcmp($0,$1,$2)|0);
  $$0 = $4;
 }
 return ($$0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 $5 = ((($0)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = ((($0)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
 } else {
  $10 = $6&255;
  $11 = $10;
 }
 $12 = ($11>>>0)<($1>>>0);
 if ($12) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0);
  // unreachable;
 }
 if ($7) {
  $13 = ((($0)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 & 2147483647;
  $phitmp$i = (($15) + -1)|0;
  $17 = $phitmp$i;
 } else {
  $17 = 10;
 }
 $16 = (($17) - ($11))|0;
 $18 = ($16>>>0)<($3>>>0);
 if ($18) {
  $36 = (($11) + ($3))|0;
  $37 = (($36) - ($17))|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$17,$37,$11,$1,0,$3,$2);
 } else {
  $19 = ($3|0)==(0);
  if (!($19)) {
   if ($7) {
    $20 = HEAP32[$0>>2]|0;
    $24 = $20;
   } else {
    $24 = $0;
   }
   $21 = (($11) - ($1))|0;
   $22 = ($21|0)==(0);
   $23 = (($24) + ($1)|0);
   if ($22) {
    $$1 = $2;
   } else {
    $25 = (($23) + ($3)|0);
    $26 = ($23>>>0)<=($2>>>0);
    $27 = (($24) + ($11)|0);
    $28 = ($27>>>0)>($2>>>0);
    $or$cond = $26 & $28;
    $29 = (($2) + ($3)|0);
    $$0 = $or$cond ? $29 : $2;
    (__ZNSt3__211char_traitsIcE4moveEPcPKcj($25,$23,$21)|0);
    $$1 = $$0;
   }
   (__ZNSt3__211char_traitsIcE4moveEPcPKcj($23,$$1,$3)|0);
   $30 = (($11) + ($3))|0;
   $31 = HEAP8[$5>>0]|0;
   $32 = ($31<<24>>24)<(0);
   if ($32) {
    $33 = ((($0)) + 4|0);
    HEAP32[$33>>2] = $30;
   } else {
    $34 = $30&255;
    HEAP8[$5>>0] = $34;
   }
   $35 = (($24) + ($30)|0);
   HEAP8[$4>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($35,$4);
  }
 }
 STACKTOP = sp;return ($0|0);
}
function __ZNKSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 268435455;
}
function __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 if ($6) {
  $8 = 0;
 } else {
  $7 = (__ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EE8allocateEj($3,$1)|0);
  $8 = $7;
 }
 HEAP32[$0>>2] = $8;
 $9 = (($8) + ($2<<4)|0);
 $10 = ((($0)) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($0)) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = (($8) + ($1<<4)|0);
 $13 = ((($0)) + 12|0);
 HEAP32[$13>>2] = $12;
 return;
}
function __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $$0$i = $4;
 while(1) {
  $6 = ($$0$i|0)==($2|0);
  if ($6) {
   break;
  }
  $7 = HEAP32[$5>>2]|0;
  $8 = ((($7)) + -16|0);
  $9 = ((($$0$i)) + -16|0);
  $10 = ((($$0$i)) + -4|0);
  HEAP32[$8>>2] = 0;
  $11 = ((($7)) + -12|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($7)) + -8|0);
  $13 = HEAP32[$10>>2]|0;
  HEAP32[$12>>2] = 0;
  $14 = ((($7)) + -4|0);
  HEAP32[$14>>2] = $13;
  $15 = HEAP32[$9>>2]|0;
  HEAP32[$8>>2] = $15;
  $16 = ((($$0$i)) + -12|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$11>>2] = $17;
  $18 = ((($$0$i)) + -8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($7)) + -8|0);
  HEAP32[$20>>2] = $19;
  HEAP32[$18>>2] = 0;
  HEAP32[$16>>2] = 0;
  HEAP32[$9>>2] = 0;
  $21 = HEAP32[$5>>2]|0;
  $22 = ((($21)) + -16|0);
  HEAP32[$5>>2] = $22;
  $$0$i = $9;
 }
 $23 = HEAP32[$0>>2]|0;
 $24 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $24;
 HEAP32[$5>>2] = $23;
 $25 = ((($1)) + 8|0);
 $26 = HEAP32[$3>>2]|0;
 $27 = HEAP32[$25>>2]|0;
 HEAP32[$3>>2] = $27;
 HEAP32[$25>>2] = $26;
 $28 = ((($0)) + 8|0);
 $29 = ((($1)) + 12|0);
 $30 = HEAP32[$28>>2]|0;
 $31 = HEAP32[$29>>2]|0;
 HEAP32[$28>>2] = $31;
 HEAP32[$29>>2] = $30;
 $32 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $32;
 return;
}
function __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 while(1) {
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($2|0);
  if ($5) {
   break;
  }
  $6 = ((($4)) + -16|0);
  HEAP32[$3>>2] = $6;
  __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($6);
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $9 = $7;
  $10 = ((($0)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) - ($9))|0;
  $15 = $14 >> 4;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EE10deallocateEPS6_j($11,$7,$15);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = $1 << 4;
 $4 = (__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj($2,$3)|0);
 return ($4|0);
}
function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8allocateEj($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8max_sizeEv($0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $3 = ((($0)) + 12|0);
  $4 = (__ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE8allocateEj($3,1)|0);
  $5 = ((($0)) + 4|0);
  HEAP32[$5>>2] = $4;
  HEAP32[$0>>2] = $4;
  $6 = ((($4)) + 24|0);
  $7 = ((($0)) + 8|0);
  HEAP32[$7>>2] = $6;
  return;
 }
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($0) {
 $0 = $0|0;
 var $$pre = 0, $$sroa$speculated = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ((($0)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = ((($0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[$0>>2]|0;
  $14 = $7;$9 = $6;
 } else {
  $8 = $3&255;
  $14 = $0;$9 = $8;
 }
 $10 = ($9|0)!=(0);
 $$sroa$speculated = $10&1;
 $11 = (($9) - ($$sroa$speculated))|0;
 $12 = ($11|0)==(0);
 if ($12) {
  $15 = $3;
 } else {
  $13 = (($14) + ($$sroa$speculated)|0);
  (__ZNSt3__211char_traitsIcE4moveEPcPKcj($14,$13,$11)|0);
  $$pre = HEAP8[$2>>0]|0;
  $15 = $$pre;
 }
 $16 = ($15<<24>>24)<(0);
 if ($16) {
  $17 = ((($0)) + 4|0);
  HEAP32[$17>>2] = $11;
 } else {
  $18 = $11&255;
  HEAP8[$2>>0] = $18;
 }
 $19 = (($14) + ($11)|0);
 HEAP8[$1>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($19,$1);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj8EEERAT__Kc($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $2 = ((($0)) + 11|0);
 HEAP8[$2>>0] = 7;
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($0,4790,7)|0);
 $3 = ((($0)) + 7|0);
 HEAP8[$1>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($3,$1);
 $4 = ((($0)) + 12|0);
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $5 = (($4) + ($$0$i$i<<2)|0);
  HEAP32[$5>>2] = 0;
  $6 = (($$0$i$i) + 1)|0;
  $$0$i$i = $6;
 }
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj4EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $3 = ((($0)) + 11|0);
 HEAP8[$3>>0] = 3;
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($0,$1,3)|0);
 $4 = ((($0)) + 3|0);
 HEAP8[$2>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($4,$2);
 $5 = ((($0)) + 12|0);
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $6 = (($5) + ($$0$i$i<<2)|0);
  HEAP32[$6>>2] = 0;
  $7 = (($$0$i$i) + 1)|0;
  $$0$i$i = $7;
 }
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj19EEERAT__Kc($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $2 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj(32)|0);
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = -2147483616;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = 18;
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($2,5210,18)|0);
 $5 = ((($2)) + 18|0);
 HEAP8[$1>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($5,$1);
 $6 = ((($0)) + 12|0);
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $7 = (($6) + ($$0$i$i<<2)|0);
  HEAP32[$7>>2] = 0;
  $8 = (($$0$i$i) + 1)|0;
  $$0$i$i = $8;
 }
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $3 = ((($0)) + 11|0);
 HEAP8[$3>>0] = 8;
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($0,$1,8)|0);
 $4 = ((($0)) + 8|0);
 HEAP8[$2>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($4,$2);
 $5 = ((($0)) + 12|0);
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $6 = (($5) + ($$0$i$i<<2)|0);
  HEAP32[$6>>2] = 0;
  $7 = (($$0$i$i) + 1)|0;
  $$0$i$i = $7;
 }
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj7EEERAT__Kc($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $2 = ((($0)) + 11|0);
 HEAP8[$2>>0] = 6;
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($0,5203,6)|0);
 $3 = ((($0)) + 6|0);
 HEAP8[$1>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($3,$1);
 $4 = ((($0)) + 12|0);
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $5 = (($4) + ($$0$i$i<<2)|0);
  HEAP32[$5>>2] = 0;
  $6 = (($$0$i$i) + 1)|0;
  $$0$i$i = $6;
 }
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110save_valueIjEC2ERj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$1>>2]|0;
 HEAP32[$2>>2] = $3;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbEC2ERb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 4|0);
 $3 = HEAP8[$1>>0]|0;
 HEAP8[$2>>0] = $3;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_special_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i158 = 0, $$0$i$i$i161 = 0, $$11 = 0, $$4156 = 0, $$8 = 0, $$8151 = 0, $$pre$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i159 = 0, $exitcond$i$i$i162 = 0, $or$cond = 0, $switch = 0, $trunc = 0, $trunc$clear = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $3 = sp + 60|0;
 $4 = sp + 48|0;
 $5 = sp + 36|0;
 $6 = sp + 24|0;
 $7 = sp + 12|0;
 $8 = sp;
 $9 = $1;
 $10 = $0;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)>(2);
 L1: do {
  if ($12) {
   $13 = HEAP8[$0>>0]|0;
   $14 = $13 << 24 >> 24;
   switch ($14|0) {
   case 84:  {
    break;
   }
   case 71:  {
    $127 = ((($0)) + 1|0);
    $128 = HEAP8[$127>>0]|0;
    $129 = $128 << 24 >> 24;
    switch ($129|0) {
    case 86:  {
     $130 = ((($0)) + 2|0);
     $131 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($130,$1,$2)|0);
     $132 = ($131|0)==($130|0);
     if ($132) {
      $$11 = $0;
      label = 60;
      break L1;
     }
     $133 = HEAP32[$2>>2]|0;
     $134 = ((($2)) + 4|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($133|0)==($135|0);
     if ($136) {
      $$8 = $0;
      break L1;
     }
     $137 = ((($135)) + -24|0);
     (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($137,0,5428)|0);
     $$11 = $131;
     label = 60;
     break L1;
     break;
    }
    case 82:  {
     $138 = ((($0)) + 2|0);
     $139 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($138,$1,$2)|0);
     $140 = ($139|0)==($138|0);
     if ($140) {
      $$11 = $0;
      label = 60;
      break L1;
     }
     $141 = HEAP32[$2>>2]|0;
     $142 = ((($2)) + 4|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($141|0)==($143|0);
     if ($144) {
      $$8 = $0;
      break L1;
     }
     $145 = ((($143)) + -24|0);
     (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($145,0,5448)|0);
     $$11 = $139;
     label = 60;
     break L1;
     break;
    }
    default: {
     $$11 = $0;
     label = 60;
     break L1;
    }
    }
    break;
   }
   default: {
    $$11 = $0;
    label = 60;
    break L1;
   }
   }
   $15 = ((($0)) + 1|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16 << 24 >> 24;
   switch ($17|0) {
   case 86:  {
    $18 = ((($0)) + 2|0);
    $19 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($18,$1,$2)|0);
    $20 = ($19|0)==($18|0);
    if ($20) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $21 = HEAP32[$2>>2]|0;
    $22 = ((($2)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($21|0)==($23|0);
    if ($24) {
     $$8 = $0;
     break L1;
    }
    $25 = ((($23)) + -24|0);
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($25,0,5277)|0);
    $$11 = $19;
    label = 60;
    break L1;
    break;
   }
   case 84:  {
    $26 = ((($0)) + 2|0);
    $27 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($26,$1,$2)|0);
    $28 = ($27|0)==($26|0);
    if ($28) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $29 = HEAP32[$2>>2]|0;
    $30 = ((($2)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($29|0)==($31|0);
    if ($32) {
     $$8 = $0;
     break L1;
    }
    $33 = ((($31)) + -24|0);
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($33,0,5289)|0);
    $$11 = $27;
    label = 60;
    break L1;
    break;
   }
   case 73:  {
    $34 = ((($0)) + 2|0);
    $35 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($34,$1,$2)|0);
    $36 = ($35|0)==($34|0);
    if ($36) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $37 = HEAP32[$2>>2]|0;
    $38 = ((($2)) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($37|0)==($39|0);
    if ($40) {
     $$8 = $0;
     break L1;
    }
    $41 = ((($39)) + -24|0);
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($41,0,5298)|0);
    $$11 = $35;
    label = 60;
    break L1;
    break;
   }
   case 83:  {
    $42 = ((($0)) + 2|0);
    $43 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($42,$1,$2)|0);
    $44 = ($43|0)==($42|0);
    if ($44) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $45 = HEAP32[$2>>2]|0;
    $46 = ((($2)) + 4|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($45|0)==($47|0);
    if ($48) {
     $$8 = $0;
     break L1;
    }
    $49 = ((($47)) + -24|0);
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($49,0,5312)|0);
    $$11 = $43;
    label = 60;
    break L1;
    break;
   }
   case 99:  {
    $50 = ((($0)) + 2|0);
    $51 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($50,$1)|0);
    $52 = ($51|0)==($50|0);
    if ($52) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $53 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($51,$1)|0);
    $54 = ($53|0)==($51|0);
    if ($54) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $55 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($53,$1,$2)|0);
    $56 = ($55|0)==($53|0);
    if ($56) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $57 = HEAP32[$2>>2]|0;
    $58 = ((($2)) + 4|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ($57|0)==($59|0);
    if ($60) {
     $$8 = $0;
     break L1;
    }
    $61 = ((($59)) + -24|0);
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($61,0,5331)|0);
    $$11 = $55;
    label = 60;
    break L1;
    break;
   }
   case 67:  {
    $62 = ((($0)) + 2|0);
    $63 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($62,$1,$2)|0);
    $64 = ($63|0)==($62|0);
    if ($64) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $65 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($63,$1)|0);
    $66 = ($65|0)==($63|0);
    $67 = ($65|0)==($1|0);
    $or$cond = $66 | $67;
    if ($or$cond) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $68 = HEAP8[$65>>0]|0;
    $69 = ($68<<24>>24)==(95);
    if (!($69)) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $70 = ((($65)) + 1|0);
    $71 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($70,$1,$2)|0);
    $72 = ($71|0)==($70|0);
    if ($72) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $73 = ((($2)) + 4|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = HEAP32[$2>>2]|0;
    $76 = (($74) - ($75))|0;
    $77 = (($76|0) / 24)&-1;
    $78 = ($77>>>0)<(2);
    if ($78) {
     $$8 = $0;
     break L1;
    }
    $79 = $74;
    $80 = ((($79)) + -24|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4,$80);
    $81 = HEAP32[$73>>2]|0;
    $82 = ((($81)) + -24|0);
    $83 = $81;
    while(1) {
     $84 = ($83|0)==($82|0);
     if ($84) {
      break;
     }
     $85 = ((($83)) + -24|0);
     HEAP32[$73>>2] = $85;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($85);
     $$pre$i = HEAP32[$73>>2]|0;
     $83 = $$pre$i;
    }
    $86 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($4,0,5358)|0);
    ;HEAP32[$7>>2]=HEAP32[$4>>2]|0;HEAP32[$7+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$4+8>>2]|0;
    $$0$i$i$i161 = 0;
    while(1) {
     $exitcond$i$i$i162 = ($$0$i$i$i161|0)==(3);
     if ($exitcond$i$i$i162) {
      break;
     }
     $87 = (($4) + ($$0$i$i$i161<<2)|0);
     HEAP32[$87>>2] = 0;
     $88 = (($$0$i$i$i161) + 1)|0;
     $$0$i$i$i161 = $88;
    }
    $89 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($7,5383)|0);
    ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
    $$0$i$i$i158 = 0;
    while(1) {
     $exitcond$i$i$i159 = ($$0$i$i$i158|0)==(3);
     if ($exitcond$i$i$i159) {
      break;
     }
     $90 = (($7) + ($$0$i$i$i158<<2)|0);
     HEAP32[$90>>2] = 0;
     $91 = (($$0$i$i$i158) + 1)|0;
     $$0$i$i$i158 = $91;
    }
    $92 = HEAP32[$73>>2]|0;
    $93 = ((($92)) + -24|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($8,$93);
    $94 = ((($8)) + 11|0);
    $95 = HEAP8[$94>>0]|0;
    $96 = ($95<<24>>24)<(0);
    $97 = HEAP32[$8>>2]|0;
    $98 = ((($8)) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = $95&255;
    $101 = $96 ? $97 : $8;
    $102 = $96 ? $99 : $100;
    $103 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($6,$101,$102)|0);
    ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
    $$0$i$i$i = 0;
    while(1) {
     $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
     if ($exitcond$i$i$i) {
      break;
     }
     $104 = (($6) + ($$0$i$i$i<<2)|0);
     HEAP32[$104>>2] = 0;
     $105 = (($$0$i$i$i) + 1)|0;
     $$0$i$i$i = $105;
    }
    $106 = HEAP32[$73>>2]|0;
    $107 = ((($106)) + -24|0);
    $108 = ((($107)) + 11|0);
    $109 = HEAP8[$108>>0]|0;
    $110 = ($109<<24>>24)<(0);
    if ($110) {
     $111 = HEAP32[$107>>2]|0;
     HEAP8[$3>>0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($111,$3);
     $112 = ((($106)) + -20|0);
     HEAP32[$112>>2] = 0;
    } else {
     HEAP8[$3>>0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($107,$3);
     HEAP8[$108>>0] = 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($107);
    ;HEAP32[$107>>2]=HEAP32[$5>>2]|0;HEAP32[$107+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$107+8>>2]=HEAP32[$5+8>>2]|0;
    $$0$i$i$i$i = 0;
    while(1) {
     $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
     if ($exitcond$i$i$i$i) {
      break;
     }
     $113 = (($5) + ($$0$i$i$i$i<<2)|0);
     HEAP32[$113>>2] = 0;
     $114 = (($$0$i$i$i$i) + 1)|0;
     $$0$i$i$i$i = $114;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    $$11 = $71;
    label = 60;
    break L1;
    break;
   }
   default: {
    $115 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($15,$1)|0);
    $116 = ($115|0)==($15|0);
    do {
     if ($116) {
      $$4156 = 3;$$8151 = $0;
     } else {
      $117 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($115,$1,$2)|0);
      $118 = ($117|0)==($115|0);
      if ($118) {
       $$4156 = 0;$$8151 = $0;
      } else {
       $119 = HEAP32[$2>>2]|0;
       $120 = ((($2)) + 4|0);
       $121 = HEAP32[$120>>2]|0;
       $122 = ($119|0)==($121|0);
       if ($122) {
        $$4156 = 1;$$8151 = $0;
       } else {
        $123 = ((($0)) + 2|0);
        $124 = HEAP8[$123>>0]|0;
        $125 = ($124<<24>>24)==(118);
        $126 = ((($121)) + -24|0);
        if ($125) {
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($126,0,5388)|0);
         $$4156 = 0;$$8151 = $117;
         break;
        } else {
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($126,0,5406)|0);
         $$4156 = 0;$$8151 = $117;
         break;
        }
       }
      }
     }
    } while(0);
    $trunc = $$4156&255;
    $trunc$clear = $trunc & 3;
    switch ($trunc$clear<<24>>24) {
    case 3: case 0:  {
     $$11 = $$8151;
     label = 60;
     break L1;
     break;
    }
    default: {
    }
    }
    $switch = ($$4156|0)==(0);
    if ($switch) {
     $$11 = $$8151;
     label = 60;
     break L1;
    } else {
     $$8 = $0;
     break L1;
    }
   }
   }
  } else {
   $$11 = $0;
   label = 60;
  }
 } while(0);
 if ((label|0) == 60) {
  $$8 = $$11;
 }
 STACKTOP = sp;return ($$8|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = HEAP32[$0>>2]|0;
 HEAP8[$3>>0] = $2;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110save_valueIjED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 HEAP32[$3>>2] = $2;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$3 = 0, $$34 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond32 = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 L1: do {
  if ($2) {
   $$3 = $0;
  } else {
   $3 = HEAP8[$0>>0]|0;
   $4 = $3 << 24 >> 24;
   switch ($4|0) {
   case 104:  {
    $5 = ((($0)) + 1|0);
    $6 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($5,$1)|0);
    $7 = ($6|0)==($5|0);
    $8 = ($6|0)==($1|0);
    $or$cond = $7 | $8;
    if ($or$cond) {
     $$3 = $0;
     break L1;
    }
    $9 = HEAP8[$6>>0]|0;
    $10 = ($9<<24>>24)==(95);
    $11 = ((($6)) + 1|0);
    $$ = $10 ? $11 : $0;
    return ($$|0);
    break;
   }
   case 118:  {
    break;
   }
   default: {
    $$3 = $0;
    break L1;
   }
   }
   $12 = ((($0)) + 1|0);
   $13 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($12,$1)|0);
   $14 = ($13|0)==($12|0);
   $15 = ($13|0)==($1|0);
   $or$cond32 = $14 | $15;
   if ($or$cond32) {
    $$3 = $0;
   } else {
    $16 = HEAP8[$13>>0]|0;
    $17 = ($16<<24>>24)==(95);
    if ($17) {
     $18 = ((($13)) + 1|0);
     $19 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($18,$1)|0);
     $20 = ($19|0)==($18|0);
     $21 = ($19|0)==($1|0);
     $or$cond33 = $20 | $21;
     if ($or$cond33) {
      $$3 = $0;
     } else {
      $22 = HEAP8[$19>>0]|0;
      $23 = ($22<<24>>24)==(95);
      $24 = ((($19)) + 1|0);
      $$34 = $23 ? $24 : $0;
      $$3 = $$34;
     }
    } else {
     $$3 = $0;
    }
   }
  }
 } while(0);
 return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EEC2ERNS0_5arenaILj4096EEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 return;
}
function __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEC2EjRKS6_RKS7_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$1>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = ((($0)) + 12|0);
 HEAP32[$5>>2] = $4;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 return;
}
function __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEEC2EjRKS8_RKS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$1>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = ((($0)) + 12|0);
 HEAP32[$5>>2] = $4;
 return;
}
function runPostSets() {
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}

  
function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&1](a1|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&7](a1|0,a2|0,a3|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&3]();
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&7](a1|0);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&3](a1|0,a2|0,a3|0,a4|0);
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}

function b0(p0) {
 p0 = p0|0; abort(0);return 0;
}
function b1(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(1);return 0;
}
function b2() {
 ; abort(2);
}
function b3(p0) {
 p0 = p0|0; abort(3);
}
function b4(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(4);
}
function b5(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(5);
}
function b6(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(6);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,___stdio_close];
var FUNCTION_TABLE_iiii = [b1,___stdio_write,___stdio_seek,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b1,b1,b1];
var FUNCTION_TABLE_v = [b2,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b2];
var FUNCTION_TABLE_vi = [b3,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b3];
var FUNCTION_TABLE_viiii = [b4,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b4];
var FUNCTION_TABLE_viiiii = [b5,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b5];
var FUNCTION_TABLE_viiiiii = [b6,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b6];

  return { ___cxa_demangle: ___cxa_demangle, ___errno_location: ___errno_location, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _sbrk: _sbrk, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var ___cxa_demangle = Module["___cxa_demangle"] = asm["___cxa_demangle"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;








Module["getMemory"] = getMemory;
























Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;

Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
























if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}





/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }


  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();


    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = run;


function exit(status, implicit) {

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  throw 'abort(' + what + '). Build with -s ASSERTIONS=1 for more info.';
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



